{"version":3,"sources":["data/index.ts","hooks/usePrevious.ts","contexts/production/index.tsx","containers/ProductionPlanner/PlannerOptions/ProductionTab/index.tsx","containers/ProductionPlanner/PlannerOptions/InputsTab/index.tsx","containers/ProductionPlanner/PlannerOptions/RecipesTab/index.tsx","containers/ProductionPlanner/PlannerOptions/index.tsx","components/GraphVis/index.tsx","utilities/production-solver/index.ts","containers/ProductionPlanner/PlannerResults/ProductionGraphTab/index.tsx","containers/ProductionPlanner/PlannerResults/RecipeGraphTab/index.tsx","containers/ProductionPlanner/PlannerResults/BuildingsTab/index.tsx","containers/ProductionPlanner/PlannerResults/index.tsx","containers/ProductionPlanner/index.tsx","containers/Main/index.tsx","App.tsx","index.tsx"],"names":["items","itemsRaw","itemRecipeMap","itemRecipeMapRaw","uncraftableItems","uncraftableItemsRaw","recipes","recipesRaw","resources","resourcesRaw","buildings","buildingsRaw","usePrevious","value","ref","useRef","useEffect","current","LOCAL_STORAGE_KEY","ProductionContext","createContext","useProductionContext","ctx","useContext","Error","displayName","ORDERED_RESOURCES","getInitialInputResources","Object","entries","map","key","data","unlimited","String","maxExtraction","itemKey","sort","a","b","aIndex","findIndex","r","Infinity","bIndex","getInitialAllowedRecipes","recipeMap","forEach","isAlternate","reducer","state","action","type","name","newProductionItems","productionItems","nanoid","mode","filter","i","newInputItems","inputItems","newInputResources","inputResources","newAllowedRecipes","allowedRecipes","active","keys","alternates","window","localStorage","getItem","JSON","parse","e","console","error","ProductionProvider","children","useReducer","dispatch","useState","loaded","setLoaded","prevState","setItem","stringify","Provider","itemOptions","text","modeOptions","ProductionTab","Grid","Row","Column","style","flex","Dropdown","fluid","placeholder","selection","search","clearable","options","onChange","Input","className","min","step","disabled","width","minWidth","Button","icon","negative","onClick","Icon","columns","primary","InputsTab","Header","labelPosition","Checkbox","fontWeight","label","checked","Divider","display","alignItems","cleanAltNameRegex","baseRecipes","altRecipes","push","replace","RecipesTab","altRecipeSearch","setAltRecipeSearch","baseRecipeSearch","setBaseRecipeSearch","renderRecipeList","useCallback","recipeList","component","List","Item","renderedBaseRecipes","useMemo","renderedAltRecipes","renderRecipeOptions","searchValue","setSearchValue","rendered","toLowerCase","includes","divided","PlannerOptions","activeTab","setActiveTab","handleSetTab","Container","Menu","pointing","secondary","attached","widths","padding","renderTab","useSealedState","diff","next","field","nextIds","Set","item","removed","has","unchanged","intersectionWith","isEqual","updated","differenceWith","added","defaultOptions","physics","stabilization","autoResize","edges","smooth","color","arrows","to","enabled","scaleFactor","GraphVis","forwardRef","graph","events","propOptions","props","container","DataSet","nodes","initialOptions","prevNodes","prevEdges","remove","add","update","network","setNetwork","useImperativeHandle","eventName","callback","on","off","setOptions","mergedOptions","defaultsDeep","cloneDeep","newNetwork","Network","destroy","NODE_TYPE","ProductionSolver","inputs","outputs","itemRecipeTable","currentId","this","amount","Number","maxResourceAmount","resourceData","relativeValue","targets","productionRate","log","t0","performance","now","recipeGraph","generateRecipeGraph","productionGraph","generateProductionGraph","t","score","maxDepth","complexity","initialNode","itemScore","recipeScore","depth","from","buildRecipeTree","scoreRecipes","parentNode","ingredients","ingredient","itemClass","itemNode","edge","nodeExists","itemRecipes","find","length","recipe","recipeNode","iterations","noUpdates","inputNodes","node","itemNodes","minRecipeScore","recipeInfo","targetProduct","products","p","ingredientNode","perMinute","scoreA","scoreB","adjustableItems","initialRecipeSelection","currentGraph","buildProductionGraphFromRecipeSelection","nextPass","itemList","usedItems","testItemIdx","Math","floor","random","testItem","splice","testRecipeList","recipeSelection","testRecipeSelection","testRecipeIdx","testGraph","id","nextId","multiplier","buildItemTree","collapsedGraph","newEdges","collapsedNode","n","collapsedEdge","outputTargets","targetRate","selectedRecipe","primaryProduct","sideProducts","productNode","sideProduct","graphOptions","layout","hierarchical","direction","sortMethod","shakeTowards","levelSeparation","nodeSpacing","treeSpacing","interaction","selectConnectedEdges","zoomSpeed","borderWidth","chosen","truncateFloat","toFixed","getNodeLabel","amountText","producedIn","val","getEdgeLabel","ProductionGraphTab","activeGraph","errorMessage","graphData","shape","heightConstraint","widthConstraint","height","flexDirection","justifyContent","border","BuildingsTab","PlannerResults","autoCalc","setAutoCalc","solverResults","setSolverResults","setErrorMessage","handleCalculateFactory","solver","results","exec","message","process","marginBottom","marginRight","ProductionPlanner","as","Factory","Segment","size","Main","fixed","header","paddingTop","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7d579d1e.chunk.js","sourcesContent":["import itemsRaw from './json/items.json';\r\nimport itemRecipeMapRaw from './json/itemRecipeMap.json';\r\nimport uncraftableItemsRaw from './json/uncraftableItems.json';\r\nimport recipesRaw from './json/recipes.json';\r\nimport resourcesRaw from './json/resources.json';\r\nimport buildingsRaw from './json/buildings.json';\r\n\r\nexport type ItemRate = {\r\n  itemClass: string,\r\n  perMinute: number,\r\n}\r\n\r\nexport type ItemInfo = {\r\n  slug: string,\r\n  name: string,\r\n  sinkPoints: number,\r\n};\r\n\r\nexport type RecipeInfo = {\r\n  slug: string,\r\n  name: string,\r\n  isAlternate: boolean,\r\n  ingredients: ItemRate[],\r\n  products: ItemRate[],\r\n  producedIn: string,\r\n};\r\n\r\nexport type ResourceInfo = {\r\n  itemClass: string,\r\n  maxExtraction: number | null,\r\n  relativeValue: number,\r\n};\r\n\r\nexport type BuildingsInfo = {\r\n  slug: string,\r\n  name: string,\r\n  power: number,\r\n};\r\n\r\nexport type ItemMap = { [key in keyof typeof itemsRaw]: ItemInfo } & { [key: string]: ItemInfo };\r\nexport type ItemRecipeMap = { [key in keyof typeof itemRecipeMapRaw]: string[] } & { [key: string]: string[] };\r\nexport type UncraftableItemsMap = { [key in keyof typeof uncraftableItemsRaw]: string } & { [key: string]: string };\r\nexport type RecipeMap = { [key in keyof typeof recipesRaw]: RecipeInfo } & { [key: string]: RecipeInfo };\r\nexport type ResourceMap = { [key in keyof typeof resourcesRaw]: ResourceInfo } & { [key: string]: ResourceInfo };\r\nexport type BuildingMap = { [key in keyof typeof buildingsRaw]: BuildingsInfo } & { [key: string]: BuildingsInfo };\r\n\r\nexport const items = (itemsRaw as ItemMap);\r\nexport const itemRecipeMap = (itemRecipeMapRaw as ItemRecipeMap);\r\nexport const uncraftableItems = (uncraftableItemsRaw as UncraftableItemsMap);\r\nexport const recipes = (recipesRaw as RecipeMap);\r\nexport const resources = (resourcesRaw as ResourceMap);\r\nexport const buildings = (buildingsRaw as BuildingMap);\r\n","import { useRef, useEffect } from 'react';\r\n\r\nexport function usePrevious<T>(value: T) {\r\n  const ref = useRef<T>();\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  }, [value]);\r\n  return ref.current;\r\n}\r\n","import React, { createContext, useContext, useReducer, useState, useEffect } from 'react';\r\nimport { nanoid } from 'nanoid';\r\nimport { usePrevious } from '../../hooks/usePrevious';\r\nimport { resources, recipes } from '../../data'\r\n\r\nconst LOCAL_STORAGE_KEY = 'factory-data';\r\n\r\n// TYPES\r\nexport type ProductionItemOptions = {\r\n  key: string,\r\n  itemKey: string,\r\n  mode: 'rate-target'|'building-target'|'maximize',\r\n  value: string,\r\n};\r\n\r\nexport type InputItemOptions = {\r\n  key: string,\r\n  itemKey: string,\r\n  value: string,\r\n  unlimited: boolean,\r\n};\r\n\r\nexport type RecipeMap = {\r\n  [key: string]: boolean,\r\n};\r\n\r\nexport type FactoryOptions = {\r\n  key: string,\r\n  name: string,\r\n  productionItems: ProductionItemOptions[],\r\n  inputItems: InputItemOptions[],\r\n  inputResources: InputItemOptions[],\r\n  allowedRecipes: RecipeMap,\r\n};\r\n\r\nexport type ProductionContextType = {\r\n  state: FactoryOptions,\r\n  dispatch: React.Dispatch<FactoryAction>,\r\n}\r\n\r\n\r\n// CONTEXT\r\nexport const ProductionContext = createContext<ProductionContextType | null>(null);\r\nProductionContext.displayName = 'ProductionContext';\r\n\r\n\r\n// HELPER HOOK\r\nexport function useProductionContext() {\r\n  const ctx = useContext(ProductionContext);\r\n  if (!ctx) {\r\n    throw new Error('ProductionContext is null');\r\n  }\r\n  return ctx;\r\n}\r\n\r\n\r\n// DEFAULTS\r\nfunction getDefaultProductionItem(): ProductionItemOptions {\r\n  return ({\r\n    key: nanoid(),\r\n    itemKey: '',\r\n    mode: 'rate-target',\r\n    value: '10',\r\n  });\r\n}\r\n\r\nfunction getDefaultInputItem(): InputItemOptions {\r\n  return ({\r\n    key: nanoid(),\r\n    itemKey: '',\r\n    value: '0',\r\n    unlimited: false,\r\n  });\r\n}\r\n\r\nconst ORDERED_RESOURCES = [\r\n  'Desc_OreIron_C',\r\n  'Desc_OreCopper_C',\r\n  'Desc_Stone_C',\r\n  'Desc_Coal_C',\r\n  'Desc_OreGold_C',\r\n  'Desc_RawQuartz_C',\r\n  'Desc_Sulfur_C',\r\n  'Desc_LiquidOil_C',\r\n  'Desc_OreBauxite_C',\r\n  'Desc_OreUranium_C',\r\n  'Desc_NitrogenGas_C',\r\n  'Desc_Water_C',\r\n];\r\nfunction getInitialInputResources(): InputItemOptions[] {\r\n  return Object.entries(resources)\r\n    .map(([key, data]) => {\r\n      let value = '0';\r\n      let unlimited = false;\r\n      if (key === 'Desc_Water_C') {\r\n        unlimited = true;\r\n      } else {\r\n        value = String(data.maxExtraction);\r\n      }\r\n      return {\r\n        key: key,\r\n        itemKey: key,\r\n        value,\r\n        unlimited,\r\n      };\r\n    })\r\n    .sort((a, b) => {\r\n      let aIndex = ORDERED_RESOURCES.findIndex((r) => r === a.itemKey);\r\n      if (aIndex === -1) aIndex = Infinity;\r\n      let bIndex = ORDERED_RESOURCES.findIndex((r) => r === b.itemKey);\r\n      if (bIndex === -1) bIndex = Infinity;\r\n      return aIndex < bIndex ? -1 : 1;\r\n    });\r\n}\r\n\r\nfunction getInitialAllowedRecipes(): RecipeMap {\r\n  const recipeMap: RecipeMap = {};\r\n  Object.entries(recipes).forEach(([key, data]) => {\r\n    recipeMap[key] = !data.isAlternate;\r\n  });\r\n  return recipeMap;\r\n}\r\n\r\nfunction getInitialState(): FactoryOptions {\r\n  return {\r\n    key: nanoid(),\r\n    name: 'New Factory',\r\n    productionItems: [],\r\n    inputItems: [],\r\n    inputResources: getInitialInputResources(),\r\n    allowedRecipes: getInitialAllowedRecipes(),\r\n  };\r\n}\r\n\r\n\r\n// REDUCER\r\nexport type FactoryAction = \r\n  | { type: 'SET_NAME', name: string }\r\n  | { type: 'ADD_PRODUCTION_ITEM' }\r\n  | { type: 'DELETE_PRODUCTION_ITEM', key: string }\r\n  | { type: 'UPDATE_PRODUCTION_ITEM', data: ProductionItemOptions }\r\n  | { type: 'ADD_INPUT_ITEM' }\r\n  | { type: 'DELETE_INPUT_ITEM', key: string }\r\n  | { type: 'UPDATE_INPUT_ITEM', data: InputItemOptions }\r\n  | { type: 'UPDATE_INPUT_RESOURCE', data: InputItemOptions }\r\n  | { type: 'SET_RESOURCES_TO_MAP_LIMITS' }\r\n  | { type: 'SET_RESOURCES_TO_0' }\r\n  | { type: 'SET_RECIPE_ACTIVE', key: string, active: boolean }\r\n  | { type: 'MASS_SET_RECIPES_ACTIVE', alternates: boolean, active: boolean }\r\n  | { type: 'LOAD_LOCAL_STORAGE' };\r\n\r\nfunction reducer(state: FactoryOptions, action: FactoryAction): FactoryOptions {\r\n  switch (action.type) {\r\n    case 'SET_NAME': {\r\n      return { ...state, name: action.name };\r\n    }\r\n    case 'ADD_PRODUCTION_ITEM': {\r\n      const newProductionItems = [\r\n        ...state.productionItems,\r\n        getDefaultProductionItem(),\r\n      ];\r\n      return { ...state, productionItems: newProductionItems };\r\n    }\r\n    case 'DELETE_PRODUCTION_ITEM': {\r\n      const newProductionItems = state.productionItems\r\n        .filter((i) => i.key !== action.key);\r\n      return { ...state, productionItems: newProductionItems };\r\n    }\r\n    case 'UPDATE_PRODUCTION_ITEM': {\r\n      const newProductionItems = state.productionItems\r\n        .map((i) => i.key === action.data.key ? action.data : i);\r\n      return { ...state, productionItems: newProductionItems };\r\n    }\r\n    case 'ADD_INPUT_ITEM': {\r\n      const newInputItems = [\r\n        ...state.inputItems,\r\n        getDefaultInputItem(),\r\n      ];\r\n      return { ...state, inputItems: newInputItems };\r\n    }\r\n    case 'DELETE_INPUT_ITEM': {\r\n      const newInputItems = state.inputItems\r\n        .filter((i) => i.key !== action.key);\r\n      return { ...state, inputItems: newInputItems };\r\n    }\r\n    case 'UPDATE_INPUT_ITEM': {\r\n      const newInputItems = state.inputItems\r\n        .map((i) => i.key === action.data.key ? action.data : i);\r\n      return { ...state, inputItems: newInputItems };\r\n    }\r\n    case 'UPDATE_INPUT_RESOURCE': {\r\n      const newInputResources = state.inputResources\r\n        .map((i) => i.key === action.data.key ? action.data : i);\r\n      return { ...state, inputResources: newInputResources };\r\n    }\r\n    case 'SET_RESOURCES_TO_MAP_LIMITS': {\r\n      const newInputResources = getInitialInputResources();\r\n      return { ...state, inputResources: newInputResources };\r\n    }\r\n    case 'SET_RESOURCES_TO_0': {\r\n      const newInputResources = state.inputResources\r\n        .map((data) => ({ ...data, value: '0', unlimited: false }));\r\n      return { ...state, inputResources: newInputResources };\r\n    }\r\n    case 'SET_RECIPE_ACTIVE': {\r\n      const newAllowedRecipes = { ...state.allowedRecipes };\r\n      newAllowedRecipes[action.key] = action.active;\r\n      return { ...state, allowedRecipes: newAllowedRecipes };\r\n    }\r\n    case 'MASS_SET_RECIPES_ACTIVE': {\r\n      const newAllowedRecipes = { ...state.allowedRecipes };\r\n      Object.keys(newAllowedRecipes).forEach((key) => {\r\n        if (action.alternates && recipes[key].isAlternate) {\r\n          newAllowedRecipes[key] = action.active;\r\n        } else if (!action.alternates && !recipes[key].isAlternate) {\r\n          newAllowedRecipes[key] = action.active;\r\n        }\r\n      })\r\n      return { ...state, allowedRecipes: newAllowedRecipes };\r\n    }\r\n    case 'LOAD_LOCAL_STORAGE': {\r\n      const data = window.localStorage.getItem(LOCAL_STORAGE_KEY);\r\n      if (data) {\r\n        try {\r\n          const loadedState = JSON.parse(data);\r\n          return loadedState;\r\n        } catch (e) {\r\n          console.error('LOAD FROM LOCAL STORAGE FAILED');\r\n        }\r\n      }\r\n      return state;\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n\r\n// PROVIDER\r\ntype PropTypes = { children: React.ReactNode };\r\nexport const ProductionProvider = ({ children }: PropTypes) => {\r\n  const [state, dispatch] = useReducer(reducer, getInitialState());\r\n  const [loaded, setLoaded] = useState(false);\r\n\r\n  const prevState = usePrevious(state);\r\n\r\n  useEffect(() => {\r\n    if (!loaded) {\r\n      dispatch({ type: 'LOAD_LOCAL_STORAGE' });\r\n      setLoaded(true);\r\n    }\r\n  }, [loaded]);\r\n\r\n  useEffect(() => {\r\n    if (prevState !== state) {\r\n      window.localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(state));\r\n    }\r\n  }, [prevState, state]);\r\n\r\n  return (\r\n    <ProductionContext.Provider value={{ state, dispatch }}>\r\n      {children}\r\n    </ProductionContext.Provider>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Button, Dropdown, Input, Grid, Icon } from 'semantic-ui-react';\r\nimport { items, itemRecipeMap } from '../../../../data';\r\nimport { useProductionContext } from '../../../../contexts/production';\r\n\r\nconst itemOptions = Object.keys(itemRecipeMap)\r\n  .map((key) => ({\r\n    value: key,\r\n    text: items[key].name,\r\n  }))\r\n  .sort((a, b) => {\r\n    return a.text > b.text ? 1 : -1;\r\n  });\r\n\r\nconst modeOptions = [\r\n  { value: 'rate-target', text: 'Items Per Min' },\r\n  { value: 'building-target', text: 'Assembly Buildings' },\r\n  { value: 'maximize', text: 'Maximize Output' },\r\n];\r\n\r\nconst ProductionTab = () => {\r\n  const ctx = useProductionContext();\r\n\r\n  function renderItemInputs() {\r\n    return ctx.state.productionItems.map((data) => (\r\n      <Grid.Row key={data.key}>\r\n        <Grid.Column style={{ flex: '1 1 auto' }}>\r\n          <Dropdown\r\n            fluid\r\n            placeholder=\"Select an item\"\r\n            selection\r\n            search\r\n            clearable\r\n            options={itemOptions}\r\n            value={data.itemKey ? data.itemKey : ''}\r\n            onChange={(e, { value }) => {\r\n              ctx.dispatch({\r\n                type: 'UPDATE_PRODUCTION_ITEM',\r\n                data: { ...data, itemKey: (value as string) },\r\n              });\r\n            }}\r\n          />\r\n        </Grid.Column>\r\n        <Grid.Column style={{ flex: '0 0 290px' }}>\r\n          <Input\r\n            className='no-spinner'\r\n            type='number'\r\n            min='0'\r\n            step='1'\r\n            fluid\r\n            value={data.value}\r\n            onChange={(e, { value }) => {\r\n              ctx.dispatch({\r\n                type: 'UPDATE_PRODUCTION_ITEM',\r\n                data: { ...data, value: value },\r\n              });\r\n            }}\r\n            action\r\n          >\r\n            <input disabled={data.mode === 'maximize'} />\r\n            <Dropdown\r\n              style={{ width: '170px', minWidth: '0px' }}\r\n              selection\r\n              options={modeOptions}\r\n              value={data.mode}\r\n              onChange={(e, { value }) => {\r\n                ctx.dispatch({\r\n                  type: 'UPDATE_PRODUCTION_ITEM',\r\n                  data: { ...data, mode: (value as any) },\r\n                });\r\n              }}\r\n            />\r\n          </Input>\r\n        </Grid.Column>\r\n        <Grid.Column style={{ flex: '0 0 70px' }}>\r\n          <Button\r\n            icon\r\n            negative\r\n            onClick={() => { ctx.dispatch({ type: 'DELETE_PRODUCTION_ITEM', key: data.key }); }}\r\n          >\r\n            <Icon name='trash alternate outline' />\r\n          </Button>\r\n        </Grid.Column>\r\n      </Grid.Row>\r\n    ));\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <p>\r\n        Select the items you want to produce.\r\n      </p>\r\n      <Grid>\r\n        {renderItemInputs()}\r\n        <Grid.Row columns={1}>\r\n          <Grid.Column>\r\n            <Button\r\n              primary\r\n              onClick={() => { ctx.dispatch({ type: 'ADD_PRODUCTION_ITEM' })}}\r\n            >\r\n              Add Product\r\n            </Button>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProductionTab;\r\n","import React from 'react';\r\nimport { Button, Dropdown, Input, Checkbox, Grid, Icon, Header, Divider } from 'semantic-ui-react';\r\nimport { items, itemRecipeMap } from '../../../../data';\r\nimport { useProductionContext } from '../../../../contexts/production';\r\n\r\nconst itemOptions = Object.keys(itemRecipeMap)\r\n  .map((key) => ({\r\n    value: key,\r\n    text: items[key].name,\r\n  }))\r\n  .sort((a, b) => {\r\n    return a.text > b.text ? 1 : -1;\r\n  });\r\n\r\n\r\nconst InputsTab = () => {\r\n  const ctx = useProductionContext();\r\n\r\n  function renderItemInputs() {\r\n    return ctx.state.inputItems.map((data) => (\r\n      <Grid.Row key={data.key}>\r\n        <Grid.Column style={{ flex: '1 1 auto' }}>\r\n          <Dropdown\r\n            fluid\r\n            placeholder=\"Select an item\"\r\n            selection\r\n            search\r\n            clearable\r\n            options={itemOptions}\r\n            value={data.itemKey ? data.itemKey : ''}\r\n            onChange={(e, { value }) => {\r\n              ctx.dispatch({\r\n                type: 'UPDATE_INPUT_ITEM',\r\n                data: { ...data, itemKey: (value as string) },\r\n              });\r\n            }}\r\n          />\r\n        </Grid.Column>\r\n        <Grid.Column style={{ flex: '0 0 250px' }}>\r\n          <Input\r\n            className='no-spinner'\r\n            type='number'\r\n            min='0'\r\n            step='1'\r\n            fluid\r\n            value={data.value}\r\n            onChange={(e, { value }) => {\r\n              ctx.dispatch({\r\n                type: 'UPDATE_INPUT_ITEM',\r\n                data: { ...data, value: value },\r\n              });\r\n            }}\r\n            labelPosition='right'\r\n          >\r\n            <input disabled={data.unlimited} />\r\n            <Checkbox\r\n              className='label'\r\n              style={{ fontWeight: 'normal' }}\r\n              label='Unlimited'\r\n              checked={data.unlimited}\r\n              onChange={() => {\r\n                ctx.dispatch({\r\n                  type: 'UPDATE_INPUT_ITEM',\r\n                  data: { ...data, unlimited: !data.unlimited },\r\n                });\r\n              }}\r\n            />\r\n          </Input>\r\n        </Grid.Column>\r\n        <Grid.Column style={{ flex: '0 0 70px' }}>\r\n          <Button\r\n            icon\r\n            negative\r\n            onClick={() => { ctx.dispatch({ type: 'DELETE_INPUT_ITEM', key: data.key }); }}\r\n          >\r\n            <Icon name='trash alternate outline' />\r\n          </Button>\r\n        </Grid.Column>\r\n      </Grid.Row>\r\n    ));\r\n  }\r\n\r\n  function renderResourceInputs() {\r\n    return ctx.state.inputResources.map((data) => (\r\n      <Grid.Row key={data.key}>\r\n        <Grid.Column style={{ flex: '0 0 200px', display: 'flex', alignItems: 'center' }}>\r\n          {items[data.itemKey].name}\r\n        </Grid.Column>\r\n        <Grid.Column style={{ flex: '1 1 auto' }}>\r\n          <Input\r\n            className='no-spinner'\r\n            type='number'\r\n            min='0'\r\n            step='1'\r\n            fluid\r\n            value={data.value}\r\n            onChange={(e, { value }) => {\r\n              ctx.dispatch({\r\n                type: 'UPDATE_INPUT_RESOURCE',\r\n                data: { ...data, value: value },\r\n              });\r\n            }}\r\n            labelPosition='right'\r\n          >\r\n            <input disabled={data.unlimited} />\r\n            <Checkbox\r\n              className='label'\r\n              style={{ fontWeight: 'normal' }}\r\n              label='Unlimited'\r\n              checked={data.unlimited}\r\n              onChange={() => {\r\n                ctx.dispatch({\r\n                  type: 'UPDATE_INPUT_RESOURCE',\r\n                  data: { ...data, unlimited: !data.unlimited },\r\n                });\r\n              }}\r\n            />\r\n          </Input>\r\n        </Grid.Column>\r\n      </Grid.Row>\r\n    ));\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Header>Input Items</Header>\r\n      <p>\r\n        Select the items that you already have available and don't need to produce in this factory.\r\n      </p>\r\n      <Grid>\r\n        {renderItemInputs()}\r\n        <Grid.Row>\r\n          <Grid.Column>\r\n            <Button\r\n              primary\r\n              onClick={() => { ctx.dispatch({ type: 'ADD_INPUT_ITEM' }) }}\r\n            >\r\n              Add Input\r\n            </Button>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n      <Divider />\r\n      <Header>Raw Resources</Header>\r\n      <p>\r\n        Select the raw resources that are available to your factory. The default values are set to the map limits.\r\n      </p>\r\n      <Grid>\r\n        <Grid.Row columns={1}>\r\n          <Grid.Column>\r\n            <Button\r\n              primary\r\n              onClick={() => { ctx.dispatch({ type: 'SET_RESOURCES_TO_MAP_LIMITS' }) }}\r\n            >\r\n              Set to Maximum\r\n            </Button>\r\n            <Button\r\n              primary\r\n              onClick={() => { ctx.dispatch({ type: 'SET_RESOURCES_TO_0' }) }}\r\n            >\r\n              Set to 0\r\n            </Button>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n        {renderResourceInputs()}\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default InputsTab;\r\n","import React, { useState, useMemo, useCallback } from 'react';\r\nimport { Button, Input, Checkbox, Grid, Header, List } from 'semantic-ui-react';\r\nimport { recipes } from '../../../../data';\r\nimport { useProductionContext } from '../../../../contexts/production';\r\n\r\nconst cleanAltNameRegex = /^Alternate: /;\r\nconst baseRecipes: { key: string, label: string }[] = [];\r\nconst altRecipes: { key: string, label: string }[] = [];\r\nObject.entries(recipes)\r\n  .forEach(([key, data]) => {\r\n    if (data.isAlternate) {\r\n      altRecipes.push({\r\n        key,\r\n        label: data.name.replace(cleanAltNameRegex, ''),\r\n      });\r\n    } else {\r\n      baseRecipes.push({\r\n        key,\r\n        label: data.name,\r\n      });\r\n    }\r\n  });\r\nbaseRecipes.sort((a, b) => (a.label > b.label ? 1 : -1));\r\naltRecipes.sort((a, b) => (a.label > b.label ? 1 : -1));\r\n\r\nconst RecipesTab = () => {\r\n  const ctx = useProductionContext();\r\n  const [altRecipeSearch, setAltRecipeSearch] = useState('');\r\n  const [baseRecipeSearch, setBaseRecipeSearch] = useState('');\r\n\r\n  const renderRecipeList = useCallback((recipeList: { key: string, label: string }[]) => {\r\n    return recipeList.map(({ key, label }) => ({\r\n      label,\r\n      component: (\r\n        <List.Item key={key}>\r\n          <Checkbox\r\n            label={label}\r\n            checked={ctx.state.allowedRecipes[key]}\r\n            onChange={() => {\r\n              ctx.dispatch({\r\n                type: 'SET_RECIPE_ACTIVE',\r\n                key,\r\n                active: !ctx.state.allowedRecipes[key],\r\n              });\r\n            }}\r\n          />\r\n        </List.Item>\r\n      )\r\n    }));\r\n  }, [ctx]);\r\n\r\n  const renderedBaseRecipes = useMemo(() => renderRecipeList(baseRecipes), [renderRecipeList]);\r\n  const renderedAltRecipes = useMemo(() => renderRecipeList(altRecipes), [renderRecipeList]);\r\n\r\n  function renderRecipeOptions(alternates: boolean) {\r\n    const [searchValue, setSearchValue] = alternates\r\n      ? [altRecipeSearch, setAltRecipeSearch]\r\n      : [baseRecipeSearch, setBaseRecipeSearch];\r\n    const rendered = alternates ? renderedAltRecipes : renderedBaseRecipes\r\n    return (\r\n      <>\r\n        <Input\r\n          placeholder='Search...'\r\n          fluid\r\n          action\r\n          value={searchValue}\r\n          onChange={(e, { value }) => { setSearchValue(value); }}\r\n        >\r\n          <input />\r\n          <Button onClick={() => { ctx.dispatch({ type: 'MASS_SET_RECIPES_ACTIVE', alternates, active: true }) }}>\r\n            All\r\n          </Button>\r\n          <Button onClick={() => { ctx.dispatch({ type: 'MASS_SET_RECIPES_ACTIVE', alternates, active: false }) }}>\r\n            None\r\n          </Button>\r\n        </Input>\r\n        <List>\r\n          {rendered.filter(({ label }) => label.toLowerCase().includes(searchValue)).map(({ component }) => component)}\r\n        </List>\r\n      </>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <p>\r\n        Select the items that you already have available and don't need to produce in this factory.\r\n      </p>\r\n      <Grid columns={2} divided={true}>\r\n        <Grid.Row>\r\n          <Grid.Column>\r\n            <Header>Alternate Recipes</Header>\r\n            {renderRecipeOptions(true)}\r\n          </Grid.Column>\r\n          <Grid.Column>\r\n            <Header>Base Recipes</Header>\r\n            {renderRecipeOptions(false)}\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RecipesTab;\r\n","import React, { useState } from 'react';\r\nimport { Container, Menu } from 'semantic-ui-react';\r\nimport ProductionTab from './ProductionTab';\r\nimport InputsTab from './InputsTab';\r\nimport RecipesTab from './RecipesTab';\r\n\r\nconst PlannerOptions = () => {\r\n  const [activeTab, setActiveTab] = useState('production');\r\n\r\n  function handleSetTab(e: any, data: any) {\r\n    setActiveTab(data.name);\r\n  }\r\n\r\n  function renderTab() {\r\n    switch (activeTab) {\r\n      case 'production':\r\n        return <ProductionTab />\r\n      case 'inputs':\r\n        return <InputsTab />\r\n      case 'recipes':\r\n        return <RecipesTab />\r\n      default:\r\n        return null;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container fluid>\r\n      <Menu pointing secondary attached=\"top\" fluid widths={3}>\r\n        <Menu.Item\r\n          name='production'\r\n          active={activeTab === 'production'}\r\n          onClick={handleSetTab}\r\n        >\r\n          Production\r\n        </Menu.Item>\r\n        <Menu.Item\r\n          name='inputs'\r\n          active={activeTab === 'inputs'}\r\n          onClick={handleSetTab}\r\n        >\r\n          Inputs\r\n        </Menu.Item>\r\n        <Menu.Item\r\n          name='recipes'\r\n          active={activeTab === 'recipes'}\r\n          onClick={handleSetTab}\r\n        >\r\n          Recipes\r\n        </Menu.Item>\r\n      </Menu>\r\n      <div style={{ padding: '20px 0px' }}>\r\n        {renderTab()}\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default PlannerOptions;\r\n","// **************************************************************************** //\r\n// Thanks to https://gist.github.com/ZachHaber/feb0432fe395a303a4f10671877e5e70 //\r\n// **************************************************************************** //\r\n\r\nimport React, {\r\n  forwardRef,\r\n  HTMLAttributes,\r\n  useEffect,\r\n  useImperativeHandle,\r\n  useRef,\r\n  useState,\r\n} from 'react';\r\nimport { DataSet } from 'vis-data';\r\nimport {\r\n  Network,\r\n  Edge,\r\n  Node,\r\n  Options,\r\n  NetworkEvents,\r\n  IdType,\r\n} from 'vis-network';\r\nimport {\r\n  differenceWith,\r\n  intersectionWith,\r\n  isEqual,\r\n  defaultsDeep,\r\n  cloneDeep,\r\n} from 'lodash';\r\n\r\nexport type { Network, Edge, Node, Options, NetworkEvents, IdType };\r\n\r\nexport type GraphEvents = Partial<\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  Record<NetworkEvents, (params?: any) => void>\r\n>;\r\n\r\nexport interface GraphData {\r\n  nodes: Node[];\r\n  edges: Edge[];\r\n}\r\n\r\nexport interface NetworkGraphProps {\r\n  graph: GraphData;\r\n  options?: Options;\r\n  events?: GraphEvents;\r\n  style?: React.CSSProperties;\r\n  className?: string;\r\n}\r\n/**\r\n * Keeps the value the same permanently.\r\n * Useful over refs especially in instances where the function creation variant is used\r\n */\r\nfunction useSealedState<T>(value: T | (() => T)) {\r\n  const [state] = useState(value);\r\n  return state;\r\n}\r\n\r\n/**\r\n * https://github.com/crubier/react-graph-vis/commit/68bf2e27b2046d6c0bb8b334c2cf974d23443264\r\n */\r\nconst diff = <T extends { id?: IdType }>(\r\n  current: T[],\r\n  next: T[],\r\n  field: keyof T = 'id',\r\n) => {\r\n  const nextIds = new Set(next.map((item) => item[field]));\r\n  const removed = current.filter((item) => !nextIds.has(item[field]));\r\n\r\n  const unchanged = intersectionWith(next, current, isEqual);\r\n\r\n  const updated = differenceWith(\r\n    intersectionWith(next, current, (a, b) => a[field] === b[field]),\r\n    unchanged,\r\n    isEqual,\r\n  );\r\n\r\n  const added = differenceWith(\r\n    differenceWith(next, current, isEqual),\r\n    updated,\r\n    isEqual,\r\n  );\r\n\r\n  return {\r\n    removed,\r\n    unchanged,\r\n    updated,\r\n    added,\r\n  };\r\n};\r\n\r\nconst defaultOptions = {\r\n  physics: {\r\n    stabilization: false,\r\n  },\r\n  autoResize: false,\r\n  edges: {\r\n    smooth: false,\r\n    color: '#000000',\r\n    width: 0.5,\r\n    arrows: {\r\n      to: {\r\n        enabled: true,\r\n        scaleFactor: 0.5,\r\n      },\r\n    },\r\n  },\r\n};\r\n/**\r\n * Conversion of https://github.com/crubier/react-graph-vis/blob/master/src/index.js to a function component\r\n */\r\nconst GraphVis = forwardRef<\r\n  Network | undefined,\r\n  NetworkGraphProps & HTMLAttributes<HTMLDivElement>\r\n>(({ graph, events, options: propOptions, ...props }, ref) => {\r\n  const container = useRef<HTMLDivElement>(null);\r\n  const edges = useSealedState(() => new DataSet<Edge>(graph.edges));\r\n  const nodes = useSealedState(() => new DataSet<Node>(graph.nodes));\r\n  const initialOptions = useSealedState(propOptions);\r\n\r\n  const prevNodes = useRef(graph.nodes);\r\n  const prevEdges = useRef(graph.edges);\r\n  useEffect(() => {\r\n    if (isEqual(graph.nodes, prevNodes.current)) {\r\n      return; // No change!\r\n    }\r\n    const { added, removed, updated } = diff(prevNodes.current, graph.nodes);\r\n\r\n    nodes.remove(removed);\r\n    nodes.add(added);\r\n    nodes.update(updated);\r\n    prevNodes.current = graph.nodes;\r\n  }, [graph.nodes, nodes]);\r\n\r\n  useEffect(() => {\r\n    if (isEqual(graph.edges, prevEdges.current)) {\r\n      return; // No change!\r\n    }\r\n    const { added, removed, updated } = diff(prevEdges.current, graph.edges);\r\n\r\n    edges.remove(removed);\r\n    edges.add(added);\r\n    edges.update(updated);\r\n    prevEdges.current = graph.edges;\r\n  }, [graph.edges, edges]);\r\n  const [network, setNetwork] = useState<Network>();\r\n\r\n  useImperativeHandle(ref, () => network, [network]);\r\n\r\n  useEffect(() => {\r\n    if (!network || !events) {\r\n      return () => { };\r\n    }\r\n    // Add user provied events to network\r\n    for (const [eventName, callback] of Object.entries(events)) {\r\n      if (callback) {\r\n        network.on(eventName as NetworkEvents, callback);\r\n      }\r\n    }\r\n    return () => {\r\n      for (const [eventName, callback] of Object.entries(events)) {\r\n        if (callback) {\r\n          network.off(eventName as NetworkEvents, callback);\r\n        }\r\n      }\r\n    };\r\n  }, [events, network]);\r\n\r\n  useEffect(() => {\r\n    if (!network || !propOptions) {\r\n      return;\r\n    }\r\n    try {\r\n      network.setOptions(propOptions);\r\n    } catch (error) {\r\n      // Throws when it hot reloads... Yay\r\n      if (process.env.NODE_ENV !== 'development') {\r\n        // Still throw it in prod where there's no hot reload\r\n        throw error;\r\n      }\r\n    }\r\n  }, [network, propOptions]);\r\n\r\n  useEffect(() => {\r\n    // Creating the network has to be done in a useEffect because it needs access to a ref\r\n\r\n    // merge user provied options with our default ones\r\n    // defaultsDeep mutates the host object\r\n    const mergedOptions = defaultsDeep(\r\n      cloneDeep(initialOptions),\r\n      defaultOptions,\r\n    );\r\n    const newNetwork = new Network(\r\n      container.current as HTMLElement,\r\n      { edges, nodes },\r\n      mergedOptions,\r\n    );\r\n    setNetwork(newNetwork);\r\n    return () => {\r\n      // Cleanup the network on component unmount\r\n      newNetwork.destroy();\r\n    };\r\n  }, [edges, initialOptions, nodes]);\r\n\r\n  return <div ref={container} {...props} />;\r\n});\r\n\r\nexport default GraphVis;\r\n","import { FactoryOptions } from '../../contexts/production';\r\nimport { itemRecipeMap, recipes, resources, uncraftableItems, ItemRate } from '../../data';\r\nimport { RecipeMap } from '../../contexts/production';\r\n\r\nconst MAX_ITERATIONS = 100;\r\n\r\ntype InputMap = {\r\n  [key: string]: {\r\n    amount: number,\r\n    value: number,\r\n    type: string,\r\n  }\r\n};\r\ntype OutputTargets = { productionRate: number | null, buildings: number | null };\r\ntype OutputMap = { [key: string]: OutputTargets };\r\n\r\nexport const NODE_TYPE = {\r\n  ROOT: 'ROOT',\r\n  FINAL_PRODUCT: 'FINAL_PRODUCT',\r\n  SIDE_PRODUCT: 'SIDE_PRODUCT',\r\n  INPUT: 'INPUT',\r\n  RESOURCE: 'RESOURCE',\r\n  RECIPE: 'RECIPE',\r\n  ITEM: 'ITEM',\r\n};\r\n\r\nexport type SolverResults = {\r\n  productionGraph: ProductionGraph,\r\n  recipeGraph: RecipeGraph,\r\n};\r\n\r\nexport type ProductionGraph = {\r\n  nodes: ProductionGraphNode[],\r\n  edges: ProductionGraphEdge[],\r\n  recipeSelection: { [key: string]: string },\r\n  usedItems: { [key: string]: boolean },\r\n  score: number,\r\n};\r\n\r\nexport type ProductionGraphNode = {\r\n  id: number,\r\n  key: string,\r\n  type: string,\r\n  multiplier: number,\r\n  depth: number,\r\n};\r\n\r\nexport type ProductionGraphEdge = {\r\n  from: number,\r\n  to: number,\r\n  key: string,\r\n  productionRate: number,\r\n};\r\n\r\nexport type RecipeGraph = {\r\n  nodes: { [key: string]: RecipeGraphNode },\r\n  edges: RecipeGraphEdge[],\r\n  maxDepth: number,\r\n  complexity: number;\r\n}\r\n\r\nexport type RecipeGraphNode = {\r\n  key: string,\r\n  type: string,\r\n  itemScore: number | null,\r\n  recipeScore: { [key: string]: number },\r\n  depth: number,\r\n  edges: { from: RecipeGraphEdge[], to: RecipeGraphEdge[] },\r\n};\r\n\r\nexport type RecipeGraphEdge = {\r\n  from: RecipeGraphNode,\r\n  to: RecipeGraphNode,\r\n};\r\n\r\nexport class ProductionSolver {\r\n  private inputs: InputMap;\r\n  private outputs: OutputMap;\r\n  private allowedRecipes: RecipeMap;\r\n  private itemRecipeTable: { [key: string]: string[] } = {};\r\n  private currentId: number = 0;\r\n\r\n  public constructor(options: FactoryOptions) {\r\n    // TODO\r\n    // check NaN\r\n    // check output not zero\r\n    // sum multiple in/out of same item\r\n\r\n    this.inputs = {};\r\n\r\n    options.inputItems.forEach((item) => {\r\n      if (!item.itemKey) return;\r\n      const amount = item.unlimited ? Infinity : Number(item.value);\r\n      if (!amount) return;\r\n      this.inputs[item.itemKey] = {\r\n        amount,\r\n        value: 0,\r\n        type: NODE_TYPE.INPUT,\r\n      }\r\n    });\r\n\r\n    let maxResourceAmount = 0;\r\n    options.inputResources.forEach((item) => {\r\n      const amount = item.unlimited ? Infinity : Number(item.value);\r\n      if (amount && !item.unlimited) {\r\n        if (amount > maxResourceAmount) {\r\n          maxResourceAmount = amount;\r\n        }\r\n      }\r\n    });\r\n    options.inputResources.forEach((item) => {\r\n      const resourceData = resources[item.itemKey];\r\n      if (!resourceData) return;\r\n      const amount = item.unlimited ? Infinity : Number(item.value);\r\n      if (!amount) return;\r\n      this.inputs[item.itemKey] = {\r\n        amount,\r\n        value: resourceData.relativeValue,\r\n        type: NODE_TYPE.RESOURCE,\r\n      }\r\n    });\r\n\r\n    Object.keys(uncraftableItems).forEach((item) => {\r\n      this.inputs[item] = {\r\n        amount: Infinity,\r\n        value: 0,\r\n        type: NODE_TYPE.RESOURCE,\r\n      };\r\n    });\r\n\r\n    this.outputs = {};\r\n    options.productionItems.forEach((item) => {\r\n      if (!item.itemKey) return;\r\n      const targets: OutputTargets = {\r\n        productionRate: null,\r\n        buildings: null,\r\n      };\r\n      switch (item.mode) {\r\n        case 'building-target':\r\n          targets.buildings = Number(item.value);\r\n          break;\r\n        case 'rate-target':\r\n          targets.productionRate = Number(item.value);\r\n          break;\r\n        case 'maximize':\r\n          targets.productionRate = Infinity;\r\n          break;\r\n        default:\r\n          throw new Error(`ITEM ${item.itemKey} HAS AN INVALID TARGET TYPE`);\r\n      }\r\n      this.outputs[item.itemKey] = targets;\r\n    });\r\n\r\n    this.allowedRecipes = options.allowedRecipes;\r\n  }\r\n\r\n  public exec(): SolverResults {\r\n    console.log('============================');\r\n    console.log('SOLVER START');\r\n    const t0 = performance.now();\r\n    const recipeGraph = this.generateRecipeGraph();\r\n    const productionGraph = this.generateProductionGraph();\r\n    const t = performance.now();\r\n    console.log(`SOLVER DONE IN ${t - t0}ms`);\r\n    console.log(`SCORE: ${productionGraph.score}`);\r\n    return {\r\n      productionGraph,\r\n      recipeGraph,\r\n    };\r\n  }\r\n\r\n  private nextId() {\r\n    return this.currentId++;\r\n  }\r\n\r\n  private generateRecipeGraph(): RecipeGraph {\r\n    const graph: RecipeGraph = {\r\n      nodes: {},\r\n      edges: [],\r\n      maxDepth: 0,\r\n      complexity: 1,\r\n    };\r\n\r\n    const initialNode: RecipeGraphNode = {\r\n      key: NODE_TYPE.ROOT,\r\n      type: NODE_TYPE.ROOT,\r\n      itemScore: null,\r\n      recipeScore: {},\r\n      depth: -1,\r\n      edges: { from: [], to: [] },\r\n    }\r\n\r\n    this.buildRecipeTree(initialNode, graph, 0);\r\n    this.scoreRecipes(graph);\r\n\r\n    return graph;\r\n  }\r\n\r\n  private buildRecipeTree(parentNode: RecipeGraphNode, graph: RecipeGraph, depth: number) {\r\n    if (depth > 20) {\r\n      throw new Error('INFINITE LOOP DETECTED');\r\n    }\r\n    if (graph.maxDepth < depth) {\r\n      graph.maxDepth = depth;\r\n    }\r\n\r\n    let ingredients: string[];\r\n    if (parentNode.type === NODE_TYPE.ROOT) {\r\n      ingredients = Object.keys(this.outputs);\r\n    } else {\r\n      const parentRecipeInfo = recipes[parentNode.key];\r\n      ingredients = parentRecipeInfo.ingredients.map((ingredient) => ingredient.itemClass);\r\n    }\r\n    \r\n    for (const item of ingredients) {\r\n      if (this.inputs[item]) {\r\n        const type = this.inputs[item].type;\r\n        let itemNode = graph.nodes[item];\r\n        if (!itemNode) {\r\n          itemNode = {\r\n            key: item,\r\n            type,\r\n            itemScore: null,\r\n            recipeScore: {},\r\n            depth,\r\n            edges: { from: [], to: [] },\r\n          };\r\n          graph.nodes[item] = itemNode;\r\n        }\r\n        const edge = {\r\n          from: itemNode,\r\n          to: parentNode,\r\n        };\r\n        graph.edges.push(edge);\r\n        itemNode.edges.from.push(edge);\r\n        parentNode.edges.to.push(edge);\r\n        continue;\r\n      }\r\n\r\n      let itemNode = graph.nodes[item];\r\n      let nodeExists = !!itemNode;\r\n      if (!itemNode) {\r\n        itemNode = {\r\n          key: item,\r\n          type: NODE_TYPE.ITEM,\r\n          itemScore: null,\r\n          recipeScore: {},\r\n          depth,\r\n          edges: { from: [], to: [] },\r\n        };\r\n        graph.nodes[item] = itemNode;\r\n      }\r\n      if (parentNode.type !== NODE_TYPE.ROOT) {\r\n        const edge = {\r\n          from: itemNode,\r\n          to: parentNode,\r\n        };\r\n        graph.edges.push(edge);\r\n        itemNode.edges.from.push(edge);\r\n        parentNode.edges.to.push(edge);\r\n      }\r\n\r\n      if (nodeExists) {\r\n        continue;\r\n      }\r\n\r\n      const itemRecipes = itemRecipeMap[item]\r\n        .filter((r) => this.allowedRecipes[r])\r\n        .filter((r) => !recipes[r].ingredients.find((i) => i.itemClass === item));\r\n\r\n      if (itemRecipes.length === 0) {\r\n        throw new Error(`ITEM ${item} HAS NO VALID RECIPES`);\r\n      }\r\n      for (const recipe of itemRecipes) {\r\n        let recipeNode = graph.nodes[recipe];\r\n        if (!recipeNode) {\r\n          recipeNode = {\r\n            key: recipe,\r\n            type: NODE_TYPE.RECIPE,\r\n            itemScore: null,\r\n            recipeScore: {},\r\n            depth,\r\n            edges: { from: [], to: [] },\r\n          };\r\n          graph.nodes[recipe] = recipeNode;\r\n          this.buildRecipeTree(recipeNode, graph, depth + 1);\r\n        }\r\n        const edge = {\r\n          from: recipeNode,\r\n          to: itemNode,\r\n        };\r\n        graph.edges.push(edge);\r\n        recipeNode.edges.from.push(edge);\r\n        itemNode.edges.to.push(edge);\r\n      }\r\n    }\r\n  }\r\n\r\n  private scoreRecipes(graph: RecipeGraph) {\r\n    this.itemRecipeTable = {};\r\n    let iterations = 0;\r\n    let noUpdates = false;\r\n\r\n    const inputNodes = Object.entries(graph.nodes).filter(([key, node]) => node.type === NODE_TYPE.RESOURCE || node.type === NODE_TYPE.INPUT);\r\n    const itemNodes = Object.entries(graph.nodes).filter(([key, node]) => node.type === NODE_TYPE.ITEM);\r\n\r\n    for (const [key, node] of inputNodes) {\r\n      node.itemScore = this.inputs[key].value;\r\n    }\r\n\r\n    while (!noUpdates && iterations < 20) {\r\n      iterations++;\r\n\r\n      nextItem:\r\n      for (const [itemKey, itemNode] of itemNodes) {\r\n        if (itemNode.itemScore != null) {\r\n          continue;\r\n        }\r\n\r\n        const recipeList = [];\r\n\r\n        let minRecipeScore = Infinity;\r\n        for (const recipeEdge of itemNode.edges.to) {\r\n          const recipeNode = recipeEdge.from;\r\n          const recipeInfo = recipes[recipeNode.key];\r\n          const targetProduct = recipeInfo.products.find((p) => p.itemClass === itemKey)!;\r\n          let recipeScore = 0;\r\n\r\n          for (const ingredientEdge of recipeNode.edges.to) {\r\n            const ingredientNode = ingredientEdge.from;\r\n            if (ingredientNode.itemScore == null) {\r\n              continue nextItem;\r\n            }\r\n            const ingredient = recipeInfo.ingredients.find((i) => i.itemClass === ingredientNode.key)!;\r\n            recipeScore += ingredientNode.itemScore * (ingredient.perMinute / targetProduct.perMinute);\r\n          }\r\n\r\n          recipeNode.recipeScore[itemKey] = recipeScore;\r\n          recipeList.push(recipeNode.key);\r\n\r\n          if (recipeScore < minRecipeScore) {\r\n            minRecipeScore = recipeScore;\r\n          }\r\n        }\r\n\r\n        recipeList.sort((a, b) => {\r\n          const scoreA = graph.nodes[a].recipeScore[itemKey];\r\n          const scoreB = graph.nodes[b].recipeScore[itemKey];\r\n          if (scoreA < scoreB) return -1;\r\n          if (scoreA > scoreB) return 1;\r\n          return 0;\r\n        });\r\n        this.itemRecipeTable[itemKey] = recipeList;\r\n\r\n        graph.complexity *= recipeList.length;\r\n\r\n        itemNode.itemScore = minRecipeScore;\r\n        noUpdates = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  private generateProductionGraph(): ProductionGraph {\r\n    const adjustableItems = Object.keys(this.itemRecipeTable).filter((key) => this.itemRecipeTable[key].length > 1);\r\n    const initialRecipeSelection: { [key: string]: string } = {};\r\n    Object.entries(this.itemRecipeTable).forEach(([item, recipeList]) => initialRecipeSelection[item] = recipeList[0]);\r\n\r\n    let currentGraph = this.buildProductionGraphFromRecipeSelection(initialRecipeSelection);\r\n    let iterations = 0;\r\n\r\n    nextPass:\r\n    while (iterations < MAX_ITERATIONS) {\r\n      // eslint-disable-next-line no-loop-func\r\n      const itemList = [...adjustableItems].filter((key) => currentGraph.usedItems[key]);\r\n\r\n      while (itemList.length > 0) {\r\n        const testItemIdx = Math.floor(Math.random() * itemList.length);\r\n        const testItem = itemList.splice(testItemIdx, 1)[0];\r\n        // eslint-disable-next-line no-loop-func\r\n        const testRecipeList = this.itemRecipeTable[testItem].filter((key) => key !== currentGraph.recipeSelection[testItem]);\r\n        const testRecipeSelection = { ...currentGraph.recipeSelection };\r\n\r\n        while (testRecipeList.length > 0 && iterations < MAX_ITERATIONS) {\r\n          const testRecipeIdx = Math.floor(Math.random() * testRecipeList.length);\r\n          testRecipeSelection[testItem] = testRecipeList.splice(testRecipeIdx, 1)[0];\r\n\r\n          let testGraph = this.buildProductionGraphFromRecipeSelection(testRecipeSelection);\r\n          iterations++;\r\n          if (testGraph.score < currentGraph.score) {\r\n            currentGraph = testGraph;\r\n            continue nextPass;\r\n          }\r\n        }\r\n      }\r\n\r\n      break;\r\n    }\r\n    return currentGraph;\r\n  }\r\n\r\n  private buildProductionGraphFromRecipeSelection(recipeSelection: { [key: string]: string }): ProductionGraph {\r\n    const graph: ProductionGraph = {\r\n      nodes: [],\r\n      edges: [],\r\n      recipeSelection,\r\n      usedItems: {},\r\n      score: 0,\r\n    };\r\n\r\n    const initialNode: ProductionGraphNode = {\r\n      id: this.nextId(),\r\n      key: NODE_TYPE.ROOT,\r\n      type: NODE_TYPE.ROOT,\r\n      multiplier: 1,\r\n      depth: -1,\r\n    }\r\n    this.buildItemTree(initialNode, graph, 0);\r\n\r\n    const collapsedGraph: ProductionGraph = {\r\n      nodes: [],\r\n      edges: [],\r\n      recipeSelection,\r\n      usedItems: graph.usedItems,\r\n      score: 0,\r\n    };\r\n    \r\n    const newEdges = graph.edges.map((e) => ({ ...e }));\r\n    for (const node of graph.nodes) {\r\n      let collapsedNode = collapsedGraph.nodes.find((n) => n.type === node.type && n.key === node.key);\r\n      if (!collapsedNode) {\r\n        collapsedNode = { ...node };\r\n        collapsedGraph.nodes.push(collapsedNode);\r\n      } else {\r\n        if (node.type === NODE_TYPE.RECIPE) {\r\n          collapsedNode.multiplier += node.multiplier;\r\n        }\r\n      }\r\n      for (const edge of newEdges) {\r\n        if (edge.to === node.id) {\r\n          edge.to = collapsedNode.id;\r\n        }\r\n        if (edge.from === node.id) {\r\n          edge.from = collapsedNode.id;\r\n        }\r\n      }\r\n    }\r\n\r\n    for (const edge of newEdges) {\r\n      let collapsedEdge = collapsedGraph.edges.find((e) => e.key === edge.key && e.to === edge.to && e.from === edge.from);\r\n      if (!collapsedEdge) {\r\n        collapsedEdge = { ...edge };\r\n        collapsedGraph.edges.push(collapsedEdge);\r\n      } else {\r\n        collapsedEdge.productionRate += edge.productionRate;\r\n      }\r\n    }\r\n\r\n    collapsedGraph.nodes.forEach((node) => {\r\n      if (node.type === NODE_TYPE.RESOURCE) {\r\n        let perMinute = 0;\r\n        collapsedGraph.edges.forEach((edge) => {\r\n          if (edge.from === node.id) {\r\n            perMinute += edge.productionRate;\r\n          }\r\n        });\r\n        collapsedGraph.score += this.inputs[node.key].value * perMinute;\r\n      }\r\n    });\r\n\r\n    return collapsedGraph;\r\n  }\r\n\r\n  private buildItemTree(parentNode: ProductionGraphNode, graph: ProductionGraph, depth: number) {\r\n    if (depth > 20) {\r\n      throw new Error('INFINITE LOOP DETECTED');\r\n    }\r\n\r\n    let ingredients: ItemRate[];\r\n    if (parentNode.type === NODE_TYPE.ROOT) {\r\n      ingredients = Object.entries(this.outputs).map(([itemClass, outputTargets]) => {\r\n        let perMinute;\r\n        if (outputTargets.buildings != null) {\r\n          perMinute = -1;\r\n        } else if (outputTargets.productionRate === Infinity) {\r\n          perMinute = 1;\r\n        } else {\r\n          perMinute = outputTargets.productionRate as number;\r\n        }\r\n        return {\r\n          itemClass,\r\n          perMinute,\r\n        };\r\n      });\r\n    } else {\r\n      const parentRecipeInfo = recipes[parentNode.key];\r\n      ingredients = parentRecipeInfo.ingredients.map((ingredient) => ({\r\n        itemClass: ingredient.itemClass,\r\n        perMinute: ingredient.perMinute * parentNode.multiplier,\r\n      }));\r\n    }\r\n\r\n    for (const ingredient of ingredients) {\r\n      const item = ingredient.itemClass;\r\n      let targetRate = ingredient.perMinute;\r\n      graph.usedItems[item] = true;\r\n\r\n      if (this.inputs[item]) {\r\n        const node: ProductionGraphNode = {\r\n          id: this.nextId(),\r\n          key: item,\r\n          type: this.inputs[item].type,\r\n          multiplier: 1,\r\n          depth,\r\n        };\r\n        graph.nodes.push(node);\r\n        graph.edges.push({\r\n          from: node.id,\r\n          to: parentNode.id,\r\n          key: item,\r\n          productionRate: targetRate,\r\n        });\r\n        continue;\r\n      }\r\n      \r\n      const selectedRecipe = graph.recipeSelection[item];\r\n      const recipeInfo = recipes[selectedRecipe];\r\n\r\n      const primaryProduct = recipeInfo.products.find((p) => p.itemClass === item)!;\r\n      const sideProducts = recipeInfo.products.filter((p) => p.itemClass !== item);\r\n\r\n      let multiplier: number;\r\n      if (targetRate === -1) {\r\n        multiplier = this.outputs[item].buildings as number;\r\n        targetRate = primaryProduct.perMinute * multiplier;\r\n      } else {\r\n        multiplier = targetRate / primaryProduct.perMinute;\r\n      }\r\n\r\n      const node: ProductionGraphNode = {\r\n        id: this.nextId(),\r\n        key: selectedRecipe,\r\n        multiplier,\r\n        type: NODE_TYPE.RECIPE,\r\n        depth,\r\n      };\r\n\r\n      if (parentNode.type === NODE_TYPE.ROOT) {\r\n        const productNode: ProductionGraphNode = {\r\n          id: this.nextId(),\r\n          key: item,\r\n          multiplier: 1,\r\n          type: NODE_TYPE.FINAL_PRODUCT,\r\n          depth,\r\n        };\r\n\r\n        graph.nodes.push(node);\r\n        graph.nodes.push(productNode);\r\n        graph.edges.push({\r\n          from: node.id,\r\n          to: productNode.id,\r\n          key: item,\r\n          productionRate: targetRate,\r\n        });\r\n      } else {\r\n        graph.nodes.push(node);\r\n        graph.edges.push({\r\n          from: node.id,\r\n          to: parentNode.id,\r\n          key: item,\r\n          productionRate: targetRate,\r\n        });\r\n      }\r\n\r\n      sideProducts.forEach((sideProduct) => {\r\n        const productNode: ProductionGraphNode = {\r\n          id: this.nextId(),\r\n          key: sideProduct.itemClass,\r\n          multiplier: 1,\r\n          type: NODE_TYPE.SIDE_PRODUCT,\r\n          depth,\r\n        };\r\n        graph.nodes.push(productNode);\r\n        graph.edges.push({\r\n          from: node.id,\r\n          to: productNode.id,\r\n          key: sideProduct.itemClass,\r\n          productionRate: sideProduct.perMinute * multiplier,\r\n        });\r\n      });\r\n\r\n      this.buildItemTree(node, graph, depth + 1);\r\n    }\r\n  }\r\n}\r\n","import React, { useMemo } from 'react';\r\nimport GraphVis from '../../../../components/GraphVis';\r\nimport { ProductionGraph, ProductionGraphNode, ProductionGraphEdge, NODE_TYPE } from '../../../../utilities/production-solver';\r\nimport { items, recipes, buildings } from '../../../../data';\r\n\r\ninterface Props {\r\n  activeGraph: ProductionGraph | null,\r\n  errorMessage: string,\r\n}\r\n\r\nconst graphOptions = {\r\n  autoResize: true,\r\n  layout: {\r\n    hierarchical: {\r\n      enabled: true,\r\n      direction: 'LR',\r\n      sortMethod: 'directed',\r\n      shakeTowards: 'leaves',\r\n      levelSeparation: 280,\r\n      nodeSpacing: 100,\r\n      treeSpacing: 100,\r\n    },\r\n  },\r\n  physics: {\r\n    enabled: false,\r\n  },\r\n  interaction: {\r\n    selectConnectedEdges: false,\r\n    zoomSpeed: 0.8,\r\n  },\r\n  nodes: {\r\n    borderWidth: 1,\r\n    chosen: false,\r\n  },\r\n  edges: {\r\n    arrows: {\r\n      to: {\r\n        enabled: true,\r\n        scaleFactor: 0.8,\r\n      }\r\n    },\r\n    chosen: false,\r\n  }\r\n}\r\n\r\nfunction truncateFloat(n: number) {\r\n  return n.toFixed(4).replace(/\\.?0+$/, '');\r\n}\r\n\r\nfunction getNodeLabel(node: ProductionGraphNode, edges: ProductionGraphEdge[]) {\r\n  let label = '';\r\n  let amountText = '';\r\n  if (node.type === NODE_TYPE.RECIPE) {\r\n    const recipe = recipes[node.key];\r\n    label = `${recipe.name}`;\r\n    amountText = `${truncateFloat(node.multiplier)}x ${buildings[recipe.producedIn].name}`;\r\n  } else if (node.type === NODE_TYPE.FINAL_PRODUCT || node.type === NODE_TYPE.SIDE_PRODUCT) {\r\n    let val = 0;\r\n    edges.forEach((edge) => {\r\n      if (edge.to === node.id) {\r\n        val += edge.productionRate;\r\n      }\r\n    });\r\n    const item = items[node.key];\r\n    label = `${item.name}`;\r\n    amountText = `${truncateFloat(val)} / min`;\r\n  } else if (node.type === NODE_TYPE.INPUT || node.type === NODE_TYPE.RESOURCE) {\r\n    let val = 0;\r\n    edges.forEach((edge) => {\r\n      if (edge.from === node.id) {\r\n        val += edge.productionRate;\r\n      }\r\n    });\r\n    const item = items[node.key];\r\n    label = `${item.name}`;\r\n    amountText = `${truncateFloat(val)} / min`;\r\n  } else if (node.type === NODE_TYPE.ROOT) {\r\n    label = 'ROOT';\r\n  }\r\n  return `${label}\\n${amountText}`;\r\n}\r\n\r\nfunction getEdgeLabel(edge: ProductionGraphEdge) {\r\n  const item = items[edge.key];\r\n  const label = `${item.name}`;\r\n  const amountText = `${truncateFloat(edge.productionRate)} / min`;\r\n  return `${label}\\n${amountText}`;\r\n}\r\n\r\nconst ProductionGraphTab = (props: Props) => {\r\n  const { activeGraph, errorMessage } = props;\r\n\r\n  const graphData = useMemo<any>(() => {\r\n    if (activeGraph == null) {\r\n      return null;\r\n    }\r\n    const graphData: any = {};\r\n    graphData.nodes = activeGraph.nodes.map((node) => ({\r\n      id: node.id,\r\n      label: getNodeLabel(node, activeGraph.edges),\r\n      shape: (node.type === NODE_TYPE.RECIPE) ? 'box' : 'ellipse',\r\n      heightConstraint: (node.type === NODE_TYPE.RECIPE) ?  50 : 30,\r\n      widthConstraint: (node.type === NODE_TYPE.RECIPE) ?  150: 120,\r\n    }));\r\n    graphData.edges = activeGraph.edges.map((edge) => ({\r\n      from: edge.from,\r\n      to: edge.to,\r\n      label: getEdgeLabel(edge),\r\n    }));\r\n    return graphData;\r\n  }, [activeGraph]);\r\n\r\n  return (\r\n    <div style={{ height: '800px', display: 'flex', flexDirection:'column', alignItems: 'center', justifyContent: 'center', border: '1px solid black' }}>\r\n      {\r\n        graphData != null\r\n        ? (\r\n          <GraphVis\r\n            graph={graphData}\r\n            options={graphOptions}\r\n            style={{ height: '100%', width: '100%' }}\r\n          />\r\n        )\r\n        : (\r\n          <>\r\n            <div>\r\n              No graph available\r\n            </div>\r\n            {errorMessage\r\n              ? (\r\n                <div>\r\n                  {`\\nERROR: ${errorMessage}`}\r\n                </div>\r\n              )\r\n              : null}\r\n          </>\r\n        )\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProductionGraphTab;\r\n","import React, { useMemo } from 'react';\r\nimport GraphVis from '../../../../components/GraphVis';\r\nimport { RecipeGraph, RecipeGraphNode, NODE_TYPE } from '../../../../utilities/production-solver';\r\nimport { items, recipes } from '../../../../data';\r\n\r\ninterface Props {\r\n  activeGraph: RecipeGraph | null,\r\n  errorMessage: string,\r\n}\r\n\r\nconst graphOptions = {\r\n  autoResize: true,\r\n  layout: {\r\n    hierarchical: {\r\n      enabled: true,\r\n      direction: 'LR',\r\n      sortMethod: 'directed',\r\n      shakeTowards: 'leaves',\r\n      blockShifting: true,\r\n      edgeMinimization: true,\r\n      parentCentralization: true,\r\n      levelSeparation: 280,\r\n      nodeSpacing: 100,\r\n      treeSpacing: 100,\r\n    },\r\n  },\r\n  physics: {\r\n    enabled: false,\r\n  },\r\n  interaction: {\r\n    selectConnectedEdges: false,\r\n    zoomSpeed: 0.8,\r\n  },\r\n  nodes: {\r\n    borderWidth: 1,\r\n    chosen: false,\r\n  },\r\n  edges: {\r\n    arrows: {\r\n      to: {\r\n        enabled: true,\r\n        scaleFactor: 0.8,\r\n      }\r\n    },\r\n    chosen: false,\r\n  }\r\n}\r\n\r\nfunction truncateFloat(n: number) {\r\n  return n.toFixed(4).replace(/\\.?0+$/, '');\r\n}\r\n\r\nfunction getNodeLabel(node: RecipeGraphNode) {\r\n  let label = '';\r\n  let score = '';\r\n  if (node.type === NODE_TYPE.RECIPE) {\r\n    const recipe = recipes[node.key];\r\n    score = '\\n' + Object.entries(node.recipeScore)\r\n      .map(([itemKey, itemScore]) => {\r\n        const item = items[itemKey];\r\n        return `${item.name}: ${truncateFloat(itemScore)}`;\r\n      })\r\n      .join('\\n');\r\n    label = recipe.name;\r\n  } else if (node.type === NODE_TYPE.INPUT || node.type === NODE_TYPE.RESOURCE || node.type === NODE_TYPE.ITEM) {\r\n    const item = items[node.key];\r\n    label = item.name;\r\n    score = `Score: ${node.itemScore == null ? 'null' : truncateFloat(node.itemScore)}`;\r\n  } else if (node.type === NODE_TYPE.ROOT) {\r\n    label = 'ROOT';\r\n  }\r\n  return `${label}\\n${score}`;\r\n}\r\n\r\nfunction getNodeLevel(node: RecipeGraphNode, graph: RecipeGraph) {\r\n  let level = 2 * (graph.maxDepth - node.depth);\r\n  if (node.type === NODE_TYPE.RESOURCE) {\r\n    level = 1;\r\n  } else if (node.type === NODE_TYPE.ITEM || node.type === NODE_TYPE.INPUT) {\r\n    level += 1;\r\n  }\r\n  return level;\r\n}\r\n\r\nconst RecipeGraphTab = (props: Props) => {\r\n  const { activeGraph, errorMessage } = props;\r\n\r\n  const graphData = useMemo<any>(() => {\r\n    if (activeGraph == null) {\r\n      return null;\r\n    }\r\n    const graphData: any = {};\r\n    graphData.nodes = Object.entries(activeGraph.nodes).map(([key, node]) => ({\r\n      id: key,\r\n      label: getNodeLabel(node),\r\n      level: getNodeLevel(node, activeGraph),\r\n      shape: (node.type === NODE_TYPE.RECIPE) ? 'box' : 'ellipse',\r\n      heightConstraint: (node.type === NODE_TYPE.RECIPE) ? 50 : 30,\r\n      widthConstraint: (node.type === NODE_TYPE.RECIPE) ? 150 : 120,\r\n    }));\r\n    graphData.edges = activeGraph.edges.map((edge) => ({\r\n      from: edge.from.key,\r\n      to: edge.to.key,\r\n    }));\r\n    return graphData;\r\n  }, [activeGraph]);\r\n\r\n  return (\r\n    <div style={{ height: '800px', display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center', border: '1px solid black' }}>\r\n      {\r\n        graphData != null\r\n          ? (\r\n            <GraphVis\r\n              graph={graphData}\r\n              options={graphOptions}\r\n              style={{ height: '100%', width: '100%' }}\r\n            />\r\n          )\r\n          : (\r\n            <>\r\n              <div>\r\n                No graph available\r\n              </div>\r\n              {errorMessage\r\n                ? (\r\n                  <div>\r\n                    {`\\nERROR: ${errorMessage}`}\r\n                  </div>\r\n                )\r\n                : null}\r\n            </>\r\n          )\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RecipeGraphTab;\r\n","import React from 'react';\r\nimport { Container } from 'semantic-ui-react';\r\n\r\nconst BuildingsTab = () => {\r\n  return (\r\n    <Container>\r\n      <p>does works!</p>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default BuildingsTab;\r\n","import React, { useCallback, useEffect, useState } from 'react';\r\nimport { Container, Menu, Button, Checkbox } from 'semantic-ui-react';\r\nimport ProductionGraphTab from './ProductionGraphTab';\r\nimport RecipeGraphTab from './RecipeGraphTab';\r\nimport BuildingsTab from './BuildingsTab';\r\nimport { ProductionSolver, SolverResults } from '../../../utilities/production-solver';\r\nimport { useProductionContext } from '../../../contexts/production';\r\nimport { usePrevious } from '../../../hooks/usePrevious';\r\n\r\nconst RECIPE_GRAPH_ACTIVE = process.env.NODE_ENV === 'development';\r\n\r\nconst PlannerResults = () => {\r\n  const [activeTab, setActiveTab] = useState('production-graph');\r\n  const [autoCalc, setAutoCalc] = useState(true);\r\n  const [loaded, setLoaded] = useState(false);\r\n  const [solverResults, setSolverResults] = useState<SolverResults | null>(null);\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n  const ctx = useProductionContext();\r\n  const prevState = usePrevious(ctx.state);\r\n\r\n  const handleCalculateFactory = useCallback(() => {\r\n    const solver = new ProductionSolver(ctx.state);\r\n    try {\r\n      const results = solver.exec();\r\n      setSolverResults(results);\r\n      setErrorMessage('');\r\n    } catch (e: any) {\r\n      setSolverResults(null);\r\n      setErrorMessage(e.message);\r\n    }\r\n  }, [ctx.state]);\r\n\r\n  function handleSetTab(e: any, data: any) {\r\n    setActiveTab(data.name);\r\n  }\r\n\r\n  function renderTab() {\r\n    switch (activeTab) {\r\n      case 'production-graph':\r\n        return <ProductionGraphTab activeGraph={solverResults?.productionGraph || null} errorMessage={errorMessage} />\r\n      case 'recipe-graph':\r\n        return (\r\n          RECIPE_GRAPH_ACTIVE\r\n            ? <RecipeGraphTab activeGraph={solverResults?.recipeGraph || null} errorMessage={errorMessage} />\r\n            : null\r\n        );\r\n      case 'buildings':\r\n        return <BuildingsTab />\r\n      default:\r\n        return null;\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!loaded) {\r\n      handleCalculateFactory();\r\n      setLoaded(true);\r\n    } else if (autoCalc && prevState !== ctx.state) {\r\n      handleCalculateFactory();\r\n    }\r\n  }, [autoCalc, ctx.state, handleCalculateFactory, loaded, prevState]);\r\n\r\n  return (\r\n    <Container fluid>\r\n      <Menu pointing secondary attached=\"top\">\r\n        <Menu.Item\r\n          name='production-graph'\r\n          active={activeTab === 'production-graph'}\r\n          onClick={handleSetTab}\r\n        >\r\n          Production Graph\r\n        </Menu.Item>\r\n        {RECIPE_GRAPH_ACTIVE && (\r\n          <Menu.Item\r\n            name='recipe-graph'\r\n            active={activeTab === 'recipe-graph'}\r\n            onClick={handleSetTab}\r\n          >\r\n            Recipe Graph\r\n          </Menu.Item>\r\n        )}\r\n        <Menu.Item\r\n          name='buildings'\r\n          active={activeTab === 'buildings'}\r\n          onClick={handleSetTab}\r\n        >\r\n          Buildings\r\n        </Menu.Item>\r\n      </Menu>\r\n      <div style={{ padding: '20px 0px' }}>\r\n        <Button primary onClick={handleCalculateFactory} disabled={autoCalc} style={{ marginBottom: '10px', marginRight: '15px' }}>\r\n          Calculate\r\n        </Button>\r\n        <Checkbox\r\n          label='Auto-calculate on update (uncheck this if changing options is slow)'\r\n          checked={autoCalc}\r\n          onChange={(e, { checked }) => { setAutoCalc(!!checked); }}\r\n        />\r\n        {renderTab()}\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default PlannerResults;\r\n","import React from 'react';\r\nimport { Container, Header, Segment, Grid } from 'semantic-ui-react';\r\nimport PlannerOptions from './PlannerOptions';\r\nimport PlannerResults from './PlannerResults';\r\nimport { ProductionProvider } from '../../contexts/production';\r\nimport { useProductionContext } from '../../contexts/production';\r\n\r\nconst ProductionPlanner = () => {\r\n  return (\r\n    <>\r\n      <Header as='h1'>Production Planner</Header>\r\n      <p>\r\n        This is some descriptive text that will have some usage information or whatever.\r\n      </p>\r\n      <Container fluid>\r\n        <ProductionProvider>\r\n          <Factory />\r\n        </ProductionProvider>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProductionPlanner;\r\n\r\nconst Factory = () => {\r\n  const ctx = useProductionContext();\r\n  return (\r\n    <>\r\n      <Segment attached='top'>\r\n        <Header size='medium'>{ctx.state.name}</Header>\r\n      </Segment>\r\n      <Grid columns={2}>\r\n        <Grid.Column width={5}>\r\n          <PlannerOptions />\r\n        </Grid.Column>\r\n        <Grid.Column width={11}>\r\n          <PlannerResults />\r\n        </Grid.Column>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Container, Menu } from 'semantic-ui-react';\r\nimport ProductionPlanner from '../ProductionPlanner';\r\n\r\nconst Main = () => {\r\n  return (\r\n    <Container fluid>\r\n      <Menu fixed='top' size=\"massive\">\r\n        <Container fluid>\r\n          <Menu.Item as='a' header >\r\n            Yet Another Factory Planner\r\n          </Menu.Item>\r\n        </Container>\r\n      </Menu>\r\n      <Container fluid style={{ padding: '0px 50px', paddingTop: '70px' }}>\r\n        <ProductionPlanner />\r\n      </Container>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import React from 'react';\nimport Main from './containers/Main';\n\nfunction App() {\n  return (\n    <Main />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-less/semantic.less';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './utilities/debug/reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// reportWebVitals(console.log);\n"],"sourceRoot":""}