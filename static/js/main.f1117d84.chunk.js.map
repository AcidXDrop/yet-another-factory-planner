{"version":3,"sources":["data/index.ts","hooks/usePrevious.ts","contexts/production/index.tsx","containers/ProductionPlanner/PlannerOptions/ProductionTab/index.tsx","containers/ProductionPlanner/PlannerOptions/InputsTab/index.tsx","containers/ProductionPlanner/PlannerOptions/RecipesTab/index.tsx","containers/ProductionPlanner/PlannerOptions/index.tsx","utilities/production-solver/index.ts","containers/ProductionPlanner/PlannerResults/ProductionGraphTab/index.tsx","containers/ProductionPlanner/PlannerResults/ReportTab/index.tsx","containers/ProductionPlanner/PlannerResults/index.tsx","containers/ProductionPlanner/index.tsx","containers/Main/index.tsx","App.tsx","index.tsx"],"names":["buildings","buildingsRaw","recipes","recipesRaw","resources","resourcesRaw","items","itemsRaw","handGatheredItems","handGatheredItemsRaw","usePrevious","value","ref","useRef","useEffect","current","LOCAL_STORAGE_KEY","ProductionContext","createContext","useProductionContext","ctx","useContext","Error","displayName","ORDERED_RESOURCES","getInitialInputResources","Object","entries","map","key","data","unlimited","String","maxExtraction","itemKey","weight","relativeValue","sort","a","b","aIndex","findIndex","r","Infinity","bIndex","getInitialAllowedRecipes","recipeMap","forEach","isAlternate","reducer","state","action","type","newProductionItems","productionItems","nanoid","mode","filter","i","newInputItems","inputItems","newInputResources","inputResources","allowHandGatheredItems","active","newWeightingOptions","weightingOptions","power","buildArea","newAllowedRecipes","allowedRecipes","keys","alternates","window","localStorage","getItem","loadedState","JSON","parse","version","e","console","error","ProductionProvider","children","useReducer","dispatch","useState","loaded","setLoaded","prevState","setItem","stringify","Provider","itemOptions","producedFromRecipes","length","text","name","baseModeOptions","ProductionTab","Grid","modeOptions","recipeKey","recipeInfo","target","products","find","p","itemClass","replace","push","perMinute","Row","Column","style","flex","Dropdown","fluid","placeholder","selection","search","clearable","options","onChange","newMode","Input","className","min","step","width","minWidth","Button","icon","negative","onClick","Icon","columns","primary","usedInRecipes","InputsTab","Header","labelPosition","disabled","Checkbox","fontWeight","label","checked","Divider","display","alignItems","renderWeightInputs","cleanAltNameRegex","baseRecipes","altRecipes","RecipesTab","altRecipeSearch","setAltRecipeSearch","baseRecipeSearch","setBaseRecipeSearch","renderRecipeList","useCallback","recipeList","component","List","Item","renderedBaseRecipes","useMemo","renderedAltRecipes","renderRecipeOptions","searchValue","setSearchValue","rendered","toLowerCase","includes","divided","PlannerOptions","activeTab","setActiveTab","handleSetTab","Container","Menu","pointing","secondary","attached","widths","padding","renderTab","EPSILON","NODE_TYPE","ProductionSolver","globalWeights","inputs","outputs","this","Number","validateNumber","maxGlobalWeight","Math","max","item","amount","maxResourceWeight","values","rateTargets","maximizeTargets","sortedMaximizeTargets","maximize","targetProduct","index","val","num","isNaN","timestamp","performance","now","solveProduction","productionSolution","productionGraph","generateProductionGraph","message","loadGLPK","glpk","model","objective","direction","GLP_MIN","vars","subjectTo","buildingInfo","producedIn","coef","area","itemInfo","ingredients","existingVar","v","objectiveVars","inputInfo","bnds","GLP_UP","ub","lb","NaN","outputInfo","pow","ov","solve","msglev","GLP_MSG_OFF","solution","result","status","GLP_OPT","abs","itemProductionTotals","graph","nodes","edges","multiplier","product","producedBy","usedBy","ingredient","id","productionTotals","j","nextDemand","usageInfo","usageNode","productionInfo","productionNode","from","to","productionRate","itemNode","Cytoscape","use","klay","layout","edgeRouting","nodePlacement","edgeSpacingFactor","inLayerSpacingFactor","spacing","thoroughness","stylesheet","selector","NODE_COLOR_CLASS","truncateFloat","n","toFixed","getNodeLabel","node","amountText","recipe","getEdgeLabel","edge","ProductionGraphTab","props","activeGraph","errorMessage","graphProps","elements","group","classes","source","undefined","height","flexDirection","justifyContent","border","boxSelectionEnabled","autounselectify","wheelSensitivity","maxZoom","minZoom","overflow","ReportTab","PlannerResults","autoCalc","setAutoCalc","solverResults","setSolverResults","handleCalculateFactory","solver","exec","results","marginBottom","marginRight","toggle","seed","floor","Date","getTime","rng","seedrandom","TIPS","TIP_INDEX","TIP","ProductionPlanner","as","Factory","Main","fixed","size","header","paddingTop","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f1117d84.chunk.js","sourcesContent":["import buildingsRaw from './json/buildings.json';\r\nimport recipesRaw from './json/recipes.json';\r\nimport resourcesRaw from './json/resources.json';\r\nimport itemsRaw from './json/items.json';\r\nimport handGatheredItemsRaw from './json/handGatheredItems.json';\r\n\r\nexport type BuildingsInfo = {\r\n  slug: string,\r\n  name: string,\r\n  power: number,\r\n  area: number,\r\n};\r\n\r\nexport type ItemRate = {\r\n  itemClass: string,\r\n  perMinute: number,\r\n};\r\n\r\nexport type RecipeInfo = {\r\n  slug: string,\r\n  name: string,\r\n  isAlternate: boolean,\r\n  ingredients: ItemRate[],\r\n  products: ItemRate[],\r\n  producedIn: string,\r\n};\r\n\r\nexport type ResourceInfo = {\r\n  itemClass: string,\r\n  maxExtraction: number | null,\r\n  relativeValue: number,\r\n};\r\n\r\nexport type ItemInfo = {\r\n  slug: string,\r\n  name: string,\r\n  sinkPoints: number,\r\n  usedInRecipes: string[],\r\n  producedFromRecipes: string[],\r\n};\r\n\r\nexport type BuildingMap = { [key in keyof typeof buildingsRaw]: BuildingsInfo } & { [key: string]: BuildingsInfo };\r\nexport type RecipeMap = { [key in keyof typeof recipesRaw]: RecipeInfo } & { [key: string]: RecipeInfo };\r\nexport type ResourceMap = { [key in keyof typeof resourcesRaw]: ResourceInfo } & { [key: string]: ResourceInfo };\r\nexport type ItemMap = { [key in keyof typeof itemsRaw]: ItemInfo } & { [key: string]: ItemInfo };\r\nexport type HandGatheredItemMap = { [key in keyof typeof handGatheredItemsRaw]: string } & { [key: string]: string };\r\n\r\nexport const buildings = (buildingsRaw as BuildingMap);\r\nexport const recipes = (recipesRaw as RecipeMap);\r\nexport const resources = (resourcesRaw as ResourceMap);\r\nexport const items = (itemsRaw as ItemMap);\r\nexport const handGatheredItems = (handGatheredItemsRaw as HandGatheredItemMap);\r\n","import { useRef, useEffect } from 'react';\r\n\r\nexport function usePrevious<T>(value: T) {\r\n  const ref = useRef<T>();\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  }, [value]);\r\n  return ref.current;\r\n}\r\n","import React, { createContext, useContext, useReducer, useState, useEffect } from 'react';\r\nimport { nanoid } from 'nanoid';\r\nimport { usePrevious } from '../../hooks/usePrevious';\r\nimport { resources, recipes } from '../../data'\r\n\r\nconst FACTORY_SETTINGS_VERSION = 'v1';\r\nconst LOCAL_STORAGE_KEY = 'factory-data';\r\n\r\n// TYPES\r\nexport type ProductionItemOptions = {\r\n  key: string,\r\n  itemKey: string,\r\n  mode: 'per-minute'|'maximize'|string,\r\n  value: string,\r\n};\r\n\r\nexport type WeightingOptions = {\r\n  resources: string,\r\n  power: string,\r\n  buildArea: string,\r\n};\r\n\r\nexport type InputItemOptions = {\r\n  key: string,\r\n  itemKey: string,\r\n  value: string,\r\n  weight: string,\r\n  unlimited: boolean,\r\n};\r\n\r\nexport type RecipeMap = {\r\n  [key: string]: boolean,\r\n};\r\n\r\nexport type FactoryOptions = {\r\n  version: string,\r\n  key: string,\r\n  productionItems: ProductionItemOptions[],\r\n  inputItems: InputItemOptions[],\r\n  inputResources: InputItemOptions[],\r\n  allowHandGatheredItems: boolean,\r\n  weightingOptions: WeightingOptions,\r\n  allowedRecipes: RecipeMap,\r\n};\r\n\r\nexport type ProductionContextType = {\r\n  state: FactoryOptions,\r\n  dispatch: React.Dispatch<FactoryAction>,\r\n}\r\n\r\n\r\n// CONTEXT\r\nexport const ProductionContext = createContext<ProductionContextType | null>(null);\r\nProductionContext.displayName = 'ProductionContext';\r\n\r\n\r\n// HELPER HOOK\r\nexport function useProductionContext() {\r\n  const ctx = useContext(ProductionContext);\r\n  if (!ctx) {\r\n    throw new Error('ProductionContext is null');\r\n  }\r\n  return ctx;\r\n}\r\n\r\n\r\n// DEFAULTS\r\nfunction getDefaultProductionItem(): ProductionItemOptions {\r\n  return ({\r\n    key: nanoid(),\r\n    itemKey: '',\r\n    mode: 'per-minute',\r\n    value: '10',\r\n  });\r\n}\r\n\r\nfunction getDefaultInputItem(): InputItemOptions {\r\n  return ({\r\n    key: nanoid(),\r\n    itemKey: '',\r\n    value: '0',\r\n    weight: '0',\r\n    unlimited: false,\r\n  });\r\n}\r\n\r\nconst ORDERED_RESOURCES = [\r\n  'Desc_OreIron_C',\r\n  'Desc_OreCopper_C',\r\n  'Desc_Stone_C',\r\n  'Desc_Coal_C',\r\n  'Desc_OreGold_C',\r\n  'Desc_RawQuartz_C',\r\n  'Desc_Sulfur_C',\r\n  'Desc_LiquidOil_C',\r\n  'Desc_OreBauxite_C',\r\n  'Desc_OreUranium_C',\r\n  'Desc_NitrogenGas_C',\r\n  'Desc_Water_C',\r\n];\r\nfunction getInitialInputResources(): InputItemOptions[] {\r\n  return Object.entries(resources)\r\n    .map(([key, data]) => {\r\n      let value = '0';\r\n      let unlimited = false;\r\n      if (key === 'Desc_Water_C') {\r\n        unlimited = true;\r\n      } else {\r\n        value = String(data.maxExtraction);\r\n      }\r\n      return {\r\n        key: key,\r\n        itemKey: key,\r\n        value,\r\n        weight: String(data.relativeValue),\r\n        unlimited,\r\n      };\r\n    })\r\n    .sort((a, b) => {\r\n      let aIndex = ORDERED_RESOURCES.findIndex((r) => r === a.itemKey);\r\n      if (aIndex === -1) aIndex = Infinity;\r\n      let bIndex = ORDERED_RESOURCES.findIndex((r) => r === b.itemKey);\r\n      if (bIndex === -1) bIndex = Infinity;\r\n      return aIndex < bIndex ? -1 : 1;\r\n    });\r\n}\r\n\r\nfunction getInitialWeightingOptions(): WeightingOptions {\r\n  return {\r\n    resources: '1000',\r\n    power: '10',\r\n    buildArea: '1',\r\n  };\r\n}\r\n\r\nfunction getInitialAllowedRecipes(): RecipeMap {\r\n  const recipeMap: RecipeMap = {};\r\n  Object.entries(recipes).forEach(([key, data]) => {\r\n    recipeMap[key] = !data.isAlternate;\r\n  });\r\n  return recipeMap;\r\n}\r\n\r\nfunction getInitialState(): FactoryOptions {\r\n  return {\r\n    version: FACTORY_SETTINGS_VERSION,\r\n    key: nanoid(),\r\n    productionItems: [],\r\n    inputItems: [],\r\n    inputResources: getInitialInputResources(),\r\n    allowHandGatheredItems: false,\r\n    weightingOptions: getInitialWeightingOptions(),\r\n    allowedRecipes: getInitialAllowedRecipes(),\r\n  };\r\n}\r\n\r\n\r\n// REDUCER\r\nexport type FactoryAction = \r\n  | { type: 'ADD_PRODUCTION_ITEM' }\r\n  | { type: 'DELETE_PRODUCTION_ITEM', key: string }\r\n  | { type: 'UPDATE_PRODUCTION_ITEM', data: ProductionItemOptions }\r\n  | { type: 'ADD_INPUT_ITEM' }\r\n  | { type: 'DELETE_INPUT_ITEM', key: string }\r\n  | { type: 'UPDATE_INPUT_ITEM', data: InputItemOptions }\r\n  | { type: 'UPDATE_INPUT_RESOURCE', data: InputItemOptions }\r\n  | { type: 'SET_RESOURCES_TO_MAP_LIMITS' }\r\n  | { type: 'SET_RESOURCES_TO_0' }\r\n  | { type: 'SET_ALLOW_HAND_GATHERED_ITEMS', active: boolean }\r\n  | { type: 'UPDATE_WEIGHTING_OPTIONS', data: WeightingOptions }\r\n  | { type: 'SET_ALL_WEIGHTS_DEFAULT' }\r\n  | { type: 'SET_RECIPE_ACTIVE', key: string, active: boolean }\r\n  | { type: 'MASS_SET_RECIPES_ACTIVE', alternates: boolean, active: boolean }\r\n  | { type: 'LOAD_LOCAL_STORAGE' };\r\n\r\nfunction reducer(state: FactoryOptions, action: FactoryAction): FactoryOptions {\r\n  switch (action.type) {\r\n    case 'ADD_PRODUCTION_ITEM': {\r\n      const newProductionItems = [\r\n        ...state.productionItems,\r\n        getDefaultProductionItem(),\r\n      ];\r\n      return { ...state, productionItems: newProductionItems };\r\n    }\r\n    case 'DELETE_PRODUCTION_ITEM': {\r\n      const newProductionItems = state.productionItems\r\n        .filter((i) => i.key !== action.key);\r\n      return { ...state, productionItems: newProductionItems };\r\n    }\r\n    case 'UPDATE_PRODUCTION_ITEM': {\r\n      const newProductionItems = state.productionItems\r\n        .map((i) => i.key === action.data.key ? action.data : i);\r\n      return { ...state, productionItems: newProductionItems };\r\n    }\r\n    case 'ADD_INPUT_ITEM': {\r\n      const newInputItems = [\r\n        ...state.inputItems,\r\n        getDefaultInputItem(),\r\n      ];\r\n      return { ...state, inputItems: newInputItems };\r\n    }\r\n    case 'DELETE_INPUT_ITEM': {\r\n      const newInputItems = state.inputItems\r\n        .filter((i) => i.key !== action.key);\r\n      return { ...state, inputItems: newInputItems };\r\n    }\r\n    case 'UPDATE_INPUT_ITEM': {\r\n      const newInputItems = state.inputItems\r\n        .map((i) => i.key === action.data.key ? action.data : i);\r\n      return { ...state, inputItems: newInputItems };\r\n    }\r\n    case 'UPDATE_INPUT_RESOURCE': {\r\n      const newInputResources = state.inputResources\r\n        .map((i) => i.key === action.data.key ? action.data : i);\r\n      return { ...state, inputResources: newInputResources };\r\n    }\r\n    case 'SET_RESOURCES_TO_MAP_LIMITS': {\r\n      const newInputResources = getInitialInputResources();\r\n      return { ...state, inputResources: newInputResources };\r\n    }\r\n    case 'SET_RESOURCES_TO_0': {\r\n      const newInputResources = state.inputResources\r\n        .map((data) => ({ ...data, value: '0', unlimited: false }));\r\n      return { ...state, inputResources: newInputResources };\r\n    }\r\n    case 'SET_ALLOW_HAND_GATHERED_ITEMS': {\r\n      return { ...state, allowHandGatheredItems: action.active };\r\n    }\r\n    case 'UPDATE_WEIGHTING_OPTIONS': {\r\n      const newWeightingOptions = { ...action.data };\r\n      return { ...state, weightingOptions: newWeightingOptions };\r\n    }\r\n    case 'SET_ALL_WEIGHTS_DEFAULT': {\r\n      const newWeightingOptions = getInitialWeightingOptions();\r\n      const newInputResources = state.inputResources\r\n        .map((i) => ({ ...i, weight: String(resources[i.itemKey].relativeValue) }));\r\n      return { ...state, weightingOptions: newWeightingOptions, inputResources: newInputResources };\r\n    }\r\n    case 'SET_RECIPE_ACTIVE': {\r\n      const newAllowedRecipes = { ...state.allowedRecipes };\r\n      newAllowedRecipes[action.key] = action.active;\r\n      return { ...state, allowedRecipes: newAllowedRecipes };\r\n    }\r\n    case 'MASS_SET_RECIPES_ACTIVE': {\r\n      const newAllowedRecipes = { ...state.allowedRecipes };\r\n      Object.keys(newAllowedRecipes).forEach((key) => {\r\n        if (action.alternates && recipes[key].isAlternate) {\r\n          newAllowedRecipes[key] = action.active;\r\n        } else if (!action.alternates && !recipes[key].isAlternate) {\r\n          newAllowedRecipes[key] = action.active;\r\n        }\r\n      })\r\n      return { ...state, allowedRecipes: newAllowedRecipes };\r\n    }\r\n    case 'LOAD_LOCAL_STORAGE': {\r\n      const data = window.localStorage.getItem(LOCAL_STORAGE_KEY);\r\n      if (data) {\r\n        try {\r\n          const loadedState = JSON.parse(data);\r\n          if (loadedState.version === FACTORY_SETTINGS_VERSION) {\r\n            return loadedState;\r\n          }\r\n        } catch (e) {\r\n          console.error('LOAD FROM LOCAL STORAGE FAILED');\r\n        }\r\n      }\r\n      return state;\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n\r\n// PROVIDER\r\ntype PropTypes = { children: React.ReactNode };\r\nexport const ProductionProvider = ({ children }: PropTypes) => {\r\n  const [state, dispatch] = useReducer(reducer, getInitialState());\r\n  const [loaded, setLoaded] = useState(false);\r\n\r\n  const prevState = usePrevious(state);\r\n\r\n  useEffect(() => {\r\n    if (!loaded) {\r\n      dispatch({ type: 'LOAD_LOCAL_STORAGE' });\r\n      setLoaded(true);\r\n    }\r\n  }, [loaded]);\r\n\r\n  useEffect(() => {\r\n    if (prevState !== state) {\r\n      window.localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(state));\r\n    }\r\n  }, [prevState, state]);\r\n\r\n  return (\r\n    <ProductionContext.Provider value={{ state, dispatch }}>\r\n      {children}\r\n    </ProductionContext.Provider>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Button, Dropdown, Input, Grid, Icon } from 'semantic-ui-react';\r\nimport { items, recipes, resources } from '../../../../data';\r\nimport { useProductionContext } from '../../../../contexts/production';\r\n\r\nconst itemOptions = Object.keys(items)\r\n  .filter((key) => items[key].producedFromRecipes.length !== 0 && !resources[key])\r\n  .map((key) => ({\r\n    value: key,\r\n    text: items[key].name,\r\n  }))\r\n  .sort((a, b) => {\r\n    return a.text > b.text ? 1 : -1;\r\n  });\r\n\r\nconst baseModeOptions = [\r\n  { value: 'per-minute', text: 'Items Per Min' },\r\n  { value: 'maximize', text: 'Maximize Output' },\r\n];\r\n\r\nconst ProductionTab = () => {\r\n  const ctx = useProductionContext();\r\n\r\n  function renderItemInputs() {\r\n    return ctx.state.productionItems.map((data) => {\r\n      const modeOptions = [...baseModeOptions];\r\n      if (data.itemKey) {\r\n        const recipeList = items[data.itemKey].producedFromRecipes;\r\n        recipeList.forEach((recipeKey) => {\r\n          const recipeInfo = recipes[recipeKey];\r\n          const target = recipeInfo?.products.find((p) => p.itemClass === data.itemKey);\r\n          if (target) {\r\n            const name = recipeInfo.isAlternate ? recipeInfo.name.replace('Alternate: ', '') : 'Base Recipe';\r\n            modeOptions.push({ value: recipeKey, text: `${name} [${target.perMinute}/min]` });\r\n          }\r\n        });\r\n      }\r\n      return (\r\n        <Grid.Row key={data.key}>\r\n          <Grid.Column style={{ flex: '1 1 auto' }}>\r\n            <Dropdown\r\n              fluid\r\n              placeholder=\"Select an item\"\r\n              selection\r\n              search\r\n              clearable\r\n              options={itemOptions}\r\n              value={data.itemKey ? data.itemKey : ''}\r\n              onChange={(e, { value }) => {\r\n                const newMode = data.mode === 'maximize' ? 'maximize' : 'per-minute';\r\n                ctx.dispatch({\r\n                  type: 'UPDATE_PRODUCTION_ITEM',\r\n                  data: { ...data, itemKey: (value as string), mode: newMode },\r\n                });\r\n              }}\r\n            />\r\n          </Grid.Column>\r\n          <Grid.Column style={{ flex: '0 0 380px' }}>\r\n            <Input\r\n              className='no-spinner'\r\n              type='number'\r\n              min='0'\r\n              step='1'\r\n              fluid\r\n              value={data.value}\r\n              onChange={(e, { value }) => {\r\n                ctx.dispatch({\r\n                  type: 'UPDATE_PRODUCTION_ITEM',\r\n                  data: { ...data, value: value },\r\n                });\r\n              }}\r\n              action\r\n            >\r\n              <input />\r\n              <Dropdown\r\n                style={{ width: '230px', minWidth: '0px' }}\r\n                selection\r\n                options={modeOptions}\r\n                value={data.mode}\r\n                onChange={(e, { value }) => {\r\n                  ctx.dispatch({\r\n                    type: 'UPDATE_PRODUCTION_ITEM',\r\n                    data: { ...data, mode: (value as any) },\r\n                  });\r\n                }}\r\n              />\r\n            </Input>\r\n          </Grid.Column>\r\n          <Grid.Column style={{ flex: '0 0 70px' }}>\r\n            <Button\r\n              icon\r\n              negative\r\n              onClick={() => { ctx.dispatch({ type: 'DELETE_PRODUCTION_ITEM', key: data.key }); }}\r\n            >\r\n              <Icon name='trash alternate outline' />\r\n            </Button>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      );\r\n    });\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <p>\r\n        Select the items you want to produce. When maximizing multiple outputs, the value represents the priority of that item.\r\n      </p>\r\n      <Grid>\r\n        {renderItemInputs()}\r\n        <Grid.Row columns={1}>\r\n          <Grid.Column>\r\n            <Button\r\n              primary\r\n              onClick={() => { ctx.dispatch({ type: 'ADD_PRODUCTION_ITEM' })}}\r\n            >\r\n              + Add Product\r\n            </Button>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProductionTab;\r\n","import React from 'react';\r\nimport { Button, Dropdown, Input, Checkbox, Grid, Icon, Header, Divider } from 'semantic-ui-react';\r\nimport { items, resources } from '../../../../data';\r\nimport { useProductionContext } from '../../../../contexts/production';\r\n\r\nconst itemOptions = Object.keys(items)\r\n  .filter((key) => items[key].producedFromRecipes.length !== 0 && items[key].usedInRecipes.length !== 0 && !resources[key])\r\n  .map((key) => ({\r\n    value: key,\r\n    text: items[key].name,\r\n  }))\r\n  .sort((a, b) => {\r\n    return a.text > b.text ? 1 : -1;\r\n  });\r\n\r\n\r\nconst InputsTab = () => {\r\n  const ctx = useProductionContext();\r\n\r\n  function renderItemInputs() {\r\n    return ctx.state.inputItems.map((data) => (\r\n      <Grid.Row key={data.key}>\r\n        <Grid.Column style={{ flex: '1 1 auto' }}>\r\n          <Dropdown\r\n            fluid\r\n            placeholder=\"Select an item\"\r\n            selection\r\n            search\r\n            clearable\r\n            options={itemOptions}\r\n            value={data.itemKey ? data.itemKey : ''}\r\n            onChange={(e, { value }) => {\r\n              ctx.dispatch({\r\n                type: 'UPDATE_INPUT_ITEM',\r\n                data: { ...data, itemKey: (value as string) },\r\n              });\r\n            }}\r\n          />\r\n        </Grid.Column>\r\n        <Grid.Column style={{ flex: '0 0 250px' }}>\r\n          <Input\r\n            className='no-spinner'\r\n            type='number'\r\n            min='0'\r\n            step='1'\r\n            fluid\r\n            value={data.value}\r\n            onChange={(e, { value }) => {\r\n              ctx.dispatch({\r\n                type: 'UPDATE_INPUT_ITEM',\r\n                data: { ...data, value: value },\r\n              });\r\n            }}\r\n            labelPosition='right'\r\n          >\r\n            <input disabled={data.unlimited} />\r\n            <Checkbox\r\n              className='label'\r\n              style={{ fontWeight: 'normal' }}\r\n              label='Unlimited'\r\n              checked={data.unlimited}\r\n              onChange={() => {\r\n                ctx.dispatch({\r\n                  type: 'UPDATE_INPUT_ITEM',\r\n                  data: { ...data, unlimited: !data.unlimited },\r\n                });\r\n              }}\r\n            />\r\n          </Input>\r\n        </Grid.Column>\r\n        <Grid.Column style={{ flex: '0 0 70px' }}>\r\n          <Button\r\n            icon\r\n            negative\r\n            onClick={() => { ctx.dispatch({ type: 'DELETE_INPUT_ITEM', key: data.key }); }}\r\n          >\r\n            <Icon name='trash alternate outline' />\r\n          </Button>\r\n        </Grid.Column>\r\n      </Grid.Row>\r\n    ));\r\n  }\r\n\r\n  function renderWeightInputs() {\r\n    const weightingOptions = ctx.state.weightingOptions;\r\n    return (\r\n      <>\r\n        <Grid.Row>\r\n          <Grid.Column style={{ flex: '0 0 180px', display: 'flex', alignItems: 'center' }}>\r\n            Resource Efficiency\r\n          </Grid.Column>\r\n          <Grid.Column style={{ flex: '1 1 auto' }}>\r\n            <Input\r\n              className='no-spinner'\r\n              type='number'\r\n              min='0'\r\n              step='1'\r\n              fluid\r\n              value={weightingOptions.resources}\r\n              onChange={(e, { value }) => {\r\n                ctx.dispatch({\r\n                  type: 'UPDATE_WEIGHTING_OPTIONS',\r\n                  data: { ...weightingOptions, resources: value },\r\n                });\r\n              }}\r\n            >\r\n            </Input>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n        <Grid.Row>\r\n          <Grid.Column style={{ flex: '0 0 180px', display: 'flex', alignItems: 'center' }}>\r\n            Power Efficiency\r\n          </Grid.Column>\r\n          <Grid.Column style={{ flex: '1 1 auto' }}>\r\n            <Input\r\n              className='no-spinner'\r\n              type='number'\r\n              min='0'\r\n              step='1'\r\n              fluid\r\n              value={weightingOptions.power}\r\n              onChange={(e, { value }) => {\r\n                ctx.dispatch({\r\n                  type: 'UPDATE_WEIGHTING_OPTIONS',\r\n                  data: { ...weightingOptions, power: value },\r\n                });\r\n              }}\r\n            >\r\n            </Input>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n        <Grid.Row>\r\n          <Grid.Column style={{ flex: '0 0 180px', display: 'flex', alignItems: 'center' }}>\r\n            Build Area Efficiency\r\n          </Grid.Column>\r\n          <Grid.Column style={{ flex: '1 1 auto' }}>\r\n            <Input\r\n              className='no-spinner'\r\n              type='number'\r\n              min='0'\r\n              step='1'\r\n              fluid\r\n              value={weightingOptions.buildArea}\r\n              onChange={(e, { value }) => {\r\n                ctx.dispatch({\r\n                  type: 'UPDATE_WEIGHTING_OPTIONS',\r\n                  data: { ...weightingOptions, buildArea: value },\r\n                });\r\n              }}\r\n            >\r\n            </Input>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </>\r\n    )\r\n  }\r\n\r\n  function renderResourceInputs() {\r\n    return ctx.state.inputResources.map((data) => (\r\n      <Grid.Row key={data.key}>\r\n        <Grid.Column style={{ flex: '0 0 180px', display: 'flex', alignItems: 'center' }}>\r\n          {items[data.itemKey].name}\r\n        </Grid.Column>\r\n        <Grid.Column style={{ flex: '1 1 auto' }}>\r\n          <Input\r\n            className='no-spinner'\r\n            type='number'\r\n            min='0'\r\n            step='1'\r\n            fluid\r\n            value={data.value}\r\n            onChange={(e, { value }) => {\r\n              ctx.dispatch({\r\n                type: 'UPDATE_INPUT_RESOURCE',\r\n                data: { ...data, value: value },\r\n              });\r\n            }}\r\n            labelPosition='right'\r\n          >\r\n            <input disabled={data.unlimited} />\r\n            <Checkbox\r\n              className='label'\r\n              style={{ fontWeight: 'normal' }}\r\n              label='Unlimited'\r\n              checked={data.unlimited}\r\n              onChange={() => {\r\n                ctx.dispatch({\r\n                  type: 'UPDATE_INPUT_RESOURCE',\r\n                  data: { ...data, unlimited: !data.unlimited },\r\n                });\r\n              }}\r\n            />\r\n          </Input>\r\n        </Grid.Column>\r\n        <Grid.Column style={{ flex: '0 0 220px' }}>\r\n          <Input\r\n            className='no-spinner'\r\n            type='number'\r\n            min='0'\r\n            step='1'\r\n            fluid\r\n            value={data.weight}\r\n            onChange={(e, { value }) => {\r\n              ctx.dispatch({\r\n                type: 'UPDATE_INPUT_RESOURCE',\r\n                data: { ...data, weight: value },\r\n              });\r\n            }}\r\n            label='Weight'\r\n          />\r\n        </Grid.Column>\r\n      </Grid.Row>\r\n    ));\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Header>Input Items</Header>\r\n      <p>\r\n        Select the items that you already have available and don't need to produce in this factory.\r\n      </p>\r\n      <Grid>\r\n        {renderItemInputs()}\r\n        <Grid.Row>\r\n          <Grid.Column>\r\n            <Button\r\n              primary\r\n              onClick={() => { ctx.dispatch({ type: 'ADD_INPUT_ITEM' }) }}\r\n            >\r\n              + Add Input\r\n            </Button>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n      <Divider />\r\n      <Header>Weighting Options</Header>\r\n      <p>\r\n        Adjust the weights affecting the importance of various properties of the factory. A value of 0 indicates that that property is not considered during factory layout.\r\n      </p>\r\n      <Grid>\r\n        <Grid.Row>\r\n          <Grid.Column>\r\n            <Button\r\n              primary\r\n              onClick={() => { ctx.dispatch({ type: 'SET_ALL_WEIGHTS_DEFAULT' }) }}\r\n            >\r\n              Reset all weights\r\n            </Button>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n        {renderWeightInputs()}\r\n      </Grid>\r\n      <Divider />\r\n      <Header>Raw Resources</Header>\r\n      <p>\r\n        Select the raw resources that are available to your factory. The default values are set to the map limits. The weight value is a number representing how valuable that resource is when comparing recipes. The defaults are calculated automatically according to node rarity.\r\n      </p>\r\n      <Grid>\r\n        <Grid.Row columns={1}>\r\n          <Grid.Column>\r\n            <Button\r\n              primary\r\n              onClick={() => { ctx.dispatch({ type: 'SET_RESOURCES_TO_MAP_LIMITS' }) }}\r\n            >\r\n              Set to Maximum\r\n            </Button>\r\n            <Button\r\n              primary\r\n              onClick={() => { ctx.dispatch({ type: 'SET_RESOURCES_TO_0' }) }}\r\n            >\r\n              Set to 0\r\n            </Button>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n        <Grid.Row columns={1}>\r\n          <Grid.Column>\r\n            <Checkbox\r\n              label='Allow hand-gathered resources'\r\n              checked={ctx.state.allowHandGatheredItems}\r\n              onChange={(e, { checked }) => { ctx.dispatch({ type: 'SET_ALLOW_HAND_GATHERED_ITEMS', active: !!checked }) }}\r\n              />\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n        {renderResourceInputs()}\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default InputsTab;\r\n","import React, { useState, useMemo, useCallback } from 'react';\r\nimport { Button, Input, Checkbox, Grid, Header, List } from 'semantic-ui-react';\r\nimport { recipes } from '../../../../data';\r\nimport { useProductionContext } from '../../../../contexts/production';\r\n\r\nconst cleanAltNameRegex = /^Alternate: /;\r\nconst baseRecipes: { key: string, label: string }[] = [];\r\nconst altRecipes: { key: string, label: string }[] = [];\r\nObject.entries(recipes)\r\n  .forEach(([key, data]) => {\r\n    if (data.isAlternate) {\r\n      altRecipes.push({\r\n        key,\r\n        label: data.name.replace(cleanAltNameRegex, ''),\r\n      });\r\n    } else {\r\n      baseRecipes.push({\r\n        key,\r\n        label: data.name,\r\n      });\r\n    }\r\n  });\r\nbaseRecipes.sort((a, b) => (a.label > b.label ? 1 : -1));\r\naltRecipes.sort((a, b) => (a.label > b.label ? 1 : -1));\r\n\r\nconst RecipesTab = () => {\r\n  const ctx = useProductionContext();\r\n  const [altRecipeSearch, setAltRecipeSearch] = useState('');\r\n  const [baseRecipeSearch, setBaseRecipeSearch] = useState('');\r\n\r\n  const renderRecipeList = useCallback((recipeList: { key: string, label: string }[]) => {\r\n    return recipeList.map(({ key, label }) => ({\r\n      label,\r\n      component: (\r\n        <List.Item key={key}>\r\n          <Checkbox\r\n            label={label}\r\n            checked={ctx.state.allowedRecipes[key]}\r\n            onChange={() => {\r\n              ctx.dispatch({\r\n                type: 'SET_RECIPE_ACTIVE',\r\n                key,\r\n                active: !ctx.state.allowedRecipes[key],\r\n              });\r\n            }}\r\n          />\r\n        </List.Item>\r\n      )\r\n    }));\r\n  }, [ctx]);\r\n\r\n  const renderedBaseRecipes = useMemo(() => renderRecipeList(baseRecipes), [renderRecipeList]);\r\n  const renderedAltRecipes = useMemo(() => renderRecipeList(altRecipes), [renderRecipeList]);\r\n\r\n  function renderRecipeOptions(alternates: boolean) {\r\n    const [searchValue, setSearchValue] = alternates\r\n      ? [altRecipeSearch, setAltRecipeSearch]\r\n      : [baseRecipeSearch, setBaseRecipeSearch];\r\n    const rendered = alternates ? renderedAltRecipes : renderedBaseRecipes\r\n    return (\r\n      <>\r\n        <Input\r\n          placeholder='Search...'\r\n          fluid\r\n          action\r\n          value={searchValue}\r\n          onChange={(e, { value }) => { setSearchValue(value); }}\r\n        >\r\n          <input />\r\n          <Button onClick={() => { ctx.dispatch({ type: 'MASS_SET_RECIPES_ACTIVE', alternates, active: true }) }}>\r\n            All\r\n          </Button>\r\n          <Button onClick={() => { ctx.dispatch({ type: 'MASS_SET_RECIPES_ACTIVE', alternates, active: false }) }}>\r\n            None\r\n          </Button>\r\n        </Input>\r\n        <List>\r\n          {rendered.filter(({ label }) => label.toLowerCase().includes(searchValue)).map(({ component }) => component)}\r\n        </List>\r\n      </>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <p>\r\n        Select the recipes that you want to be considered in this factory.\r\n      </p>\r\n      <Grid columns={2} divided={true}>\r\n        <Grid.Row>\r\n          <Grid.Column>\r\n            <Header>Alternate Recipes</Header>\r\n            {renderRecipeOptions(true)}\r\n          </Grid.Column>\r\n          <Grid.Column>\r\n            <Header>Base Recipes</Header>\r\n            {renderRecipeOptions(false)}\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RecipesTab;\r\n","import React, { useState } from 'react';\r\nimport { Container, Menu } from 'semantic-ui-react';\r\nimport ProductionTab from './ProductionTab';\r\nimport InputsTab from './InputsTab';\r\nimport RecipesTab from './RecipesTab';\r\n\r\nconst PlannerOptions = () => {\r\n  const [activeTab, setActiveTab] = useState('production');\r\n\r\n  function handleSetTab(e: any, data: any) {\r\n    setActiveTab(data.name);\r\n  }\r\n\r\n  function renderTab() {\r\n    switch (activeTab) {\r\n      case 'production':\r\n        return <ProductionTab />\r\n      case 'inputs':\r\n        return <InputsTab />\r\n      case 'recipes':\r\n        return <RecipesTab />\r\n      default:\r\n        return null;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container fluid>\r\n      <Menu pointing secondary attached=\"top\" fluid widths={3}>\r\n        <Menu.Item\r\n          name='production'\r\n          active={activeTab === 'production'}\r\n          onClick={handleSetTab}\r\n        >\r\n          Production\r\n        </Menu.Item>\r\n        <Menu.Item\r\n          name='inputs'\r\n          active={activeTab === 'inputs'}\r\n          onClick={handleSetTab}\r\n        >\r\n          Inputs\r\n        </Menu.Item>\r\n        <Menu.Item\r\n          name='recipes'\r\n          active={activeTab === 'recipes'}\r\n          onClick={handleSetTab}\r\n        >\r\n          Recipes\r\n        </Menu.Item>\r\n      </Menu>\r\n      <div style={{ padding: '20px 0px' }}>\r\n        {renderTab()}\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default PlannerOptions;\r\n","import loadGLPK, { LP, Var } from 'glpk.js';\r\nimport { nanoid } from 'nanoid';\r\nimport { FactoryOptions } from '../../contexts/production';\r\nimport { buildings, items, recipes, resources, handGatheredItems } from '../../data';\r\nimport { RecipeMap } from '../../contexts/production';\r\n\r\nconst EPSILON = 1e-8;\r\nconst MAXIMIZE_OBJECTIVE_WEIGHT = 1e6;\r\n\r\nexport const NODE_TYPE = {\r\n  FINAL_PRODUCT: 'FINAL_PRODUCT',\r\n  SIDE_PRODUCT: 'SIDE_PRODUCT',\r\n  INPUT_ITEM: 'INPUT_ITEM',\r\n  HAND_GATHERED_RESOURCE: 'HAND_GATHERED_RESOURCE',\r\n  RESOURCE: 'RESOURCE',\r\n  RECIPE: 'RECIPE',\r\n};\r\n\r\ntype Inputs = {\r\n  [key: string]: {\r\n    amount: number,\r\n    weight: number,\r\n    type: string,\r\n  }\r\n};\r\n\r\ntype Outputs = {\r\n  [key: string]: {\r\n    value: number,\r\n    maximize: boolean,\r\n  }\r\n};\r\n\r\ntype GlobalWeights = {\r\n  resources: number,\r\n  power: number,\r\n  buildArea: number,\r\n};\r\n\r\ntype ProductionSolution = { [key: string]: number };\r\ntype ProductionAmount = { recipeKey: string, amount: number };\r\ntype ItemProductionTotals = {\r\n  [key: string]: {\r\n    producedBy: ProductionAmount[],\r\n    usedBy: ProductionAmount[],\r\n  }\r\n};\r\n\r\nexport type SolverResults = {\r\n  productionGraph: ProductionGraph | null,\r\n  timestamp: number,\r\n  error: string,\r\n};\r\n\r\nexport type ProductionGraph = {\r\n  nodes: { [key: string]: GraphNode },\r\n  edges: GraphEdge[],\r\n};\r\n\r\nexport type GraphNode = {\r\n  id: string,\r\n  key: string,\r\n  type: string,\r\n  multiplier: number,\r\n};\r\n\r\nexport type GraphEdge = {\r\n  key: string,\r\n  from: string,\r\n  to: string,\r\n  productionRate: number,\r\n};\r\n\r\nexport class ProductionSolver {\r\n  private globalWeights: GlobalWeights;\r\n  private inputs: Inputs;\r\n  private outputs: Outputs;\r\n  private allowedRecipes: RecipeMap;\r\n\r\n  public constructor(options: FactoryOptions) {\r\n    this.globalWeights = {\r\n      resources: Number(options.weightingOptions.resources),\r\n      power: Number(options.weightingOptions.power),\r\n      buildArea: Number(options.weightingOptions.buildArea),\r\n    };\r\n\r\n    this.validateNumber(this.globalWeights.resources);\r\n    this.validateNumber(this.globalWeights.power);\r\n    this.validateNumber(this.globalWeights.buildArea);\r\n\r\n    const maxGlobalWeight = Math.max(this.globalWeights.resources, this.globalWeights.power, this.globalWeights.buildArea);\r\n    this.globalWeights.resources /= maxGlobalWeight;\r\n    this.globalWeights.power /= maxGlobalWeight;\r\n    this.globalWeights.buildArea /= (10 * maxGlobalWeight); // Extra factor of 10 to be closer to power numbers\r\n\r\n    this.inputs = {};\r\n\r\n    options.inputResources.forEach((item) => {\r\n      const resourceData = resources[item.itemKey];\r\n      if (!resourceData) return;\r\n      const amount = item.unlimited ? Infinity : Number(item.value);\r\n      this.validateNumber(amount);\r\n      if (!amount) return;\r\n      const weight = Number(item.weight);\r\n      this.validateNumber(weight);\r\n      this.inputs[item.itemKey] = {\r\n        amount,\r\n        weight,\r\n        type: NODE_TYPE.RESOURCE,\r\n      }\r\n    });\r\n\r\n    const maxResourceWeight = Math.max(...Object.values(this.inputs).map((i) => i.weight));\r\n    Object.values(this.inputs).forEach((i) => { i.weight /= maxResourceWeight });\r\n\r\n    options.inputItems.forEach((item) => {\r\n      if (!item.itemKey) return;\r\n      const amount = item.unlimited ? Infinity : Number(item.value);\r\n      this.validateNumber(amount);\r\n      if (!amount) return;\r\n      if (!this.inputs[item.itemKey]) {\r\n        this.inputs[item.itemKey] = {\r\n          amount,\r\n          weight: 0,\r\n          type: NODE_TYPE.INPUT_ITEM,\r\n        }\r\n      } else {\r\n        this.inputs[item.itemKey].amount += amount;\r\n      }\r\n    });\r\n\r\n    if (options.allowHandGatheredItems) {\r\n      Object.keys(handGatheredItems).forEach((item) => {\r\n        this.inputs[item] = {\r\n          amount: Infinity,\r\n          weight: 1000,\r\n          type: NODE_TYPE.HAND_GATHERED_RESOURCE,\r\n        };\r\n      });\r\n    }\r\n\r\n    this.outputs = {};\r\n    const rateTargets: Outputs = {};\r\n    const maximizeTargets: Outputs = {};\r\n    const sortedMaximizeTargets: Outputs = {};\r\n    options.productionItems.forEach((item) => {\r\n      if (!item.itemKey) return;\r\n      const amount = Number(item.value);\r\n      this.validateNumber(amount);\r\n      if (!amount) return;\r\n      switch (item.mode) {\r\n        case 'per-minute':\r\n          if (rateTargets[item.itemKey]) {\r\n            rateTargets[item.itemKey].value += amount;\r\n          } else {\r\n            rateTargets[item.itemKey] = {\r\n              value: amount,\r\n              maximize: false,\r\n            };\r\n          }\r\n          break;\r\n        case 'maximize':\r\n          if (maximizeTargets[item.itemKey]) {\r\n            if (maximizeTargets[item.itemKey].value < amount) {\r\n              maximizeTargets[item.itemKey].value = amount;\r\n            }\r\n          } else {\r\n            maximizeTargets[item.itemKey] = {\r\n              value: amount,\r\n              maximize: true,\r\n            };\r\n          }\r\n          break;\r\n        default:\r\n          if (recipes[item.mode]) {\r\n            const targetProduct = recipes[item.mode].products.find((p) => p.itemClass === item.itemKey)!;\r\n            if (rateTargets[item.itemKey]) {\r\n              rateTargets[item.itemKey].value += amount * targetProduct.perMinute;\r\n            } else {\r\n              rateTargets[item.itemKey] = {\r\n                value: amount * targetProduct.perMinute,\r\n                maximize: false,\r\n              };\r\n            }\r\n          } else {\r\n            throw new Error('INVALID OUTPUT MODE SELECTION');\r\n          }\r\n      }\r\n    });\r\n\r\n    Object.entries(maximizeTargets)\r\n      .sort((a, b) => {\r\n        if (a[1].value > b[1].value) return 1;\r\n        if (a[1].value < b[1].value) return -1;\r\n        return 0;\r\n      })\r\n      .forEach(([key, val], index) => {\r\n        sortedMaximizeTargets[key] = {\r\n          ...val,\r\n          value: index + 1,\r\n        }\r\n      });\r\n\r\n    this.outputs = {\r\n      ...rateTargets,\r\n      ...sortedMaximizeTargets,\r\n    };\r\n    if (Object.keys(this.outputs).length === 0) {\r\n      throw new Error('NO OUTPUTS SET');\r\n    }\r\n\r\n    this.allowedRecipes = options.allowedRecipes;\r\n  }\r\n\r\n  private validateNumber(num: Number) {\r\n    if (Number.isNaN(num)) {\r\n      throw new Error('INVALID VALUE: NOT A NUMBER');\r\n    } else if (num < 0) {\r\n      throw new Error('INVALID VALUE: NEGATIVE NUMBER');\r\n    }\r\n  }\r\n\r\n  public async exec(): Promise<SolverResults> {\r\n    const timestamp = performance.now();\r\n    try {\r\n      const productionSolution = await this.solveProduction();\r\n      if (Object.keys(productionSolution).length === 0) {\r\n        throw new Error('SOLUTION IS EMPTY.');\r\n      }\r\n      const productionGraph = this.generateProductionGraph(productionSolution);\r\n\r\n      return {\r\n        productionGraph,\r\n        timestamp: timestamp,\r\n        error: '',\r\n      };\r\n    } catch (e: any) {\r\n      return {\r\n        productionGraph: null,\r\n        timestamp: timestamp,\r\n        error: e.message,\r\n      };\r\n    }\r\n  }\r\n\r\n  private async solveProduction(): Promise<ProductionSolution> {\r\n    const glpk = await loadGLPK();\r\n    const model: LP = {\r\n      name: 'production',\r\n      objective: {\r\n        name: 'score',\r\n        direction: glpk.GLP_MIN,\r\n        vars: [],\r\n      },\r\n      subjectTo: [],\r\n    };\r\n\r\n    for (const [recipeKey, recipeInfo] of Object.entries(recipes)) {\r\n      if (!this.allowedRecipes[recipeKey]) continue;\r\n      const buildingInfo = buildings[recipeInfo.producedIn];\r\n      model.objective.vars.push({\r\n        name: recipeKey,\r\n        coef: buildingInfo.power * this.globalWeights.power + buildingInfo.area * this.globalWeights.buildArea,\r\n      });\r\n    }\r\n\r\n    for (const [itemKey, itemInfo] of Object.entries(items)) {\r\n      const vars: Var[] = [];\r\n\r\n      for (const recipeKey of itemInfo.usedInRecipes) {\r\n        if (!this.allowedRecipes[recipeKey]) continue;\r\n        const recipeInfo = recipes[recipeKey];\r\n        const target = recipeInfo.ingredients.find((i) => i.itemClass === itemKey)!;\r\n        vars.push({ name: recipeKey, coef: target.perMinute });\r\n      }\r\n\r\n      for (const recipeKey of itemInfo.producedFromRecipes) {\r\n        if (!this.allowedRecipes[recipeKey]) continue;\r\n        const recipeInfo = recipes[recipeKey];\r\n        const target = recipeInfo.products.find((p) => p.itemClass === itemKey)!;\r\n        const existingVar = vars.find((v) => v.name === recipeKey);\r\n        if (existingVar) {\r\n          existingVar.coef -= target.perMinute;\r\n        } else {\r\n          vars.push({ name: recipeKey, coef: -target.perMinute });\r\n        }\r\n      }\r\n\r\n      if (vars.length === 0) continue;\r\n\r\n      let objectiveVars: Var[] = [];\r\n\r\n      if (this.inputs[itemKey]) {\r\n        const inputInfo = this.inputs[itemKey];\r\n        if (inputInfo.amount !== Infinity) {\r\n          model.subjectTo.push({\r\n            name: `${itemKey} resource constraint`,\r\n            vars,\r\n            bnds: { type: glpk.GLP_UP, ub: inputInfo.amount, lb: NaN },\r\n          });\r\n        }\r\n\r\n        if (inputInfo.type === NODE_TYPE.RESOURCE || inputInfo.type === NODE_TYPE.HAND_GATHERED_RESOURCE) {\r\n          objectiveVars = vars\r\n            .filter((v) => v.coef > 0)\r\n            .map<Var>((v) => ({\r\n              name: v.name,\r\n              coef: v.coef * inputInfo.weight * this.globalWeights.resources,\r\n            }));\r\n        }\r\n      }\r\n\r\n      else if (this.outputs[itemKey]) {\r\n        const outputInfo = this.outputs[itemKey];\r\n        if (outputInfo.maximize) {\r\n          model.subjectTo.push({\r\n            name: `${itemKey} final product constraint`,\r\n            vars,\r\n            bnds: { type: glpk.GLP_UP, ub: 0, lb: NaN },\r\n          });\r\n\r\n          objectiveVars = vars.map<Var>((v) => ({\r\n            name: v.name,\r\n            coef: v.coef * Math.pow(MAXIMIZE_OBJECTIVE_WEIGHT, outputInfo.value),\r\n          }));\r\n\r\n        } else {\r\n          model.subjectTo.push({\r\n            name: `${itemKey} final product constraint`,\r\n            vars,\r\n            bnds: { type: glpk.GLP_UP, ub: -outputInfo.value, lb: NaN },\r\n          });\r\n        }\r\n      }\r\n\r\n      else {\r\n        model.subjectTo.push({\r\n          name: `${itemKey} intermediates constraint`,\r\n          vars,\r\n          bnds: { type: glpk.GLP_UP, ub: 0, lb: NaN },\r\n        });\r\n      }\r\n\r\n      objectiveVars.forEach((v) => {\r\n        const existingVar = model.objective.vars.find((ov) => ov.name === v.name);\r\n        if (existingVar) {\r\n          existingVar.coef += v.coef;\r\n        } else {\r\n          model.objective.vars.push(v);\r\n        }\r\n      });\r\n    }\r\n\r\n    const solution = await glpk.solve(model, { msglev: glpk.GLP_MSG_OFF });\r\n    if (solution.result.status !== glpk.GLP_OPT) {\r\n      throw new Error(\"NO POSSIBLE SOLUTION\");\r\n    }\r\n\r\n    const result: ProductionSolution = {};\r\n    Object.entries(solution.result.vars).forEach(([key, val]) => {\r\n      if (Math.abs(val) > EPSILON) {\r\n        result[key] = val;\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n\r\n  private generateProductionGraph(productionSolution: ProductionSolution): ProductionGraph {\r\n    const itemProductionTotals: ItemProductionTotals = {};\r\n    const graph: ProductionGraph = {\r\n      nodes: {},\r\n      edges: [],\r\n    };\r\n\r\n    for (const [recipeKey, multiplier] of Object.entries(productionSolution)) {\r\n      const recipeInfo = recipes[recipeKey];\r\n\r\n      for (const product of recipeInfo.products) {\r\n        const amount = multiplier * product.perMinute;\r\n        if (!itemProductionTotals[product.itemClass]) {\r\n          itemProductionTotals[product.itemClass] = {\r\n            producedBy: [],\r\n            usedBy: [],\r\n          };\r\n        }\r\n        itemProductionTotals[product.itemClass].producedBy.push({ recipeKey, amount });\r\n      }\r\n\r\n      for (const ingredient of recipeInfo.ingredients) {\r\n        const amount = multiplier * ingredient.perMinute;\r\n        if (!itemProductionTotals[ingredient.itemClass]) {\r\n          itemProductionTotals[ingredient.itemClass] = {\r\n            producedBy: [],\r\n            usedBy: [],\r\n          };\r\n        }\r\n        itemProductionTotals[ingredient.itemClass].usedBy.push({ recipeKey, amount });\r\n      }\r\n\r\n      graph.nodes[recipeKey] = {\r\n        id: nanoid(),\r\n        key: recipeKey,\r\n        type: NODE_TYPE.RECIPE,\r\n        multiplier,\r\n      };\r\n    }\r\n\r\n    for (const [itemKey, productionTotals] of Object.entries(itemProductionTotals)) {\r\n      const { producedBy, usedBy } = productionTotals;\r\n      let i = 0, j = 0;\r\n      nextDemand:\r\n      while (i < usedBy.length) {\r\n        const usageInfo = usedBy[i];\r\n        const usageNode = graph.nodes[usageInfo.recipeKey];\r\n\r\n        while (j < producedBy.length) {\r\n          const productionInfo = producedBy[j];\r\n          const productionNode = graph.nodes[productionInfo.recipeKey];\r\n\r\n          if (productionInfo.amount < EPSILON) {\r\n            j++\r\n            continue;\r\n          }\r\n\r\n          if (usageInfo.amount <= productionInfo.amount) {\r\n            graph.edges.push({\r\n              key: itemKey,\r\n              from: productionNode.id,\r\n              to: usageNode.id,\r\n              productionRate: usageInfo.amount,\r\n            });\r\n            productionInfo.amount -= usageInfo.amount;\r\n            usageInfo.amount = 0;\r\n            i++;\r\n            continue nextDemand;\r\n          } else {\r\n            graph.edges.push({\r\n              key: itemKey,\r\n              from: productionNode.id,\r\n              to: usageNode.id,\r\n              productionRate: productionInfo.amount,\r\n            });\r\n            usageInfo.amount -= productionInfo.amount;\r\n            productionInfo.amount = 0;\r\n          }\r\n          j++;\r\n        }\r\n        break;\r\n      }\r\n\r\n      while (i < usedBy.length) {\r\n        const usageInfo = usedBy[i];\r\n        const usageNode = graph.nodes[usageInfo.recipeKey];\r\n        if (usageInfo.amount > EPSILON && this.inputs[itemKey]) {\r\n          let itemNode = graph.nodes[itemKey];\r\n          if (!itemNode) {\r\n            const inputInfo = this.inputs[itemKey];\r\n            itemNode = {\r\n              id: nanoid(),\r\n              key: itemKey,\r\n              type: inputInfo.type,\r\n              multiplier: usageInfo.amount,\r\n            };\r\n            graph.nodes[itemKey] = itemNode;\r\n          } else {\r\n            itemNode.multiplier += usageInfo.amount;\r\n          }\r\n          graph.edges.push({\r\n            key: itemKey,\r\n            from: itemNode.id,\r\n            to: usageNode.id,\r\n            productionRate: usageInfo.amount,\r\n          });\r\n          usageInfo.amount = 0;\r\n        }\r\n        i++;\r\n      }\r\n\r\n      while (j < producedBy.length) {\r\n        const productionInfo = producedBy[j];\r\n        const productionNode = graph.nodes[productionInfo.recipeKey];\r\n        if (productionInfo.amount > EPSILON) {\r\n          let itemNode = graph.nodes[itemKey];\r\n          if (!itemNode) {\r\n            itemNode = {\r\n              id: nanoid(),\r\n              key: itemKey,\r\n              type: this.outputs[itemKey] ? NODE_TYPE.FINAL_PRODUCT : NODE_TYPE.SIDE_PRODUCT,\r\n              multiplier: productionInfo.amount\r\n            };\r\n            graph.nodes[itemKey] = itemNode;\r\n          } else {\r\n            itemNode.multiplier += productionInfo.amount;\r\n          }\r\n          graph.edges.push({\r\n            key: itemKey,\r\n            from: productionNode.id,\r\n            to: itemNode.id,\r\n            productionRate: productionInfo.amount,\r\n          });\r\n          productionInfo.amount = 0;\r\n        }\r\n        j++;\r\n      }\r\n    }\r\n\r\n    return graph;\r\n  }\r\n}\r\n","import React, { useMemo } from 'react';\r\nimport { nanoid } from 'nanoid';\r\nimport Cytoscape, { Stylesheet } from 'cytoscape';\r\nimport klay from 'cytoscape-klay';\r\nimport GraphVisualizer from 'react-cytoscapejs';\r\nimport { ProductionGraph, GraphNode, GraphEdge, NODE_TYPE } from '../../../../utilities/production-solver';\r\nimport { items, recipes, buildings } from '../../../../data';\r\n\r\nCytoscape.use(klay);\r\n\r\nconst layout = {\r\n  name: 'klay',\r\n  padding: 40,\r\n  klay: {\r\n    direction: 'RIGHT',\r\n    edgeRouting: 'ORTHOGONAL',\r\n    nodePlacement: 'LINEAR_SEGMENTS',\r\n    edgeSpacingFactor: 0.2,\r\n    inLayerSpacingFactor: 0.7,\r\n    spacing: 70,\r\n    thoroughness: 10,\r\n  },\r\n};\r\n\r\nconst stylesheet: Stylesheet[] = [\r\n  {\r\n    selector: 'core',\r\n    style: {\r\n      'active-bg-color': '#000',\r\n      'active-bg-opacity': 0,\r\n      'active-bg-size': 0,\r\n      'selection-box-color': '#000',\r\n      'selection-box-border-color': '#000',\r\n      'selection-box-border-width': 0,\r\n      'selection-box-opacity': 0,\r\n      'outside-texture-bg-color': '#000',\r\n      'outside-texture-bg-opacity': 0,\r\n    },\r\n  },\r\n  {\r\n    selector: 'node',\r\n    style: {\r\n      'label': 'data(label)',\r\n      'text-valign': 'center',\r\n      'text-halign': 'center',\r\n      'height': '30px',\r\n      'width': '140px',\r\n      'text-max-width': '160px',\r\n      'padding-top': '20px',\r\n      'overlay-padding': 0,\r\n      'overlay-opacity': 0,\r\n      'text-wrap': 'wrap',\r\n      'font-size': '14px',\r\n    },\r\n  },\r\n  {\r\n    selector: 'edge',\r\n    style: {\r\n      'label': 'data(label)',\r\n      'width': 1,\r\n      'curve-style': 'bezier',\r\n      'control-point-step-size': 100,\r\n      'target-arrow-shape': 'triangle-backcurve',\r\n      'arrow-scale': 1.2,\r\n      'overlay-padding': 0,\r\n      'overlay-opacity': 0,\r\n      'text-wrap': 'wrap',\r\n      'font-size': '13px',\r\n    },\r\n  },\r\n  {\r\n    selector: 'edge.loop',\r\n    style: {\r\n      'loop-direction': '180deg',\r\n      'loop-sweep': '-40deg',\r\n      'edge-distances': 'node-position',\r\n      'source-endpoint': '-15% 50%',\r\n      'target-endpoint': '15% 50%',\r\n    },\r\n  },\r\n  {\r\n    selector: 'node.item-shape',\r\n    style: {\r\n      'shape': 'ellipse',\r\n    },\r\n  },\r\n  {\r\n    selector: 'node.recipe-shape',\r\n    style: {\r\n      'shape': 'round-rectangle',\r\n    },\r\n  },\r\n  {\r\n    selector: 'node.final-product',\r\n    style: {\r\n      'background-color': '#61e873',\r\n    },\r\n  },\r\n  {\r\n    selector: 'node.side-product',\r\n    style: {\r\n      'background-color': '#e1e861',\r\n    },\r\n  },\r\n  {\r\n    selector: 'node.input',\r\n    style: {\r\n      'background-color': '#e86161',\r\n    },\r\n  },\r\n  {\r\n    selector: 'node.hand-gathered',\r\n    style: {\r\n      'background-color': '#9061e8',\r\n    },\r\n  },\r\n  {\r\n    selector: 'node.resource',\r\n    style: {\r\n      'background-color': '#e8a761',\r\n    },\r\n  },\r\n  {\r\n    selector: 'node.recipe',\r\n    style: {\r\n      'background-color': '#61c2e8',\r\n    },\r\n  },\r\n];\r\n\r\nconst NODE_COLOR_CLASS = {\r\n  [NODE_TYPE.FINAL_PRODUCT]: 'final-product',\r\n  [NODE_TYPE.SIDE_PRODUCT]: 'side-product',\r\n  [NODE_TYPE.INPUT_ITEM]: 'input',\r\n  [NODE_TYPE.HAND_GATHERED_RESOURCE]: 'hand-gathered',\r\n  [NODE_TYPE.RESOURCE]: 'resource',\r\n  [NODE_TYPE.RECIPE]: 'recipe',\r\n};\r\n\r\n\r\nfunction truncateFloat(n: number) {\r\n  return n.toFixed(4).replace(/\\.?0+$/, '');\r\n}\r\n\r\nfunction getNodeLabel(node: GraphNode) {\r\n  let label = '';\r\n  let amountText = '';\r\n  if (node.type === NODE_TYPE.RECIPE) {\r\n    const recipe = recipes[node.key];\r\n    label = recipe.name;\r\n    amountText = `${truncateFloat(node.multiplier)}x ${buildings[recipe.producedIn].name}`;\r\n  } else {\r\n    const item = items[node.key];\r\n    label = item.name;\r\n    amountText = `${truncateFloat(node.multiplier)} / min`;\r\n  }\r\n  return `${label}\\n${amountText}`;\r\n}\r\n\r\nfunction getEdgeLabel(edge: GraphEdge) {\r\n  const item = items[edge.key];\r\n  const label = item.name;\r\n  const amountText = `${truncateFloat(edge.productionRate)} / min`;\r\n  return `${label}\\n${amountText}`;\r\n}\r\n\r\ninterface Props {\r\n  activeGraph: ProductionGraph | null,\r\n  errorMessage: string,\r\n}\r\n\r\nconst ProductionGraphTab = (props: Props) => {\r\n  const { activeGraph, errorMessage } = props;\r\n\r\n  const graphProps = useMemo<any>(() => {\r\n    if (activeGraph == null) {\r\n      return null;\r\n    }\r\n\r\n    const key = nanoid();\r\n    const elements: any[] = [];\r\n\r\n    Object.entries(activeGraph.nodes).forEach(([key, node]) => {\r\n      elements.push({\r\n        group: 'nodes',\r\n        data: {\r\n          id: node.id,\r\n          label: getNodeLabel(node),\r\n        },\r\n        classes: [node.type === NODE_TYPE.RECIPE ? 'recipe-shape' : 'item-shape', NODE_COLOR_CLASS[node.type]],\r\n      });\r\n    });\r\n    activeGraph.edges.forEach((edge) => {\r\n      elements.push({\r\n        group: 'edges',\r\n        data: {\r\n          source: edge.from,\r\n          target: edge.to,\r\n          label: getEdgeLabel(edge),\r\n        },\r\n        classes: edge.from === edge.to ? ['loop'] : undefined,\r\n      });\r\n    });\r\n    \r\n    return { key, elements };\r\n  }, [activeGraph]);\r\n\r\n  return (\r\n    <div style={{ height: '900px', display: 'flex', flexDirection:'column', alignItems: 'center', justifyContent: 'center', border: '1px solid black' }}>\r\n      {\r\n        graphProps != null\r\n        ? (\r\n            <GraphVisualizer\r\n              key={graphProps.key}\r\n              elements={graphProps.elements}\r\n              layout={layout}\r\n              stylesheet={stylesheet}\r\n              boxSelectionEnabled={false}\r\n              autounselectify={true}\r\n              wheelSensitivity={0.1}\r\n              maxZoom={3.0}\r\n              minZoom={0.1}\r\n              style={{ height: '100%', width: '100%', overflow: 'hidden' }}\r\n            />\r\n        )\r\n        : (\r\n          <>\r\n            <div>\r\n              No graph available\r\n            </div>\r\n            {errorMessage\r\n              ? (\r\n                <div>\r\n                  {`\\nERROR: ${errorMessage}`}\r\n                </div>\r\n              )\r\n              : null}\r\n          </>\r\n        )\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProductionGraphTab;\r\n","import React from 'react';\r\nimport { Container, Header, Divider } from 'semantic-ui-react';\r\n\r\nconst ReportTab = () => {\r\n  return (\r\n    <div>\r\n      Coming soon...\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReportTab;\r\n","import React, { useCallback, useEffect, useState } from 'react';\r\nimport { Container, Menu, Button, Checkbox } from 'semantic-ui-react';\r\nimport ProductionGraphTab from './ProductionGraphTab';\r\nimport ReportTab from './ReportTab';\r\nimport { ProductionSolver, SolverResults } from '../../../utilities/production-solver';\r\nimport { useProductionContext } from '../../../contexts/production';\r\nimport { usePrevious } from '../../../hooks/usePrevious';\r\n\r\nconst PlannerResults = () => {\r\n  const [activeTab, setActiveTab] = useState('production-graph');\r\n  const [autoCalc, setAutoCalc] = useState(true);\r\n  const [loaded, setLoaded] = useState(false);\r\n  const [solverResults, setSolverResults] = useState<SolverResults | null>(null);\r\n  const ctx = useProductionContext();\r\n  const prevState = usePrevious(ctx.state);\r\n\r\n  const handleCalculateFactory = useCallback(async () => {\r\n    try {\r\n      const solver = new ProductionSolver(ctx.state);\r\n      const results = await solver.exec();\r\n      setSolverResults((prevState) => {\r\n        if (!prevState || prevState.timestamp < results.timestamp) {\r\n          return results;\r\n        }\r\n        return prevState;\r\n      });\r\n    } catch (e: any) {\r\n      setSolverResults({\r\n        productionGraph: null,\r\n        timestamp: performance.now(),\r\n        error: e.message,\r\n      });\r\n    }\r\n  }, [ctx.state]);\r\n\r\n  function handleSetTab(e: any, data: any) {\r\n    setActiveTab(data.name);\r\n  }\r\n\r\n  function renderTab() {\r\n    switch (activeTab) {\r\n      case 'production-graph':\r\n        return <ProductionGraphTab activeGraph={solverResults?.productionGraph || null} errorMessage={solverResults?.error || ''} />\r\n      case 'report':\r\n        return <ReportTab />\r\n      default:\r\n        return null;\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!loaded) {\r\n      handleCalculateFactory();\r\n      setLoaded(true);\r\n    } else if (autoCalc && prevState !== ctx.state) {\r\n      handleCalculateFactory();\r\n    }\r\n  }, [autoCalc, ctx.state, handleCalculateFactory, loaded, prevState]);\r\n\r\n  return (\r\n    <Container fluid>\r\n      <Menu pointing secondary attached=\"top\">\r\n        <Menu.Item\r\n          name='production-graph'\r\n          active={activeTab === 'production-graph'}\r\n          onClick={handleSetTab}\r\n        >\r\n          Production Graph\r\n        </Menu.Item>\r\n        <Menu.Item\r\n          name='report'\r\n          active={activeTab === 'report'}\r\n          onClick={handleSetTab}\r\n        >\r\n          Report\r\n        </Menu.Item>\r\n      </Menu>\r\n      <div style={{ padding: '20px 0px' }}>\r\n        <Button primary onClick={handleCalculateFactory} disabled={autoCalc} style={{ marginBottom: '10px', marginRight: '15px' }}>\r\n          Calculate\r\n        </Button>\r\n        <Checkbox\r\n          label='Auto-calculate (turn this off if changing options is slow)'\r\n          toggle\r\n          checked={autoCalc}\r\n          onChange={(e, { checked }) => { setAutoCalc(!!checked); }}\r\n        />\r\n        {renderTab()}\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default PlannerResults;\r\n","import React from 'react';\r\nimport seedrandom from 'seedrandom';\r\nimport { Container, Header, Grid } from 'semantic-ui-react';\r\nimport PlannerOptions from './PlannerOptions';\r\nimport PlannerResults from './PlannerResults';\r\nimport { ProductionProvider } from '../../contexts/production';\r\n\r\nconst ONE_HOUR = 1000 * 60 * 60;\r\nconst seed = Math.floor(new Date().getTime() / ONE_HOUR);\r\nconst rng = seedrandom(String(seed));\r\n\r\nconst TIPS = [\r\n  'Pet the lizard doggo!',\r\n  'Get back to work!',\r\n  'Update 5 now available!',\r\n  'Arachnophobia mode enabled.',\r\n  'FICSIT does not waste.',\r\n  'Linear algebra!',\r\n  'Do not pet the spiders.',\r\n  'BEAMS.',\r\n  'Just 5 more minutes...',\r\n  'Thanks, Jace. Helps a lot!',\r\n];\r\n\r\nconst TIP_INDEX = Math.floor(rng() * TIPS.length);\r\nconst TIP = `FICSIT Tip #${TIP_INDEX}: ${TIPS[TIP_INDEX]}`\r\n\r\nconst ProductionPlanner = () => {\r\n  return (\r\n    <>\r\n      <Header as='h1'>Production Planner</Header>\r\n      <p>\r\n        {TIP}\r\n      </p>\r\n      <Container fluid>\r\n        <ProductionProvider>\r\n          <Factory />\r\n        </ProductionProvider>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProductionPlanner;\r\n\r\nconst Factory = () => {\r\n  return (\r\n    <>\r\n      <Grid columns={2}>\r\n        <Grid.Column width={5}>\r\n          <PlannerOptions />\r\n        </Grid.Column>\r\n        <Grid.Column width={11}>\r\n          <PlannerResults />\r\n        </Grid.Column>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Container, Menu } from 'semantic-ui-react';\r\nimport ProductionPlanner from '../ProductionPlanner';\r\n\r\nconst Main = () => {\r\n  return (\r\n    <Container fluid>\r\n      <Menu fixed='top' size=\"massive\">\r\n        <Container fluid>\r\n          <Menu.Item as='a' header >\r\n            Yet Another Factory Planner\r\n          </Menu.Item>\r\n        </Container>\r\n      </Menu>\r\n      <Container fluid style={{ padding: '0px 50px', paddingTop: '70px' }}>\r\n        <ProductionPlanner />\r\n      </Container>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import React from 'react';\nimport Main from './containers/Main';\n\nfunction App() {\n  return (\n    <Main />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-less/semantic.less';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './utilities/debug/reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// reportWebVitals(console.log);\n"],"sourceRoot":""}