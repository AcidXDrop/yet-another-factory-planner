{"version":3,"sources":["data/index.ts","contexts/production/index.tsx","containers/ProductionPlanner/PlannerOptions/ProductionTab/index.tsx","containers/ProductionPlanner/PlannerOptions/InputsTab/index.tsx","containers/ProductionPlanner/PlannerOptions/RecipesTab/index.tsx","containers/ProductionPlanner/PlannerOptions/index.tsx","components/GraphVis/index.tsx","utilities/production-calculator/index.ts","containers/ProductionPlanner/PlannerResults/GraphTab/index.tsx","containers/ProductionPlanner/PlannerResults/BuildingsTab/index.tsx","containers/ProductionPlanner/PlannerResults/index.tsx","containers/ProductionPlanner/index.tsx","containers/Main/index.tsx","App.tsx","index.tsx"],"names":["items","itemsRaw","itemRecipeMap","itemRecipeMapRaw","uncraftableItems","uncraftableItemsRaw","recipes","recipesRaw","resources","resourcesRaw","buildings","buildingsRaw","ProductionContext","createContext","useProductionContext","ctx","useContext","Error","displayName","ORDERED_RESOURCES","getInitialInputResources","Object","entries","map","key","data","value","unlimited","String","maxExtraction","itemKey","sort","a","b","aIndex","findIndex","r","Infinity","bIndex","getInitialAllowedRecipes","recipeMap","forEach","isAlternate","reducer","state","action","type","name","newProductionItems","productionItems","nanoid","mode","filter","i","newInputItems","inputItems","newInputResources","inputResources","newAllowedRecipes","allowedRecipes","active","keys","alternates","ProductionProvider","children","useReducer","dispatch","Provider","itemOptions","text","modeOptions","ProductionTab","Grid","Row","Column","style","flex","Dropdown","fluid","placeholder","selection","search","clearable","options","onChange","e","Input","className","min","step","disabled","width","minWidth","Button","icon","negative","onClick","Icon","columns","primary","InputsTab","Header","labelPosition","Checkbox","fontWeight","label","checked","Divider","display","alignItems","cleanAltNameRegex","baseRecipes","altRecipes","push","replace","RecipesTab","useState","altRecipeSearch","setAltRecipeSearch","baseRecipeSearch","setBaseRecipeSearch","renderRecipeList","useCallback","recipeList","component","List","Item","renderedBaseRecipes","useMemo","renderedAltRecipes","renderRecipeOptions","searchValue","setSearchValue","rendered","toLowerCase","includes","divided","PlannerOptions","activeTab","setActiveTab","handleSetTab","Container","Menu","pointing","secondary","attached","widths","padding","renderTab","useSealedState","diff","current","next","field","nextIds","Set","item","removed","has","unchanged","intersectionWith","isEqual","updated","differenceWith","added","defaultOptions","physics","stabilization","autoResize","edges","smooth","color","arrows","to","enabled","scaleFactor","GraphVis","forwardRef","ref","graph","events","propOptions","props","container","useRef","DataSet","nodes","initialOptions","prevNodes","prevEdges","useEffect","remove","add","update","network","setNetwork","useImperativeHandle","eventName","callback","on","off","setOptions","error","mergedOptions","defaultsDeep","cloneDeep","newNetwork","Network","destroy","NODE_TYPE","ProductionGraphAlgorithm","inputs","outputs","itemEvaluations","currentId","this","amount","Number","maxResourceAmount","targets","productionRate","evalItemScoreBounds","solve","length","iterations","noUpdates","recipeKeys","itemEval","scoreBound","recipeKey","recipe","targetProduct","products","find","p","itemClass","recipeEval","ingredients","ingredient","score","perMinute","initialGraph","initialNode","id","nextId","multiplier","buildItemTree","parentNode","depth","outputTargets","targetRate","node","from","bestRecipe","getBestRecipe","recipeInfo","primaryProduct","sideProducts","productNode","sideProduct","itemRecipes","itemRecipe","graphOptions","layout","hierarchical","direction","sortMethod","shakeTowards","levelSeparation","nodeSpacing","truncateFloat","n","toFixed","getNodeLabel","amountText","producedIn","val","edge","getEdgeLabel","GraphTab","activeGraph","errorMessage","graphData","shape","heightConstraint","widthConstraint","height","flexDirection","justifyContent","border","BuildingsTab","PlannerResults","setGraph","setErrorMessage","alg","graphResults","exec","message","marginBottom","ProductionPlanner","as","Factory","Segment","size","Main","fixed","header","paddingTop","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.50ccf2a3.chunk.js","sourcesContent":["import itemsRaw from './json/items.json';\r\nimport itemRecipeMapRaw from './json/itemRecipeMap.json';\r\nimport uncraftableItemsRaw from './json/uncraftableItems.json';\r\nimport recipesRaw from './json/recipes.json';\r\nimport resourcesRaw from './json/resources.json';\r\nimport buildingsRaw from './json/buildings.json';\r\n\r\nexport type ItemRate = {\r\n  itemClass: string,\r\n  perMinute: number,\r\n}\r\n\r\nexport type ItemInfo = {\r\n  slug: string,\r\n  name: string,\r\n  sinkPoints: number,\r\n};\r\n\r\nexport type RecipeInfo = {\r\n  slug: string,\r\n  name: string,\r\n  isAlternate: boolean,\r\n  ingredients: ItemRate[],\r\n  products: ItemRate[],\r\n  producedIn: string,\r\n};\r\n\r\nexport type ResourceInfo = {\r\n  itemClass: string,\r\n  maxExtraction: number | null,\r\n  relativeValue: number,\r\n};\r\n\r\nexport type BuildingsInfo = {\r\n  slug: string,\r\n  name: string,\r\n  power: number,\r\n};\r\n\r\nexport type ItemMap = { [key in keyof typeof itemsRaw]: ItemInfo } & { [key: string]: ItemInfo };\r\nexport type ItemRecipeMap = { [key in keyof typeof itemRecipeMapRaw]: string[] } & { [key: string]: string[] };\r\nexport type UncraftableItemsMap = { [key in keyof typeof uncraftableItemsRaw]: string } & { [key: string]: string };\r\nexport type RecipeMap = { [key in keyof typeof recipesRaw]: RecipeInfo } & { [key: string]: RecipeInfo };\r\nexport type ResourceMap = { [key in keyof typeof resourcesRaw]: ResourceInfo } & { [key: string]: ResourceInfo };\r\nexport type BuildingMap = { [key in keyof typeof buildingsRaw]: BuildingsInfo } & { [key: string]: BuildingsInfo };\r\n\r\nexport const items = (itemsRaw as ItemMap);\r\nexport const itemRecipeMap = (itemRecipeMapRaw as ItemRecipeMap);\r\nexport const uncraftableItems = (uncraftableItemsRaw as UncraftableItemsMap);\r\nexport const recipes = (recipesRaw as RecipeMap);\r\nexport const resources = (resourcesRaw as ResourceMap);\r\nexport const buildings = (buildingsRaw as BuildingMap);\r\n","import React, { createContext, useContext, useReducer } from 'react';\r\nimport { nanoid } from 'nanoid';\r\nimport { resources, recipes } from '../../data'\r\n\r\n// TYPES\r\nexport type ProductionItemOptions = {\r\n  key: string,\r\n  itemKey: string,\r\n  mode: 'rate-target'|'building-target'|'maximize',\r\n  value: string,\r\n};\r\n\r\nexport type InputItemOptions = {\r\n  key: string,\r\n  itemKey: string,\r\n  value: string,\r\n  unlimited: boolean,\r\n};\r\n\r\nexport type RecipeMap = {\r\n  [key: string]: boolean,\r\n};\r\n\r\nexport type FactoryOptions = {\r\n  key: string,\r\n  name: string,\r\n  productionItems: ProductionItemOptions[],\r\n  inputItems: InputItemOptions[],\r\n  inputResources: InputItemOptions[],\r\n  allowedRecipes: RecipeMap,\r\n};\r\n\r\nexport type ProductionContextType = {\r\n  state: FactoryOptions,\r\n  dispatch: React.Dispatch<FactoryAction>,\r\n}\r\n\r\n\r\n// CONTEXT\r\nexport const ProductionContext = createContext<ProductionContextType | null>(null);\r\nProductionContext.displayName = 'ProductionContext';\r\n\r\n\r\n// HELPER HOOK\r\nexport function useProductionContext() {\r\n  const ctx = useContext(ProductionContext);\r\n  if (!ctx) {\r\n    throw new Error('ProductionContext is null');\r\n  }\r\n  return ctx;\r\n}\r\n\r\n\r\n// DEFAULTS\r\nfunction getDefaultProductionItem(): ProductionItemOptions {\r\n  return ({\r\n    key: nanoid(),\r\n    itemKey: '',\r\n    mode: 'rate-target',\r\n    value: '10',\r\n  });\r\n}\r\n\r\nfunction getDefaultInputItem(): InputItemOptions {\r\n  return ({\r\n    key: nanoid(),\r\n    itemKey: '',\r\n    value: '0',\r\n    unlimited: false,\r\n  });\r\n}\r\n\r\nconst ORDERED_RESOURCES = [\r\n  'Desc_OreIron_C',\r\n  'Desc_OreCopper_C',\r\n  'Desc_Stone_C',\r\n  'Desc_Coal_C',\r\n  'Desc_OreGold_C',\r\n  'Desc_RawQuartz_C',\r\n  'Desc_Sulfur_C',\r\n  'Desc_LiquidOil_C',\r\n  'Desc_OreBauxite_C',\r\n  'Desc_OreUranium_C',\r\n  'Desc_NitrogenGas_C',\r\n  'Desc_Water_C',\r\n];\r\nfunction getInitialInputResources(): InputItemOptions[] {\r\n  return Object.entries(resources)\r\n    .map(([key, data]) => {\r\n      let value = '0';\r\n      let unlimited = false;\r\n      if (key === 'Desc_Water_C') {\r\n        unlimited = true;\r\n      } else {\r\n        value = String(data.maxExtraction);\r\n      }\r\n      return {\r\n        key: key,\r\n        itemKey: key,\r\n        value,\r\n        unlimited,\r\n      };\r\n    })\r\n    .sort((a, b) => {\r\n      let aIndex = ORDERED_RESOURCES.findIndex((r) => r === a.itemKey);\r\n      if (aIndex === -1) aIndex = Infinity;\r\n      let bIndex = ORDERED_RESOURCES.findIndex((r) => r === b.itemKey);\r\n      if (bIndex === -1) bIndex = Infinity;\r\n      return aIndex < bIndex ? -1 : 1;\r\n    });\r\n}\r\n\r\nfunction getInitialAllowedRecipes(): RecipeMap {\r\n  const recipeMap: RecipeMap = {};\r\n  Object.entries(recipes).forEach(([key, data]) => {\r\n    recipeMap[key] = !data.isAlternate;\r\n  });\r\n  return recipeMap;\r\n}\r\n\r\nfunction getInitialState(): FactoryOptions {\r\n  return {\r\n    key: nanoid(),\r\n    name: 'New Factory',\r\n    productionItems: [],\r\n    inputItems: [],\r\n    inputResources: getInitialInputResources(),\r\n    allowedRecipes: getInitialAllowedRecipes(),\r\n  };\r\n}\r\n\r\n\r\n// REDUCER\r\nexport type FactoryAction = \r\n  | { type: 'SET_NAME', name: string }\r\n  | { type: 'ADD_PRODUCTION_ITEM' }\r\n  | { type: 'DELETE_PRODUCTION_ITEM', key: string }\r\n  | { type: 'UPDATE_PRODUCTION_ITEM', data: ProductionItemOptions }\r\n  | { type: 'ADD_INPUT_ITEM' }\r\n  | { type: 'DELETE_INPUT_ITEM', key: string }\r\n  | { type: 'UPDATE_INPUT_ITEM', data: InputItemOptions }\r\n  | { type: 'UPDATE_INPUT_RESOURCE', data: InputItemOptions }\r\n  | { type: 'SET_RESOURCES_TO_MAP_LIMITS' }\r\n  | { type: 'SET_RESOURCES_TO_0' }\r\n  | { type: 'SET_RECIPE_ACTIVE', key: string, active: boolean }\r\n  | { type: 'MASS_SET_RECIPES_ACTIVE', alternates: boolean, active: boolean };\r\n\r\nfunction reducer(state: FactoryOptions, action: FactoryAction): FactoryOptions {\r\n  switch (action.type) {\r\n    case 'SET_NAME': {\r\n      return { ...state, name: action.name };\r\n    }\r\n    case 'ADD_PRODUCTION_ITEM': {\r\n      const newProductionItems = [\r\n        ...state.productionItems,\r\n        getDefaultProductionItem(),\r\n      ];\r\n      return { ...state, productionItems: newProductionItems };\r\n    }\r\n    case 'DELETE_PRODUCTION_ITEM': {\r\n      const newProductionItems = state.productionItems\r\n        .filter((i) => i.key !== action.key);\r\n      return { ...state, productionItems: newProductionItems };\r\n    }\r\n    case 'UPDATE_PRODUCTION_ITEM': {\r\n      const newProductionItems = state.productionItems\r\n        .map((i) => i.key === action.data.key ? action.data : i);\r\n      return { ...state, productionItems: newProductionItems };\r\n    }\r\n    case 'ADD_INPUT_ITEM': {\r\n      const newInputItems = [\r\n        ...state.inputItems,\r\n        getDefaultInputItem(),\r\n      ];\r\n      return { ...state, inputItems: newInputItems };\r\n    }\r\n    case 'DELETE_INPUT_ITEM': {\r\n      const newInputItems = state.inputItems\r\n        .filter((i) => i.key !== action.key);\r\n      return { ...state, inputItems: newInputItems };\r\n    }\r\n    case 'UPDATE_INPUT_ITEM': {\r\n      const newInputItems = state.inputItems\r\n        .map((i) => i.key === action.data.key ? action.data : i);\r\n      return { ...state, inputItems: newInputItems };\r\n    }\r\n    case 'UPDATE_INPUT_RESOURCE': {\r\n      const newInputResources = state.inputResources\r\n        .map((i) => i.key === action.data.key ? action.data : i);\r\n      return { ...state, inputResources: newInputResources };\r\n    }\r\n    case 'SET_RESOURCES_TO_MAP_LIMITS': {\r\n      const newInputResources = getInitialInputResources();\r\n      return { ...state, inputResources: newInputResources };\r\n    }\r\n    case 'SET_RESOURCES_TO_0': {\r\n      const newInputResources = state.inputResources\r\n        .map((data) => ({ ...data, value: '0', unlimited: false }));\r\n      return { ...state, inputResources: newInputResources };\r\n    }\r\n    case 'SET_RECIPE_ACTIVE': {\r\n      const newAllowedRecipes = { ...state.allowedRecipes };\r\n      newAllowedRecipes[action.key] = action.active;\r\n      return { ...state, allowedRecipes: newAllowedRecipes };\r\n    }\r\n    case 'MASS_SET_RECIPES_ACTIVE': {\r\n      const newAllowedRecipes = { ...state.allowedRecipes };\r\n      Object.keys(newAllowedRecipes).forEach((key) => {\r\n        if (action.alternates && recipes[key].isAlternate) {\r\n          newAllowedRecipes[key] = action.active;\r\n        } else if (!action.alternates && !recipes[key].isAlternate) {\r\n          newAllowedRecipes[key] = action.active;\r\n        }\r\n      })\r\n      return { ...state, allowedRecipes: newAllowedRecipes };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n\r\n// PROVIDER\r\ntype PropTypes = { children: React.ReactNode };\r\nexport const ProductionProvider = ({ children }: PropTypes) => {\r\n  const [state, dispatch] = useReducer(reducer, getInitialState());\r\n\r\n  return (\r\n    <ProductionContext.Provider value={{ state, dispatch }}>\r\n      {children}\r\n    </ProductionContext.Provider>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Button, Dropdown, Input, Grid, Icon } from 'semantic-ui-react';\r\nimport { items, itemRecipeMap } from '../../../../data';\r\nimport { useProductionContext } from '../../../../contexts/production';\r\n\r\nconst itemOptions = Object.keys(itemRecipeMap)\r\n  .map((key) => ({\r\n    value: key,\r\n    text: items[key].name,\r\n  }))\r\n  .sort((a, b) => {\r\n    return a.text > b.text ? 1 : -1;\r\n  });\r\n\r\nconst modeOptions = [\r\n  { value: 'rate-target', text: 'Items Per Min' },\r\n  { value: 'building-target', text: 'Assembly Buildings' },\r\n  { value: 'maximize', text: 'Maximize Output' },\r\n];\r\n\r\nconst ProductionTab = () => {\r\n  const ctx = useProductionContext();\r\n\r\n  function renderItemInputs() {\r\n    return ctx.state.productionItems.map((data) => (\r\n      <Grid.Row key={data.key}>\r\n        <Grid.Column style={{ flex: '1 1 auto' }}>\r\n          <Dropdown\r\n            fluid\r\n            placeholder=\"Select an item\"\r\n            selection\r\n            search\r\n            clearable\r\n            options={itemOptions}\r\n            value={data.itemKey ? data.itemKey : ''}\r\n            onChange={(e, { value }) => {\r\n              ctx.dispatch({\r\n                type: 'UPDATE_PRODUCTION_ITEM',\r\n                data: { ...data, itemKey: (value as string) },\r\n              });\r\n            }}\r\n          />\r\n        </Grid.Column>\r\n        <Grid.Column style={{ flex: '0 0 290px' }}>\r\n          <Input\r\n            className='no-spinner'\r\n            type='number'\r\n            min='0'\r\n            step='1'\r\n            fluid\r\n            value={data.value}\r\n            onChange={(e, { value }) => {\r\n              ctx.dispatch({\r\n                type: 'UPDATE_PRODUCTION_ITEM',\r\n                data: { ...data, value: value },\r\n              });\r\n            }}\r\n            action\r\n          >\r\n            <input disabled={data.mode === 'maximize'} />\r\n            <Dropdown\r\n              style={{ width: '170px', minWidth: '0px' }}\r\n              selection\r\n              options={modeOptions}\r\n              value={data.mode}\r\n              onChange={(e, { value }) => {\r\n                ctx.dispatch({\r\n                  type: 'UPDATE_PRODUCTION_ITEM',\r\n                  data: { ...data, mode: (value as any) },\r\n                });\r\n              }}\r\n            />\r\n          </Input>\r\n        </Grid.Column>\r\n        <Grid.Column style={{ flex: '0 0 70px' }}>\r\n          <Button\r\n            icon\r\n            negative\r\n            onClick={() => { ctx.dispatch({ type: 'DELETE_PRODUCTION_ITEM', key: data.key }); }}\r\n          >\r\n            <Icon name='trash alternate outline' />\r\n          </Button>\r\n        </Grid.Column>\r\n      </Grid.Row>\r\n    ));\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <p>\r\n        Select the items you want to produce.\r\n      </p>\r\n      <Grid>\r\n        {renderItemInputs()}\r\n        <Grid.Row columns={1}>\r\n          <Grid.Column>\r\n            <Button\r\n              primary\r\n              onClick={() => { ctx.dispatch({ type: 'ADD_PRODUCTION_ITEM' })}}\r\n            >\r\n              Add Product\r\n            </Button>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProductionTab;\r\n","import React from 'react';\r\nimport { Button, Dropdown, Input, Checkbox, Grid, Icon, Header, Divider } from 'semantic-ui-react';\r\nimport { items, itemRecipeMap } from '../../../../data';\r\nimport { useProductionContext } from '../../../../contexts/production';\r\n\r\nconst itemOptions = Object.keys(itemRecipeMap)\r\n  .map((key) => ({\r\n    value: key,\r\n    text: items[key].name,\r\n  }))\r\n  .sort((a, b) => {\r\n    return a.text > b.text ? 1 : -1;\r\n  });\r\n\r\n\r\nconst InputsTab = () => {\r\n  const ctx = useProductionContext();\r\n\r\n  function renderItemInputs() {\r\n    return ctx.state.inputItems.map((data) => (\r\n      <Grid.Row key={data.key}>\r\n        <Grid.Column style={{ flex: '1 1 auto' }}>\r\n          <Dropdown\r\n            fluid\r\n            placeholder=\"Select an item\"\r\n            selection\r\n            search\r\n            clearable\r\n            options={itemOptions}\r\n            value={data.itemKey ? data.itemKey : ''}\r\n            onChange={(e, { value }) => {\r\n              ctx.dispatch({\r\n                type: 'UPDATE_INPUT_ITEM',\r\n                data: { ...data, itemKey: (value as string) },\r\n              });\r\n            }}\r\n          />\r\n        </Grid.Column>\r\n        <Grid.Column style={{ flex: '0 0 250px' }}>\r\n          <Input\r\n            className='no-spinner'\r\n            type='number'\r\n            min='0'\r\n            step='1'\r\n            fluid\r\n            value={data.value}\r\n            onChange={(e, { value }) => {\r\n              ctx.dispatch({\r\n                type: 'UPDATE_INPUT_ITEM',\r\n                data: { ...data, value: value },\r\n              });\r\n            }}\r\n            labelPosition='right'\r\n          >\r\n            <input disabled={data.unlimited} />\r\n            <Checkbox\r\n              className='label'\r\n              style={{ fontWeight: 'normal' }}\r\n              label='Unlimited'\r\n              checked={data.unlimited}\r\n              onChange={() => {\r\n                ctx.dispatch({\r\n                  type: 'UPDATE_INPUT_ITEM',\r\n                  data: { ...data, unlimited: !data.unlimited },\r\n                });\r\n              }}\r\n            />\r\n          </Input>\r\n        </Grid.Column>\r\n        <Grid.Column style={{ flex: '0 0 70px' }}>\r\n          <Button\r\n            icon\r\n            negative\r\n            onClick={() => { ctx.dispatch({ type: 'DELETE_INPUT_ITEM', key: data.key }); }}\r\n          >\r\n            <Icon name='trash alternate outline' />\r\n          </Button>\r\n        </Grid.Column>\r\n      </Grid.Row>\r\n    ));\r\n  }\r\n\r\n  function renderResourceInputs() {\r\n    return ctx.state.inputResources.map((data) => (\r\n      <Grid.Row key={data.key}>\r\n        <Grid.Column style={{ flex: '0 0 200px', display: 'flex', alignItems: 'center' }}>\r\n          {items[data.itemKey].name}\r\n        </Grid.Column>\r\n        <Grid.Column style={{ flex: '1 1 auto' }}>\r\n          <Input\r\n            className='no-spinner'\r\n            type='number'\r\n            min='0'\r\n            step='1'\r\n            fluid\r\n            value={data.value}\r\n            onChange={(e, { value }) => {\r\n              ctx.dispatch({\r\n                type: 'UPDATE_INPUT_RESOURCE',\r\n                data: { ...data, value: value },\r\n              });\r\n            }}\r\n            labelPosition='right'\r\n          >\r\n            <input disabled={data.unlimited} />\r\n            <Checkbox\r\n              className='label'\r\n              style={{ fontWeight: 'normal' }}\r\n              label='Unlimited'\r\n              checked={data.unlimited}\r\n              onChange={() => {\r\n                ctx.dispatch({\r\n                  type: 'UPDATE_INPUT_RESOURCE',\r\n                  data: { ...data, unlimited: !data.unlimited },\r\n                });\r\n              }}\r\n            />\r\n          </Input>\r\n        </Grid.Column>\r\n      </Grid.Row>\r\n    ));\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Header>Input Items</Header>\r\n      <p>\r\n        Select the items that you already have available and don't need to produce in this factory.\r\n      </p>\r\n      <Grid>\r\n        {renderItemInputs()}\r\n        <Grid.Row>\r\n          <Grid.Column>\r\n            <Button\r\n              primary\r\n              onClick={() => { ctx.dispatch({ type: 'ADD_INPUT_ITEM' }) }}\r\n            >\r\n              Add Input\r\n            </Button>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n      <Divider />\r\n      <Header>Raw Resources</Header>\r\n      <p>\r\n        Select the raw resources that are available to your factory. The default values are set to the map limits.\r\n      </p>\r\n      <Grid>\r\n        <Grid.Row columns={1}>\r\n          <Grid.Column>\r\n            <Button\r\n              primary\r\n              onClick={() => { ctx.dispatch({ type: 'SET_RESOURCES_TO_MAP_LIMITS' }) }}\r\n            >\r\n              Set to Maximum\r\n            </Button>\r\n            <Button\r\n              primary\r\n              onClick={() => { ctx.dispatch({ type: 'SET_RESOURCES_TO_0' }) }}\r\n            >\r\n              Set to 0\r\n            </Button>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n        {renderResourceInputs()}\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default InputsTab;\r\n","import React, { useState, useMemo, useCallback } from 'react';\r\nimport { Button, Input, Checkbox, Grid, Header, List } from 'semantic-ui-react';\r\nimport { recipes } from '../../../../data';\r\nimport { useProductionContext } from '../../../../contexts/production';\r\n\r\nconst cleanAltNameRegex = /^Alternate: /;\r\nconst baseRecipes: { key: string, label: string }[] = [];\r\nconst altRecipes: { key: string, label: string }[] = [];\r\nObject.entries(recipes)\r\n  .forEach(([key, data]) => {\r\n    if (data.isAlternate) {\r\n      altRecipes.push({\r\n        key,\r\n        label: data.name.replace(cleanAltNameRegex, ''),\r\n      });\r\n    } else {\r\n      baseRecipes.push({\r\n        key,\r\n        label: data.name,\r\n      });\r\n    }\r\n  });\r\nbaseRecipes.sort((a, b) => (a.label > b.label ? 1 : -1));\r\naltRecipes.sort((a, b) => (a.label > b.label ? 1 : -1));\r\n\r\nconst RecipesTab = () => {\r\n  const ctx = useProductionContext();\r\n  const [altRecipeSearch, setAltRecipeSearch] = useState('');\r\n  const [baseRecipeSearch, setBaseRecipeSearch] = useState('');\r\n\r\n  const renderRecipeList = useCallback((recipeList: { key: string, label: string }[]) => {\r\n    return recipeList.map(({ key, label }) => ({\r\n      label,\r\n      component: (\r\n        <List.Item key={key}>\r\n          <Checkbox\r\n            label={label}\r\n            checked={ctx.state.allowedRecipes[key]}\r\n            onChange={() => {\r\n              ctx.dispatch({\r\n                type: 'SET_RECIPE_ACTIVE',\r\n                key,\r\n                active: !ctx.state.allowedRecipes[key],\r\n              });\r\n            }}\r\n          />\r\n        </List.Item>\r\n      )\r\n    }));\r\n  }, [ctx]);\r\n\r\n  const renderedBaseRecipes = useMemo(() => renderRecipeList(baseRecipes), [renderRecipeList]);\r\n  const renderedAltRecipes = useMemo(() => renderRecipeList(altRecipes), [renderRecipeList]);\r\n\r\n  function renderRecipeOptions(alternates: boolean) {\r\n    const [searchValue, setSearchValue] = alternates\r\n      ? [altRecipeSearch, setAltRecipeSearch]\r\n      : [baseRecipeSearch, setBaseRecipeSearch];\r\n    const rendered = alternates ? renderedAltRecipes : renderedBaseRecipes\r\n    return (\r\n      <>\r\n        <Input\r\n          placeholder='Search...'\r\n          fluid\r\n          action\r\n          value={searchValue}\r\n          onChange={(e, { value }) => { setSearchValue(value); }}\r\n        >\r\n          <input />\r\n          <Button onClick={() => { ctx.dispatch({ type: 'MASS_SET_RECIPES_ACTIVE', alternates, active: true }) }}>\r\n            All\r\n          </Button>\r\n          <Button onClick={() => { ctx.dispatch({ type: 'MASS_SET_RECIPES_ACTIVE', alternates, active: false }) }}>\r\n            None\r\n          </Button>\r\n        </Input>\r\n        <List>\r\n          {rendered.filter(({ label }) => label.toLowerCase().includes(searchValue)).map(({ component }) => component)}\r\n        </List>\r\n      </>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <p>\r\n        Select the items that you already have available and don't need to produce in this factory.\r\n      </p>\r\n      <Grid columns={2} divided={true}>\r\n        <Grid.Row>\r\n          <Grid.Column>\r\n            <Header>Alternate Recipes</Header>\r\n            {renderRecipeOptions(true)}\r\n          </Grid.Column>\r\n          <Grid.Column>\r\n            <Header>Base Recipes</Header>\r\n            {renderRecipeOptions(false)}\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RecipesTab;\r\n","import React, { useState } from 'react';\r\nimport { Container, Menu } from 'semantic-ui-react';\r\nimport ProductionTab from './ProductionTab';\r\nimport InputsTab from './InputsTab';\r\nimport RecipesTab from './RecipesTab';\r\n\r\nconst PlannerOptions = () => {\r\n  const [activeTab, setActiveTab] = useState('production');\r\n\r\n  function handleSetTab(e: any, data: any) {\r\n    setActiveTab(data.name);\r\n  }\r\n\r\n  function renderTab() {\r\n    switch (activeTab) {\r\n      case 'production':\r\n        return <ProductionTab />\r\n      case 'inputs':\r\n        return <InputsTab />\r\n      case 'recipes':\r\n        return <RecipesTab />\r\n      default:\r\n        return null;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container fluid>\r\n      <Menu pointing secondary attached=\"top\" fluid widths={3}>\r\n        <Menu.Item\r\n          name='production'\r\n          active={activeTab === 'production'}\r\n          onClick={handleSetTab}\r\n        >\r\n          Production\r\n        </Menu.Item>\r\n        <Menu.Item\r\n          name='inputs'\r\n          active={activeTab === 'inputs'}\r\n          onClick={handleSetTab}\r\n        >\r\n          Inputs\r\n        </Menu.Item>\r\n        <Menu.Item\r\n          name='recipes'\r\n          active={activeTab === 'recipes'}\r\n          onClick={handleSetTab}\r\n        >\r\n          Recipes\r\n        </Menu.Item>\r\n      </Menu>\r\n      <div style={{ padding: '20px 0px' }}>\r\n        {renderTab()}\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default PlannerOptions;\r\n","// **************************************************************************** //\r\n// Thanks to https://gist.github.com/ZachHaber/feb0432fe395a303a4f10671877e5e70 //\r\n// **************************************************************************** //\r\n\r\nimport React, {\r\n  forwardRef,\r\n  HTMLAttributes,\r\n  useEffect,\r\n  useImperativeHandle,\r\n  useRef,\r\n  useState,\r\n} from 'react';\r\nimport { DataSet } from 'vis-data';\r\nimport {\r\n  Network,\r\n  Edge,\r\n  Node,\r\n  Options,\r\n  NetworkEvents,\r\n  IdType,\r\n} from 'vis-network';\r\nimport {\r\n  differenceWith,\r\n  intersectionWith,\r\n  isEqual,\r\n  defaultsDeep,\r\n  cloneDeep,\r\n} from 'lodash';\r\n\r\nexport type { Network, Edge, Node, Options, NetworkEvents, IdType };\r\n\r\nexport type GraphEvents = Partial<\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  Record<NetworkEvents, (params?: any) => void>\r\n>;\r\n\r\nexport interface GraphData {\r\n  nodes: Node[];\r\n  edges: Edge[];\r\n}\r\n\r\nexport interface NetworkGraphProps {\r\n  graph: GraphData;\r\n  options?: Options;\r\n  events?: GraphEvents;\r\n  style?: React.CSSProperties;\r\n  className?: string;\r\n}\r\n/**\r\n * Keeps the value the same permanently.\r\n * Useful over refs especially in instances where the function creation variant is used\r\n */\r\nfunction useSealedState<T>(value: T | (() => T)) {\r\n  const [state] = useState(value);\r\n  return state;\r\n}\r\n\r\n/**\r\n * https://github.com/crubier/react-graph-vis/commit/68bf2e27b2046d6c0bb8b334c2cf974d23443264\r\n */\r\nconst diff = <T extends { id?: IdType }>(\r\n  current: T[],\r\n  next: T[],\r\n  field: keyof T = 'id',\r\n) => {\r\n  const nextIds = new Set(next.map((item) => item[field]));\r\n  const removed = current.filter((item) => !nextIds.has(item[field]));\r\n\r\n  const unchanged = intersectionWith(next, current, isEqual);\r\n\r\n  const updated = differenceWith(\r\n    intersectionWith(next, current, (a, b) => a[field] === b[field]),\r\n    unchanged,\r\n    isEqual,\r\n  );\r\n\r\n  const added = differenceWith(\r\n    differenceWith(next, current, isEqual),\r\n    updated,\r\n    isEqual,\r\n  );\r\n\r\n  return {\r\n    removed,\r\n    unchanged,\r\n    updated,\r\n    added,\r\n  };\r\n};\r\n\r\nconst defaultOptions = {\r\n  physics: {\r\n    stabilization: false,\r\n  },\r\n  autoResize: false,\r\n  edges: {\r\n    smooth: false,\r\n    color: '#000000',\r\n    width: 0.5,\r\n    arrows: {\r\n      to: {\r\n        enabled: true,\r\n        scaleFactor: 0.5,\r\n      },\r\n    },\r\n  },\r\n};\r\n/**\r\n * Conversion of https://github.com/crubier/react-graph-vis/blob/master/src/index.js to a function component\r\n */\r\nconst GraphVis = forwardRef<\r\n  Network | undefined,\r\n  NetworkGraphProps & HTMLAttributes<HTMLDivElement>\r\n>(({ graph, events, options: propOptions, ...props }, ref) => {\r\n  const container = useRef<HTMLDivElement>(null);\r\n  const edges = useSealedState(() => new DataSet<Edge>(graph.edges));\r\n  const nodes = useSealedState(() => new DataSet<Node>(graph.nodes));\r\n  const initialOptions = useSealedState(propOptions);\r\n\r\n  const prevNodes = useRef(graph.nodes);\r\n  const prevEdges = useRef(graph.edges);\r\n  useEffect(() => {\r\n    if (isEqual(graph.nodes, prevNodes.current)) {\r\n      return; // No change!\r\n    }\r\n    const { added, removed, updated } = diff(prevNodes.current, graph.nodes);\r\n\r\n    nodes.remove(removed);\r\n    nodes.add(added);\r\n    nodes.update(updated);\r\n    prevNodes.current = graph.nodes;\r\n  }, [graph.nodes, nodes]);\r\n\r\n  useEffect(() => {\r\n    if (isEqual(graph.edges, prevEdges.current)) {\r\n      return; // No change!\r\n    }\r\n    const { added, removed, updated } = diff(prevEdges.current, graph.edges);\r\n\r\n    edges.remove(removed);\r\n    edges.add(added);\r\n    edges.update(updated);\r\n    prevEdges.current = graph.edges;\r\n  }, [graph.edges, edges]);\r\n  const [network, setNetwork] = useState<Network>();\r\n\r\n  useImperativeHandle(ref, () => network, [network]);\r\n\r\n  useEffect(() => {\r\n    if (!network || !events) {\r\n      return () => { };\r\n    }\r\n    // Add user provied events to network\r\n    for (const [eventName, callback] of Object.entries(events)) {\r\n      if (callback) {\r\n        network.on(eventName as NetworkEvents, callback);\r\n      }\r\n    }\r\n    return () => {\r\n      for (const [eventName, callback] of Object.entries(events)) {\r\n        if (callback) {\r\n          network.off(eventName as NetworkEvents, callback);\r\n        }\r\n      }\r\n    };\r\n  }, [events, network]);\r\n\r\n  useEffect(() => {\r\n    if (!network || !propOptions) {\r\n      return;\r\n    }\r\n    try {\r\n      network.setOptions(propOptions);\r\n    } catch (error) {\r\n      // Throws when it hot reloads... Yay\r\n      if (process.env.NODE_ENV !== 'development') {\r\n        // Still throw it in prod where there's no hot reload\r\n        throw error;\r\n      }\r\n    }\r\n  }, [network, propOptions]);\r\n\r\n  useEffect(() => {\r\n    // Creating the network has to be done in a useEffect because it needs access to a ref\r\n\r\n    // merge user provied options with our default ones\r\n    // defaultsDeep mutates the host object\r\n    const mergedOptions = defaultsDeep(\r\n      cloneDeep(initialOptions),\r\n      defaultOptions,\r\n    );\r\n    const newNetwork = new Network(\r\n      container.current as HTMLElement,\r\n      { edges, nodes },\r\n      mergedOptions,\r\n    );\r\n    setNetwork(newNetwork);\r\n    return () => {\r\n      // Cleanup the network on component unmount\r\n      newNetwork.destroy();\r\n    };\r\n  }, [edges, initialOptions, nodes]);\r\n\r\n  return <div ref={container} {...props} />;\r\n});\r\n\r\nexport default GraphVis;\r\n","import { FactoryOptions } from '../../contexts/production';\r\nimport { items, itemRecipeMap, recipes, resources, uncraftableItems, buildings, ItemRate } from '../../data';\r\nimport { RecipeMap } from '../../contexts/production';\r\n\r\ntype InputMap = {\r\n  [key: string]: {\r\n    amount: number,\r\n    value: number,\r\n    type: string,\r\n  }\r\n};\r\ntype OutputTargets = { productionRate: number | null, buildings: number | null };\r\ntype OutputMap = { [key: string]: OutputTargets };\r\n\r\ntype RecipeEval = { scoreBound: number };\r\ntype RecipeEvalMap = { [key: string]: RecipeEval };\r\ntype ItemEval = { recipes: RecipeEvalMap, scoreBound: number };\r\ntype ItemEvalMap = { [key: string]: ItemEval };\r\n\r\nexport const NODE_TYPE = {\r\n  ROOT: 'ROOT',\r\n  FINAL_PRODUCT: 'FINAL_PRODUCT',\r\n  SIDE_PRODUCT: 'SIDE_PRODUCT',\r\n  INPUT: 'INPUT',\r\n  RESOURCE: 'RESOURCE',\r\n  RECIPE: 'RECIPE',\r\n};\r\n\r\nexport type ProductionGraph = {\r\n  nodes: GraphNode[],\r\n  edges: GraphEdge[],\r\n};\r\n\r\nexport type GraphNode = {\r\n  id: number,\r\n  recipe: string,\r\n  multiplier: number,\r\n  type: string,\r\n};\r\n\r\nexport type GraphEdge = {\r\n  from: number,\r\n  to: number,\r\n  item: string,\r\n  productionRate: number,\r\n};\r\n\r\nexport class ProductionGraphAlgorithm {\r\n  private inputs: InputMap;\r\n  private outputs: OutputMap;\r\n  private allowedRecipes: RecipeMap;\r\n  private itemEvaluations: ItemEvalMap = {};\r\n  private currentId: number = 0;\r\n\r\n  public constructor(options: FactoryOptions) {\r\n    // TODO\r\n    // check NaN\r\n    // check output not zero\r\n    // sum multiple in/out of same item\r\n\r\n    this.inputs = {};\r\n\r\n    options.inputItems.forEach((item) => {\r\n      if (!item.itemKey) return;\r\n      const amount = item.unlimited ? Infinity : Number(item.value);\r\n      if (!amount) return;\r\n      this.inputs[item.itemKey] = {\r\n        amount,\r\n        value: 0,\r\n        type: NODE_TYPE.INPUT,\r\n      }\r\n    });\r\n\r\n    let maxResourceAmount = 0;\r\n    options.inputResources.forEach((item) => {\r\n      const amount = item.unlimited ? Infinity : Number(item.value);\r\n      if (amount && !item.unlimited) {\r\n        maxResourceAmount += amount;\r\n      }\r\n    });\r\n    options.inputResources.forEach((item) => {\r\n      const resourceData = resources[item.itemKey];\r\n      if (!resourceData) return;\r\n      const amount = item.unlimited ? Infinity : Number(item.value);\r\n      if (!amount) return;\r\n      let value = 0;\r\n      if (!item.unlimited) {\r\n        value = amount / maxResourceAmount;\r\n      }\r\n      this.inputs[item.itemKey] = {\r\n        amount,\r\n        value,\r\n        type: NODE_TYPE.RESOURCE,\r\n      }\r\n    });\r\n\r\n    Object.keys(uncraftableItems).forEach((item) => {\r\n      this.inputs[item] = {\r\n        amount: Infinity,\r\n        value: 0,\r\n        type: NODE_TYPE.RESOURCE,\r\n      };\r\n    });\r\n\r\n    this.outputs = {};\r\n    options.productionItems.forEach((item) => {\r\n      if (!item.itemKey) return;\r\n      const targets: OutputTargets = {\r\n        productionRate: null,\r\n        buildings: null,\r\n      };\r\n      switch (item.mode) {\r\n        case 'building-target':\r\n          targets.buildings = Number(item.value);\r\n          break;\r\n        case 'rate-target':\r\n          targets.productionRate = Number(item.value);\r\n          break;\r\n        case 'maximize':\r\n          targets.productionRate = Infinity;\r\n          break;\r\n        default:\r\n          throw new Error(`ITEM ${item.itemKey} HAS AN INVALID TARGET TYPE`);\r\n      }\r\n      this.outputs[item.itemKey] = targets;\r\n    });\r\n\r\n    this.allowedRecipes = options.allowedRecipes;\r\n  }\r\n\r\n  public exec(): ProductionGraph {\r\n    this.evalItemScoreBounds();\r\n    const graph = this.solve();\r\n    if (graph.nodes.length === 0) {\r\n      throw new Error('EMPTY GRAPH');\r\n    }\r\n    return graph;\r\n  }\r\n\r\n  private nextId() {\r\n    return this.currentId++;\r\n  }\r\n\r\n  // Find bounds for item scores for branch-and-bound algorithm\r\n  private evalItemScoreBounds() {\r\n    this.itemEvaluations = {};\r\n\r\n    let iterations = 0;\r\n    let noUpdates = false;\r\n    while (!noUpdates && iterations < 20) {\r\n      iterations++;\r\n      noUpdates = true;\r\n\r\n      nextItem:\r\n      for (const [itemKey, recipeKeys] of Object.entries(itemRecipeMap)) {\r\n        if (this.itemEvaluations[itemKey]) {\r\n          continue;\r\n        }\r\n\r\n        const itemEval: ItemEval = {\r\n          recipes: {},\r\n          scoreBound: Infinity,\r\n        };\r\n\r\n        for (const recipeKey of recipeKeys) {\r\n          const recipe = recipes[recipeKey];\r\n          const targetProduct = recipe.products.find((p) => p.itemClass === itemKey)!;\r\n          const recipeEval: RecipeEval = { scoreBound: 0 };\r\n\r\n          for (const ingredient of recipe.ingredients) {\r\n            // Fix for Recipe_UraniumCell_C\r\n            if (ingredient.itemClass === itemKey) {\r\n              continue;\r\n            }\r\n            let score: number;\r\n\r\n            if (this.inputs[ingredient.itemClass]) {\r\n              score = this.inputs[ingredient.itemClass].value * (ingredient.perMinute / targetProduct.perMinute);\r\n            } else if (this.itemEvaluations[ingredient.itemClass]) {\r\n              score = this.itemEvaluations[ingredient.itemClass].scoreBound * (ingredient.perMinute / targetProduct.perMinute);\r\n            } else {\r\n              continue nextItem;\r\n            }\r\n\r\n            recipeEval.scoreBound += score;\r\n          }\r\n\r\n          itemEval.recipes[recipeKey] = recipeEval;\r\n          if (recipeEval.scoreBound < itemEval.scoreBound) {\r\n            itemEval.scoreBound = recipeEval.scoreBound;\r\n          }\r\n        }\r\n\r\n        this.itemEvaluations[itemKey] = itemEval;\r\n        noUpdates = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  private solve(): ProductionGraph {\r\n    const initialGraph: ProductionGraph = {\r\n      nodes: [],\r\n      edges: [],\r\n    };\r\n\r\n    const initialNode: GraphNode = {\r\n      id: this.nextId(),\r\n      recipe: NODE_TYPE.ROOT,\r\n      multiplier: 1,\r\n      type: NODE_TYPE.ROOT,\r\n    }\r\n    this.buildItemTree(initialNode, initialGraph, 0);\r\n\r\n    return initialGraph;\r\n  }\r\n\r\n  private buildItemTree(parentNode: GraphNode, graph: ProductionGraph, depth: number) {\r\n    if (depth > 20) {\r\n      throw new Error('INFINITE LOOP DETECTED');\r\n    }\r\n\r\n    // Ingredients needed to create parent node\r\n    let ingredients: ItemRate[];\r\n    if (parentNode.type === NODE_TYPE.ROOT) {\r\n      ingredients = Object.entries(this.outputs).map(([itemClass, outputTargets]) => {\r\n        let perMinute;\r\n        if (outputTargets.buildings != null) {\r\n          perMinute = -1;\r\n        } else if (outputTargets.productionRate === Infinity) {\r\n          perMinute = 1;\r\n        } else {\r\n          perMinute = outputTargets.productionRate as number;\r\n        }\r\n        return {\r\n          itemClass,\r\n          perMinute,\r\n        };\r\n      });\r\n    } else {\r\n      const parentRecipeInfo = recipes[parentNode.recipe];\r\n      ingredients = parentRecipeInfo.ingredients.map((ingredient) => ({\r\n        itemClass: ingredient.itemClass,\r\n        perMinute: ingredient.perMinute * parentNode.multiplier,\r\n      }));\r\n    }\r\n\r\n    for (const ingredient of ingredients) {\r\n      const item = ingredient.itemClass;\r\n      let targetRate = ingredient.perMinute;\r\n\r\n      if (this.inputs[item]) {\r\n        const node: GraphNode = {\r\n          id: this.nextId(),\r\n          recipe: item,\r\n          multiplier: 1,\r\n          type: this.inputs[item].type,\r\n        };\r\n        graph.nodes.push(node);\r\n        graph.edges.push({\r\n          from: node.id,\r\n          to: parentNode.id,\r\n          item,\r\n          productionRate: targetRate,\r\n        });\r\n        continue;\r\n      }\r\n      \r\n      const bestRecipe = this.getBestRecipe(item);\r\n      const recipeInfo = recipes[bestRecipe];\r\n\r\n      const primaryProduct = recipeInfo.products.find((p) => p.itemClass === item)!;\r\n      const sideProducts = recipeInfo.products.filter((p) => p.itemClass !== item);\r\n\r\n      let multiplier: number;\r\n      if (targetRate === -1) {\r\n        multiplier = this.outputs[item].buildings as number;\r\n        targetRate = primaryProduct.perMinute * multiplier;\r\n      } else {\r\n        multiplier = targetRate / primaryProduct.perMinute;\r\n      }\r\n\r\n      const node: GraphNode = {\r\n        id: this.nextId(),\r\n        recipe: bestRecipe,\r\n        multiplier,\r\n        type: NODE_TYPE.RECIPE,\r\n      };\r\n\r\n      if (parentNode.type === NODE_TYPE.ROOT) {\r\n        const productNode = {\r\n          id: this.nextId(),\r\n          recipe: item,\r\n          multiplier: 1,\r\n          type: NODE_TYPE.FINAL_PRODUCT,\r\n        };\r\n\r\n        graph.nodes.push(node);\r\n        graph.nodes.push(productNode);\r\n        graph.edges.push({\r\n          from: node.id,\r\n          to: productNode.id,\r\n          item,\r\n          productionRate: targetRate,\r\n        });\r\n      } else {\r\n        graph.nodes.push(node);\r\n        graph.edges.push({\r\n          from: node.id,\r\n          to: parentNode.id,\r\n          item,\r\n          productionRate: targetRate,\r\n        });\r\n      }\r\n\r\n      sideProducts.forEach((sideProduct) => {\r\n        const productNode = {\r\n          id: this.nextId(),\r\n          recipe: sideProduct.itemClass,\r\n          multiplier: 1,\r\n          type: NODE_TYPE.SIDE_PRODUCT,\r\n        };\r\n        graph.nodes.push(productNode);\r\n        graph.edges.push({\r\n          from: node.id,\r\n          to: productNode.id,\r\n          item: sideProduct.itemClass,\r\n          productionRate: sideProduct.perMinute * multiplier,\r\n        });\r\n      });\r\n\r\n      this.buildItemTree(node, graph, depth + 1);\r\n    }\r\n  }\r\n\r\n  private getBestRecipe(item: string): string {\r\n    let itemEval = this.itemEvaluations[item];\r\n    if (!itemEval) {\r\n      throw new Error(`ITEM ${item} HAS NO VALID PRODUCTION PATH`);\r\n    }\r\n    const itemRecipes = itemRecipeMap[item].filter((r) => this.allowedRecipes[r]);\r\n    let bestRecipe: string | undefined;\r\n    let bestRecipeScore: number = Infinity;\r\n    for (const itemRecipe of itemRecipes) {\r\n      let recipeEval = itemEval.recipes[itemRecipe];\r\n      if (recipeEval && recipeEval.scoreBound < bestRecipeScore) {\r\n        bestRecipe = itemRecipe;\r\n      }\r\n    }\r\n    if (bestRecipe == null) {\r\n      throw new Error(`ITEM ${item} HAS NO VALID RECIPES`);\r\n    }\r\n    return bestRecipe;\r\n  }\r\n}\r\n","import React, { useMemo } from 'react';\r\nimport GraphVis from '../../../../components/GraphVis';\r\nimport { ProductionGraph, GraphNode, GraphEdge, NODE_TYPE } from '../../../../utilities/production-calculator';\r\nimport { items, recipes, buildings } from '../../../../data';\r\n\r\ninterface Props {\r\n  activeGraph: ProductionGraph | null,\r\n  errorMessage: string,\r\n}\r\n\r\nconst graphOptions = {\r\n  layout: {\r\n    hierarchical: {\r\n      enabled: true,\r\n      direction: 'LR',\r\n      sortMethod: 'directed',\r\n      shakeTowards: 'leaves',\r\n      levelSeparation: 280,\r\n      nodeSpacing: 100,\r\n    },\r\n  },\r\n  physics: {\r\n    enabled: false,\r\n  }\r\n}\r\n\r\nfunction truncateFloat(n: number) {\r\n  return n.toFixed(4).replace(/\\.?0+$/, '');\r\n}\r\n\r\nfunction getNodeLabel(node: GraphNode, edges: GraphEdge[]) {\r\n  let label = '';\r\n  let amountText = '';\r\n  if (node.type === NODE_TYPE.RECIPE) {\r\n    const recipe = recipes[node.recipe];\r\n    label = `${recipe.name}`;\r\n    amountText = `${truncateFloat(node.multiplier)}x ${buildings[recipe.producedIn].name}`;\r\n  } else if (node.type === NODE_TYPE.FINAL_PRODUCT || node.type === NODE_TYPE.SIDE_PRODUCT) {\r\n    let val = 0;\r\n    edges.forEach((edge) => {\r\n      if (edge.to === node.id) {\r\n        val += edge.productionRate;\r\n      }\r\n    });\r\n    const item = items[node.recipe];\r\n    label = `${item.name}`;\r\n    amountText = `${truncateFloat(val)} / min`;\r\n  } else if (node.type === NODE_TYPE.INPUT || node.type === NODE_TYPE.RESOURCE) {\r\n    let val = 0;\r\n    edges.forEach((edge) => {\r\n      if (edge.from === node.id) {\r\n        val += edge.productionRate;\r\n      }\r\n    });\r\n    const item = items[node.recipe];\r\n    label = `${item.name}`;\r\n    amountText = `${truncateFloat(val)} / min`;\r\n  } else if (node.type === NODE_TYPE.ROOT) {\r\n    label = 'ROOT';\r\n  }\r\n  return `${label}\\n${amountText}`;\r\n}\r\n\r\nfunction getEdgeLabel(edge: GraphEdge) {\r\n  const item = items[edge.item];\r\n  const label = `${item.name}`;\r\n  const amountText = `${truncateFloat(edge.productionRate)} / min`;\r\n  return `${label}\\n${amountText}`;\r\n}\r\n\r\nconst GraphTab = (props: Props) => {\r\n  const { activeGraph, errorMessage } = props;\r\n\r\n  const graphData = useMemo(() => {\r\n    if (activeGraph == null) {\r\n      return null;\r\n    }\r\n    const graphData: any = {};\r\n    graphData.nodes = activeGraph.nodes.map((node) => ({\r\n      id: node.id,\r\n      label: getNodeLabel(node, activeGraph.edges),\r\n      shape: (node.type === NODE_TYPE.RECIPE) ? 'box' : 'ellipse',\r\n      heightConstraint: (node.type === NODE_TYPE.RECIPE) ?  50 : 30,\r\n      widthConstraint: (node.type === NODE_TYPE.RECIPE) ?  150: 130,\r\n    }));\r\n    graphData.edges = activeGraph.edges.map((edge) => ({\r\n      from: edge.from,\r\n      to: edge.to,\r\n      label: getEdgeLabel(edge),\r\n    }));\r\n    return graphData;\r\n  }, [activeGraph]);\r\n\r\n  return (\r\n    <div style={{ height: '800px', display: 'flex', flexDirection:'column', alignItems: 'center', justifyContent: 'center', border: '1px solid black' }}>\r\n      {\r\n        graphData != null\r\n        ? (\r\n          <GraphVis\r\n            graph={graphData}\r\n            options={graphOptions}\r\n            style={{ height: '100%', width: '100%' }}\r\n          />\r\n        )\r\n        : (\r\n          <>\r\n            <div>\r\n              No graph available\r\n            </div>\r\n            {errorMessage\r\n              ? (\r\n                <div>\r\n                  {`\\nERROR: ${errorMessage}`}\r\n                </div>\r\n              )\r\n              : null}\r\n          </>\r\n        )\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GraphTab;\r\n","import React from 'react';\r\nimport { Container } from 'semantic-ui-react';\r\n\r\nconst BuildingsTab = () => {\r\n  return (\r\n    <Container>\r\n      <p>does works!</p>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default BuildingsTab;\r\n","import React, { useState } from 'react';\r\nimport { Container, Menu, Button } from 'semantic-ui-react';\r\nimport GraphTab from './GraphTab';\r\nimport BuildingsTab from './BuildingsTab';\r\nimport { ProductionGraphAlgorithm, ProductionGraph } from '../../../utilities/production-calculator';\r\nimport { useProductionContext } from '../../../contexts/production';\r\n\r\nconst PlannerResults = () => {\r\n  const [activeTab, setActiveTab] = useState('graph');\r\n  const [graph, setGraph] = useState<ProductionGraph | null>(null);\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n  const ctx = useProductionContext();\r\n\r\n  function handleCalculateFactory() {\r\n    const alg = new ProductionGraphAlgorithm(ctx.state);\r\n    try {\r\n      const graphResults = alg.exec();\r\n      setGraph(graphResults);\r\n      setErrorMessage('');\r\n    } catch (e: any) {\r\n      setGraph(null);\r\n      setErrorMessage(e.message);\r\n    }\r\n  }\r\n\r\n  function handleSetTab(e: any, data: any) {\r\n    setActiveTab(data.name);\r\n  }\r\n\r\n  function renderTab() {\r\n    switch (activeTab) {\r\n      case 'graph':\r\n        return <GraphTab activeGraph={graph} errorMessage={errorMessage} />\r\n      case 'buildings':\r\n        return <BuildingsTab />\r\n      default:\r\n        return null;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container fluid>\r\n      <Menu pointing secondary attached=\"top\">\r\n        <Menu.Item\r\n          name='graph'\r\n          active={activeTab === 'graph'}\r\n          onClick={handleSetTab}\r\n        >\r\n          Production Graph\r\n        </Menu.Item>\r\n        <Menu.Item\r\n          name='buildings'\r\n          active={activeTab === 'buildings'}\r\n          onClick={handleSetTab}\r\n        >\r\n          Buildings\r\n        </Menu.Item>\r\n      </Menu>\r\n      <div style={{ padding: '20px 0px' }}>\r\n        <Button primary onClick={handleCalculateFactory} style={{ marginBottom: '10px' }}>\r\n          Calculate\r\n        </Button>\r\n        {renderTab()}\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default PlannerResults;\r\n","import React from 'react';\r\nimport { Container, Header, Segment, Grid } from 'semantic-ui-react';\r\nimport PlannerOptions from './PlannerOptions';\r\nimport PlannerResults from './PlannerResults';\r\nimport { ProductionProvider } from '../../contexts/production';\r\nimport { useProductionContext } from '../../contexts/production';\r\n\r\nconst ProductionPlanner = () => {\r\n  return (\r\n    <>\r\n      <Header as='h1'>Production Planner</Header>\r\n      <p>\r\n        This is some descriptive text that will have some usage information or whatever.\r\n      </p>\r\n      <Container fluid>\r\n        <ProductionProvider>\r\n          <Factory />\r\n        </ProductionProvider>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProductionPlanner;\r\n\r\nconst Factory = () => {\r\n  const ctx = useProductionContext();\r\n  return (\r\n    <>\r\n      <Segment attached='top'>\r\n        <Header size='medium'>{ctx.state.name}</Header>\r\n      </Segment>\r\n      <Grid columns={2}>\r\n        <Grid.Column width={5}>\r\n          <PlannerOptions />\r\n        </Grid.Column>\r\n        <Grid.Column width={11}>\r\n          <PlannerResults />\r\n        </Grid.Column>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Container, Menu } from 'semantic-ui-react';\r\nimport ProductionPlanner from '../ProductionPlanner';\r\n\r\nconst Main = () => {\r\n  return (\r\n    <Container fluid>\r\n      <Menu fixed='top' size=\"massive\">\r\n        <Container fluid>\r\n          <Menu.Item as='a' header >\r\n            Yet Another Factory Planner\r\n          </Menu.Item>\r\n        </Container>\r\n      </Menu>\r\n      <Container fluid style={{ padding: '0px 50px', paddingTop: '70px' }}>\r\n        <ProductionPlanner />\r\n      </Container>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import React from 'react';\nimport Main from './containers/Main';\n\nfunction App() {\n  return (\n    <Main />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-less/semantic.less';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './utilities/debug/reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// reportWebVitals(console.log);\n"],"sourceRoot":""}