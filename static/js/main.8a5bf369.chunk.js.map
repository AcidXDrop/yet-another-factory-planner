{"version":3,"sources":["data/index.ts","hooks/usePrevious.ts","utilities/production-solver/index.ts","contexts/production/index.tsx","containers/ProductionPlanner/PlannerOptions/ProductionTab/index.tsx","containers/ProductionPlanner/PlannerOptions/InputsTab/index.tsx","containers/ProductionPlanner/PlannerOptions/RecipesTab/index.tsx","containers/ProductionPlanner/PlannerOptions/index.tsx","containers/ProductionPlanner/PlannerResults/ProductionGraphTab/index.tsx","containers/ProductionPlanner/PlannerResults/ReportTab/index.tsx","containers/ProductionPlanner/PlannerResults/index.tsx","containers/ProductionPlanner/index.tsx","containers/Main/index.tsx","App.tsx","index.tsx"],"names":["buildings","buildingsRaw","recipes","recipesRaw","resources","resourcesRaw","items","itemsRaw","handGatheredItems","handGatheredItemsRaw","usePrevious","value","ref","useRef","useEffect","current","EPSILON","NODE_TYPE","POINTS_ITEM_KEY","ProductionSolver","options","globalWeights","inputs","rateTargets","maximizeTargets","hasPointsTarget","allowedRecipes","this","Number","weightingOptions","power","buildArea","validateNumber","maxGlobalWeight","Math","max","inputResources","forEach","item","itemKey","amount","unlimited","Infinity","weight","type","maxResourceWeight","Object","values","map","i","inputItems","allowHandGatheredItems","keys","perMinTargets","recipeTargets","productionItems","isPoints","mode","recipe","existingTarget","find","t","key","priority","push","recipeKey","recipeInfo","Error","target","products","p","itemClass","perMinute","sort","a","b","length","num","isNaN","timestamp","performance","now","loadGLPK","glpk","solveProduction_rateTargetsPass","productionSolution","productionGraph","generateProductionGraph","remainingInputs","inputKey","input","inputNode","nodes","n","usedAmount","multiplier","diff","entries","solveProduction_maximizePass","solution","report","generateProductionReport","error","message","model","name","objective","direction","GLP_MIN","vars","subjectTo","pointsVars","buildingInfo","producedIn","powerScore","areaScore","area","coef","bnds","GLP_LO","ub","lb","pointCoef","product","sinkPoints","ingredients","ingredient","GLP_UP","NaN","itemInfo","usedInRecipes","producedFromRecipes","existingVar","v","objectiveVars","inputInfo","filter","outputInfo","ov","solve","msglev","GLP_MSG_OFF","result","status","GLP_OPT","val","abs","targetKey","itemProductionTotals","graph","edges","producedBy","usedBy","id","nanoid","productionTotals","j","nextDemand","usageInfo","usageNode","productionInfo","productionNode","outputRecipe","recipeAmount","itemNode","from","to","productionRate","nodeType","pointsProduced","powerUsageEstimate","resourceEfficiencyScore","totalBuildArea","estimatedFoundations","buildingsUsed","totalMaterialCost","node","buildingKey","ceil","count","materialCost","buildCost","quantity","FACTORY_SETTINGS_VERSION","ProductionContext","createContext","useProductionContext","ctx","useContext","displayName","ORDERED_RESOURCES","getInitialInputResources","data","String","maxExtraction","relativeValue","aIndex","findIndex","r","bIndex","getInitialAllowedRecipes","recipeMap","isAlternate","getInitialState","version","reducer","state","action","newProductionItems","newItem","nextPriority","newInputItems","newInputResources","active","newWeightingOptions","newAllowedRecipes","alternates","encodedState","URLSearchParams","window","location","search","get","stateStr","newState","fields","split","allowedRecipesBits","BigInt","toString","padStart","parseInt","productionItemsStrings","SEP1","str","SEP2","getItemBySlug","getModeBySlug","inputItemsStrings","inputResourcesStrings","resourceOptions","weightingOptionsStrings","decodeState","e","console","getItemSlug","slug","itemEntry","recipeEntry","encodeState","join","productionItemsField","getModeSlug","inputItemsField","inputResourcesField","ProductionProvider","children","useReducer","dispatch","useState","loaded","setLoaded","prevState","history","replaceState","pathname","Provider","itemOptions","text","unshift","baseModeOptions","priorityOptions","Array","fill","_","reverse","ProductionTab","Grid","modeOptions","replace","Row","Column","style","flex","minWidth","Dropdown","fluid","placeholder","selection","clearable","onChange","display","Input","className","min","step","Button","icon","negative","onClick","Icon","columns","primary","InputsTab","Header","labelPosition","disabled","Checkbox","fontWeight","label","checked","Divider","alignItems","renderWeightInputs","cleanAltNameRegex","baseRecipes","altRecipes","RecipesTab","altRecipeSearch","setAltRecipeSearch","baseRecipeSearch","setBaseRecipeSearch","renderRecipeList","useCallback","recipeList","component","List","Item","renderedBaseRecipes","useMemo","renderedAltRecipes","renderRecipeOptions","searchValue","setSearchValue","rendered","toLowerCase","includes","divided","PlannerOptions","activeTab","setActiveTab","handleSetTab","Container","Menu","pointing","secondary","attached","widths","padding","renderTab","Cytoscape","use","klay","layout","edgeRouting","nodePlacement","edgeSpacingFactor","inLayerSpacingFactor","spacing","thoroughness","stylesheet","selector","NODE_COLOR_CLASS","truncateFloat","toFixed","getNodeLabel","amountText","getNodeClasses","classes","getEdgeLabel","edge","ProductionGraphTab","props","activeGraph","errorMessage","graphProps","elements","group","source","undefined","height","flexDirection","justifyContent","border","boxSelectionEnabled","autounselectify","wheelSensitivity","maxZoom","minZoom","width","overflow","formatFloat","toLocaleString","maximumFractionDigits","ReportTab","marginTop","size","celled","marginBottom","paddingTop","paddingBottom","Content","fontSize","marginLeft","marginRight","_handleCalculateFactory","debounce","setSolverResults","solver","exec","results","leading","trailing","PlannerResults","autoCalc","setAutoCalc","solverResults","handleCalculateFactory","toggle","handleSetAutoCalc","seed","floor","Date","getTime","rng","seedrandom","TIPS","TIP_INDEX","TIP","ProductionPlanner","as","Factory","Main","fixed","header","color","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8a5bf369.chunk.js","sourcesContent":["import buildingsRaw from './json/buildings.json';\r\nimport recipesRaw from './json/recipes.json';\r\nimport resourcesRaw from './json/resources.json';\r\nimport itemsRaw from './json/items.json';\r\nimport handGatheredItemsRaw from './json/handGatheredItems.json';\r\n\r\n\r\nexport type ItemRate = {\r\n  itemClass: string,\r\n  perMinute: number,\r\n};\r\n\r\nexport type ItemQuantity = {\r\n  itemClass: string,\r\n  quantity: number,\r\n};\r\n\r\nexport type BuildingsInfo = {\r\n  slug: string,\r\n  name: string,\r\n  power: number,\r\n  area: number,\r\n  buildCost: ItemQuantity[],\r\n};\r\n\r\nexport type RecipeInfo = {\r\n  slug: string,\r\n  name: string,\r\n  isAlternate: boolean,\r\n  ingredients: ItemRate[],\r\n  products: ItemRate[],\r\n  producedIn: string,\r\n};\r\n\r\nexport type ResourceInfo = {\r\n  itemClass: string,\r\n  maxExtraction: number | null,\r\n  relativeValue: number,\r\n};\r\n\r\nexport type ItemInfo = {\r\n  slug: string,\r\n  name: string,\r\n  sinkPoints: number,\r\n  usedInRecipes: string[],\r\n  producedFromRecipes: string[],\r\n};\r\n\r\nexport type BuildingMap = { [key in keyof typeof buildingsRaw]: BuildingsInfo } & { [key: string]: BuildingsInfo };\r\nexport type RecipeMap = { [key in keyof typeof recipesRaw]: RecipeInfo } & { [key: string]: RecipeInfo };\r\nexport type ResourceMap = { [key in keyof typeof resourcesRaw]: ResourceInfo } & { [key: string]: ResourceInfo };\r\nexport type ItemMap = { [key in keyof typeof itemsRaw]: ItemInfo } & { [key: string]: ItemInfo };\r\nexport type HandGatheredItemMap = { [key in keyof typeof handGatheredItemsRaw]: string } & { [key: string]: string };\r\n\r\nexport const buildings = (buildingsRaw as BuildingMap);\r\nexport const recipes = (recipesRaw as RecipeMap);\r\nexport const resources = (resourcesRaw as ResourceMap);\r\nexport const items = (itemsRaw as ItemMap);\r\nexport const handGatheredItems = (handGatheredItemsRaw as HandGatheredItemMap);\r\n","import { useRef, useEffect } from 'react';\r\n\r\nexport function usePrevious<T>(value: T) {\r\n  const ref = useRef<T>();\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  }, [value]);\r\n  return ref.current;\r\n}\r\n","import loadGLPK, { GLPK, LP, Var } from 'glpk.js';\r\nimport { nanoid } from 'nanoid';\r\nimport { FactoryOptions } from '../../contexts/production';\r\nimport { buildings, items, recipes, resources, handGatheredItems } from '../../data';\r\nimport { RecipeMap } from '../../contexts/production';\r\n\r\nconst EPSILON = 1e-8;\r\n\r\nexport const NODE_TYPE = {\r\n  FINAL_PRODUCT: 'FINAL_PRODUCT',\r\n  SIDE_PRODUCT: 'SIDE_PRODUCT',\r\n  INPUT_ITEM: 'INPUT_ITEM',\r\n  HAND_GATHERED_RESOURCE: 'HAND_GATHERED_RESOURCE',\r\n  RESOURCE: 'RESOURCE',\r\n  RECIPE: 'RECIPE',\r\n};\r\n\r\nexport const POINTS_ITEM_KEY = 'POINTS_ITEM_KEY';\r\n\r\ntype Inputs = {\r\n  [key: string]: {\r\n    amount: number,\r\n    weight: number,\r\n    type: string,\r\n  }\r\n};\r\n\r\ntype RateTargets = {\r\n  [key: string]: {\r\n    value: number,\r\n    recipe: string | null,\r\n    isPoints: boolean,\r\n  }\r\n};\r\n\r\ntype MaximizeTargets = { key: string, priority: number };\r\n\r\ntype GlobalWeights = {\r\n  resources: number,\r\n  power: number,\r\n  buildArea: number,\r\n};\r\n\r\ntype ProductionSolution = { [key: string]: number };\r\ntype ProductionAmount = { recipeKey: string, amount: number };\r\ntype ItemProductionTotals = {\r\n  [key: string]: {\r\n    producedBy: ProductionAmount[],\r\n    usedBy: ProductionAmount[],\r\n  }\r\n};\r\n\r\nexport type SolverResults = {\r\n  productionGraph: ProductionGraph | null,\r\n  report: Report | null,\r\n  timestamp: number,\r\n  error: string,\r\n};\r\n\r\nexport type Report = {\r\n  pointsProduced: number,\r\n  powerUsageEstimate: number,\r\n  resourceEfficiencyScore: number,\r\n  totalBuildArea: number,\r\n  estimatedFoundations: number,\r\n  buildingsUsed: {\r\n    [key: string]: {\r\n      count: number,\r\n      materialCost: {\r\n        [key: string]: number,\r\n      }\r\n    },\r\n  },\r\n  totalMaterialCost: {\r\n    [key: string]: number,\r\n  },\r\n}\r\n\r\nexport type ProductionGraph = {\r\n  nodes: { [key: string]: GraphNode },\r\n  edges: GraphEdge[],\r\n};\r\n\r\nexport type GraphNode = {\r\n  id: string,\r\n  key: string,\r\n  type: string,\r\n  multiplier: number,\r\n};\r\n\r\nexport type GraphEdge = {\r\n  key: string,\r\n  from: string,\r\n  to: string,\r\n  productionRate: number,\r\n};\r\n\r\nexport class ProductionSolver {\r\n  private globalWeights: GlobalWeights;\r\n  private inputs: Inputs;\r\n  private rateTargets: RateTargets;\r\n  private maximizeTargets: MaximizeTargets[];\r\n  private hasPointsTarget: boolean;\r\n  private allowedRecipes: RecipeMap;\r\n\r\n  public constructor(options: FactoryOptions) {\r\n    this.allowedRecipes = options.allowedRecipes;\r\n    \r\n    this.globalWeights = {\r\n      resources: Number(options.weightingOptions.resources),\r\n      power: Number(options.weightingOptions.power),\r\n      buildArea: Number(options.weightingOptions.buildArea),\r\n    };\r\n\r\n    this.validateNumber(this.globalWeights.resources);\r\n    this.validateNumber(this.globalWeights.power);\r\n    this.validateNumber(this.globalWeights.buildArea);\r\n\r\n    const maxGlobalWeight = Math.max(this.globalWeights.resources, this.globalWeights.power, this.globalWeights.buildArea);\r\n    this.globalWeights.resources /= maxGlobalWeight;\r\n    this.globalWeights.power /= maxGlobalWeight;\r\n    this.globalWeights.buildArea /= (10 * maxGlobalWeight); // Extra factor of 10 to be closer to power numbers\r\n\r\n    this.inputs = {};\r\n\r\n    options.inputResources.forEach((item) => {\r\n      const resourceData = resources[item.itemKey];\r\n      if (!resourceData) return;\r\n      const amount = item.unlimited ? Infinity : Number(item.value);\r\n      this.validateNumber(amount);\r\n      if (!amount) return;\r\n      const weight = Number(item.weight);\r\n      this.validateNumber(weight);\r\n      this.inputs[item.itemKey] = {\r\n        amount,\r\n        weight,\r\n        type: NODE_TYPE.RESOURCE,\r\n      }\r\n    });\r\n\r\n    const maxResourceWeight = Math.max(...Object.values(this.inputs).map((i) => i.weight));\r\n    Object.values(this.inputs).forEach((i) => { i.weight /= maxResourceWeight });\r\n\r\n    options.inputItems.forEach((item) => {\r\n      if (!item.itemKey) return;\r\n      const amount = item.unlimited ? Infinity : Number(item.value);\r\n      this.validateNumber(amount);\r\n      if (!amount) return;\r\n      if (!this.inputs[item.itemKey]) {\r\n        this.inputs[item.itemKey] = {\r\n          amount,\r\n          weight: 0,\r\n          type: NODE_TYPE.INPUT_ITEM,\r\n        }\r\n      } else {\r\n        this.inputs[item.itemKey].amount += amount;\r\n      }\r\n    });\r\n\r\n    if (options.allowHandGatheredItems) {\r\n      Object.keys(handGatheredItems).forEach((item) => {\r\n        this.inputs[item] = {\r\n          amount: Infinity,\r\n          weight: 1000,\r\n          type: NODE_TYPE.HAND_GATHERED_RESOURCE,\r\n        };\r\n      });\r\n    }\r\n\r\n    this.rateTargets = {};\r\n    this.maximizeTargets = [];\r\n    this.hasPointsTarget = false;\r\n\r\n    const perMinTargets: RateTargets = {};\r\n    const recipeTargets: RateTargets = {};\r\n    options.productionItems.forEach((item) => {\r\n      if (!item.itemKey) return;\r\n      const amount = Number(item.value);\r\n      this.validateNumber(amount);\r\n      if (!amount) return;\r\n      const isPoints = item.itemKey === POINTS_ITEM_KEY;\r\n      if (isPoints) {\r\n        this.hasPointsTarget = true;\r\n      }\r\n      switch (item.mode) {\r\n        case 'per-minute':\r\n          if (perMinTargets[item.itemKey]) {\r\n            perMinTargets[item.itemKey].value += amount;\r\n          } else {\r\n            perMinTargets[item.itemKey] = {\r\n              value: amount,\r\n              recipe: null,\r\n              isPoints,\r\n            };\r\n          }\r\n          break;\r\n        case 'maximize':\r\n          const existingTarget = this.maximizeTargets.find((t) => t.key === item.itemKey);\r\n          if (existingTarget) {\r\n            if (existingTarget.priority < amount) {\r\n              existingTarget.priority = amount;\r\n            }\r\n          } else {\r\n            this.maximizeTargets.push({\r\n              key: item.itemKey,\r\n              priority: amount,\r\n            });\r\n          }\r\n          break;\r\n        default:\r\n          const recipeKey = item.mode;\r\n          const recipeInfo = recipes[recipeKey];\r\n          if (recipeInfo) {\r\n            if (!this.allowedRecipes[recipeKey]) {\r\n              throw new Error('CANNOT TARGET A DISABLED RECIPE');\r\n            }\r\n            const target = recipeInfo.products.find((p) => p.itemClass === item.itemKey)!;\r\n            if (perMinTargets[item.itemKey]) {\r\n              perMinTargets[item.itemKey].value += target.perMinute * amount;\r\n            } else {\r\n              perMinTargets[item.itemKey] = {\r\n                value: target.perMinute * amount,\r\n                recipe: null,\r\n                isPoints: false,\r\n              };\r\n            }\r\n            if (recipeTargets[recipeKey]) {\r\n              recipeTargets[recipeKey].value += amount;\r\n            } else {\r\n              recipeTargets[recipeKey] = {\r\n                value: amount,\r\n                recipe: recipeKey,\r\n                isPoints: false,\r\n              };\r\n            }\r\n          } else {\r\n            throw new Error('INVALID OUTPUT MODE SELECTION');\r\n          }\r\n      }\r\n    });\r\n\r\n    this.maximizeTargets\r\n      .sort((a, b) => {\r\n        if (a.priority > b.priority) return -1;\r\n        if (a.priority < b.priority) return 1;\r\n        throw new Error('TWO TARGET ITEMS HAVE THE SAME MAXIMIZATION PRIORITY');\r\n      });\r\n\r\n    this.rateTargets = {\r\n      ...perMinTargets,\r\n      ...recipeTargets,\r\n    };\r\n    if (Object.keys(this.rateTargets).length === 0 && this.maximizeTargets.length === 0) {\r\n      throw new Error('NO OUTPUTS SET');\r\n    }\r\n  }\r\n\r\n  private validateNumber(num: Number) {\r\n    if (Number.isNaN(num)) {\r\n      throw new Error('INVALID VALUE: NOT A NUMBER');\r\n    } else if (num < 0) {\r\n      throw new Error('INVALID VALUE: NEGATIVE NUMBER');\r\n    }\r\n  }\r\n\r\n  public async exec(): Promise<SolverResults> {\r\n    const timestamp = performance.now();\r\n    try {\r\n      const glpk = await loadGLPK();\r\n      const productionSolution = await this.solveProduction_rateTargetsPass(glpk);\r\n      let productionGraph = this.generateProductionGraph(productionSolution);\r\n\r\n      for (const target of this.maximizeTargets) {\r\n        const remainingInputs: Inputs = {};\r\n        for (const [inputKey, input] of Object.entries(this.inputs)) {\r\n          const inputNode = Object.values(productionGraph.nodes).find((n) => n.key === inputKey);\r\n          let usedAmount = 0;\r\n          if (inputNode) {\r\n            usedAmount = inputNode.multiplier;\r\n          }\r\n          const diff = input.amount - usedAmount;\r\n          if (diff > EPSILON) {\r\n            remainingInputs[inputKey] = {\r\n              ...input,\r\n              amount: diff,\r\n            };\r\n          }\r\n        }\r\n        const solution = await this.solveProduction_maximizePass(target.key, remainingInputs, glpk);\r\n        for (const [key, multiplier] of Object.entries(solution)) {\r\n          if (productionSolution[key]) {\r\n            productionSolution[key] += multiplier;\r\n          } else {\r\n            productionSolution[key] = multiplier;\r\n          }\r\n        }\r\n        productionGraph = this.generateProductionGraph(productionSolution);\r\n      }\r\n\r\n      if (Object.keys(productionGraph.nodes).length === 0) {\r\n        throw new Error('SOLUTION IS EMPTY');\r\n      }\r\n      const report = this.generateProductionReport(productionGraph);\r\n\r\n      return {\r\n        productionGraph,\r\n        report,\r\n        timestamp: timestamp,\r\n        error: '',\r\n      };\r\n    } catch (e: any) {\r\n      return {\r\n        productionGraph: null,\r\n        report: null,\r\n        timestamp: timestamp,\r\n        error: e.message,\r\n      };\r\n    }\r\n  }\r\n\r\n  private async solveProduction_rateTargetsPass(glpk: GLPK): Promise<ProductionSolution> {\r\n    const model: LP = {\r\n      name: 'production',\r\n      objective: {\r\n        name: 'score',\r\n        direction: glpk.GLP_MIN,\r\n        vars: [],\r\n      },\r\n      subjectTo: [],\r\n    };\r\n\r\n    const pointsVars: Var[] = [];\r\n\r\n    for (const [recipeKey, recipeInfo] of Object.entries(recipes)) {\r\n      if (!this.allowedRecipes[recipeKey]) continue;\r\n      const buildingInfo = buildings[recipeInfo.producedIn];\r\n      const powerScore = buildingInfo.power > 0 ? buildingInfo.power * this.globalWeights.power : 0;\r\n      const areaScore = buildingInfo.area * this.globalWeights.buildArea;\r\n      model.objective.vars.push({\r\n        name: recipeKey,\r\n        coef: powerScore + areaScore,\r\n      });\r\n\r\n      if (this.rateTargets[recipeKey]) {\r\n        model.subjectTo.push({\r\n          name: `${recipeKey} recipe constraint`,\r\n          vars: [{ name: recipeKey, coef: 1 }],\r\n          bnds: { type: glpk.GLP_LO, ub: 0, lb: this.rateTargets[recipeKey].value },\r\n        });\r\n      }\r\n\r\n      if (this.rateTargets[POINTS_ITEM_KEY]) {\r\n        let pointCoef = 0;\r\n        for (const product of recipeInfo.products) {\r\n          if (!this.inputs[product.itemClass]) {\r\n            pointCoef -= product.perMinute * items[product.itemClass].sinkPoints / 1000;\r\n          }\r\n        }\r\n        for (const ingredient of recipeInfo.ingredients) {\r\n          if (!this.inputs[ingredient.itemClass]) {\r\n            pointCoef += ingredient.perMinute * items[ingredient.itemClass].sinkPoints / 1000;\r\n          } \r\n        }\r\n        pointsVars.push({ name: recipeKey, coef: pointCoef });\r\n      }\r\n    }\r\n\r\n    if (this.rateTargets[POINTS_ITEM_KEY]) {\r\n      model.subjectTo.push({\r\n        name: 'AWESOME Sink Points constraint',\r\n        vars: pointsVars,\r\n        bnds: { type: glpk.GLP_UP, ub: -this.rateTargets[POINTS_ITEM_KEY].value, lb: NaN },\r\n      });\r\n    }\r\n\r\n    for (const [itemKey, itemInfo] of Object.entries(items)) {\r\n      const vars: Var[] = [];\r\n\r\n      for (const recipeKey of itemInfo.usedInRecipes) {\r\n        if (!this.allowedRecipes[recipeKey]) continue;\r\n        const recipeInfo = recipes[recipeKey];\r\n        const target = recipeInfo.ingredients.find((i) => i.itemClass === itemKey)!;\r\n        vars.push({ name: recipeKey, coef: target.perMinute });\r\n      }\r\n\r\n      for (const recipeKey of itemInfo.producedFromRecipes) {\r\n        if (!this.allowedRecipes[recipeKey]) continue;\r\n        const recipeInfo = recipes[recipeKey];\r\n        const target = recipeInfo.products.find((p) => p.itemClass === itemKey)!;\r\n        const existingVar = vars.find((v) => v.name === recipeKey);\r\n        if (existingVar) {\r\n          existingVar.coef -= target.perMinute;\r\n        } else {\r\n          vars.push({ name: recipeKey, coef: -target.perMinute });\r\n        }\r\n      }\r\n\r\n      if (vars.length === 0) continue;\r\n\r\n      let objectiveVars: Var[] = [];\r\n\r\n      if (this.inputs[itemKey]) {\r\n        const inputInfo = this.inputs[itemKey];\r\n        if (inputInfo.amount !== Infinity) {\r\n          model.subjectTo.push({\r\n            name: `${itemKey} resource constraint`,\r\n            vars,\r\n            bnds: { type: glpk.GLP_UP, ub: inputInfo.amount, lb: NaN },\r\n          });\r\n        }\r\n\r\n        if (inputInfo.type === NODE_TYPE.RESOURCE || inputInfo.type === NODE_TYPE.HAND_GATHERED_RESOURCE) {\r\n          objectiveVars = vars\r\n            .filter((v) => v.coef > 0)\r\n            .map<Var>((v) => ({\r\n              name: v.name,\r\n              coef: v.coef * inputInfo.weight * this.globalWeights.resources,\r\n            }));\r\n        }\r\n      }\r\n\r\n      else if (this.rateTargets[itemKey]) {\r\n        const outputInfo = this.rateTargets[itemKey];\r\n        model.subjectTo.push({\r\n          name: `${itemKey} final product constraint`,\r\n          vars,\r\n          bnds: { type: glpk.GLP_UP, ub: -outputInfo.value, lb: NaN },\r\n        });\r\n      }\r\n\r\n      else {\r\n        model.subjectTo.push({\r\n          name: `${itemKey} intermediates constraint`,\r\n          vars,\r\n          bnds: { type: glpk.GLP_UP, ub: 0, lb: NaN },\r\n        });\r\n      }\r\n\r\n      objectiveVars.forEach((v) => {\r\n        const existingVar = model.objective.vars.find((ov) => ov.name === v.name);\r\n        if (existingVar) {\r\n          existingVar.coef += v.coef;\r\n        } else {\r\n          model.objective.vars.push(v);\r\n        }\r\n      });\r\n    }\r\n\r\n    const solution = await glpk.solve(model, { msglev: glpk.GLP_MSG_OFF });\r\n    if (solution.result.status !== glpk.GLP_OPT) {\r\n      throw new Error(\"NO POSSIBLE SOLUTION\");\r\n    }\r\n\r\n    const result: ProductionSolution = {};\r\n    Object.entries(solution.result.vars).forEach(([key, val]) => {\r\n      if (Math.abs(val) > EPSILON) {\r\n        result[key] = val;\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n\r\n\r\n  async solveProduction_maximizePass(targetKey: string, remainingInputs: Inputs, glpk: GLPK): Promise<ProductionSolution> {\r\n    const model: LP = {\r\n      name: 'production',\r\n      objective: {\r\n        name: 'score',\r\n        direction: glpk.GLP_MIN,\r\n        vars: [],\r\n      },\r\n      subjectTo: [],\r\n    };\r\n\r\n    const pointsVars: Var[] = [];\r\n\r\n    for (const [recipeKey, recipeInfo] of Object.entries(recipes)) {\r\n      if (!this.allowedRecipes[recipeKey]) continue;\r\n      const buildingInfo = buildings[recipeInfo.producedIn];\r\n      const powerScore = buildingInfo.power > 0 ? buildingInfo.power * this.globalWeights.power : 0;\r\n      const areaScore = buildingInfo.area * this.globalWeights.buildArea;\r\n      model.objective.vars.push({\r\n        name: recipeKey,\r\n        coef: powerScore + areaScore,\r\n      });\r\n\r\n      if (targetKey === POINTS_ITEM_KEY) {\r\n        let pointCoef = 0;\r\n        for (const product of recipeInfo.products) {\r\n          if (!this.inputs[product.itemClass]) {\r\n            pointCoef -= product.perMinute * items[product.itemClass].sinkPoints / 1000;\r\n          }\r\n        }\r\n        for (const ingredient of recipeInfo.ingredients) {\r\n          if (!this.inputs[ingredient.itemClass]) {\r\n            pointCoef += ingredient.perMinute * items[ingredient.itemClass].sinkPoints / 1000;\r\n          }\r\n        }\r\n        pointsVars.push({ name: recipeKey, coef: pointCoef });\r\n      }\r\n    }\r\n\r\n    if (targetKey === POINTS_ITEM_KEY) {\r\n      pointsVars\r\n        .forEach((v) => {\r\n          const existingVar = model.objective.vars.find((ov) => ov.name === v.name);\r\n          if (existingVar) {\r\n            existingVar.coef += v.coef;\r\n          } else {\r\n            model.objective.vars.push(v);\r\n          }\r\n        });\r\n    }\r\n\r\n    for (const [itemKey, itemInfo] of Object.entries(items)) {\r\n      const vars: Var[] = [];\r\n\r\n      for (const recipeKey of itemInfo.usedInRecipes) {\r\n        if (!this.allowedRecipes[recipeKey]) continue;\r\n        const recipeInfo = recipes[recipeKey];\r\n        const target = recipeInfo.ingredients.find((i) => i.itemClass === itemKey)!;\r\n        vars.push({ name: recipeKey, coef: target.perMinute });\r\n      }\r\n\r\n      for (const recipeKey of itemInfo.producedFromRecipes) {\r\n        if (!this.allowedRecipes[recipeKey]) continue;\r\n        const recipeInfo = recipes[recipeKey];\r\n        const target = recipeInfo.products.find((p) => p.itemClass === itemKey)!;\r\n        const existingVar = vars.find((v) => v.name === recipeKey);\r\n        if (existingVar) {\r\n          existingVar.coef -= target.perMinute;\r\n        } else {\r\n          vars.push({ name: recipeKey, coef: -target.perMinute });\r\n        }\r\n      }\r\n\r\n      if (vars.length === 0) continue;\r\n\r\n      let objectiveVars: Var[] = [];\r\n\r\n      if (remainingInputs[itemKey]) {\r\n        const inputInfo = remainingInputs[itemKey];\r\n        if (inputInfo.amount !== Infinity) {\r\n          model.subjectTo.push({\r\n            name: `${itemKey} resource constraint`,\r\n            vars,\r\n            bnds: { type: glpk.GLP_UP, ub: inputInfo.amount, lb: NaN },\r\n          });\r\n        }\r\n\r\n        if (inputInfo.type === NODE_TYPE.RESOURCE || inputInfo.type === NODE_TYPE.HAND_GATHERED_RESOURCE) {\r\n          objectiveVars = vars\r\n            .filter((v) => v.coef > 0)\r\n            .map<Var>((v) => ({\r\n              name: v.name,\r\n              coef: v.coef * inputInfo.weight * this.globalWeights.resources,\r\n            }));\r\n        }\r\n      }\r\n\r\n      else if (targetKey === itemKey) {\r\n        model.subjectTo.push({\r\n          name: `${itemKey} final product constraint`,\r\n          vars,\r\n          bnds: { type: glpk.GLP_UP, ub: 0, lb: NaN },\r\n        });\r\n\r\n        objectiveVars = vars;\r\n      }\r\n\r\n      else {\r\n        model.subjectTo.push({\r\n          name: `${itemKey} intermediates constraint`,\r\n          vars,\r\n          bnds: { type: glpk.GLP_UP, ub: 0, lb: NaN },\r\n        });\r\n      }\r\n\r\n      objectiveVars.forEach((v) => {\r\n        const existingVar = model.objective.vars.find((ov) => ov.name === v.name);\r\n        if (existingVar) {\r\n          existingVar.coef += v.coef;\r\n        } else {\r\n          model.objective.vars.push(v);\r\n        }\r\n      });\r\n    }\r\n\r\n    const solution = await glpk.solve(model, { msglev: glpk.GLP_MSG_OFF });\r\n    if (solution.result.status !== glpk.GLP_OPT) {\r\n      throw new Error(\"SOLUTION IS UNBOUNDED\");\r\n    }\r\n\r\n    const result: ProductionSolution = {};\r\n    Object.entries(solution.result.vars).forEach(([key, val]) => {\r\n      if (Math.abs(val) > EPSILON) {\r\n        result[key] = val;\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n\r\n  private generateProductionGraph(productionSolution: ProductionSolution): ProductionGraph {\r\n    const itemProductionTotals: ItemProductionTotals = {};\r\n    const graph: ProductionGraph = {\r\n      nodes: {},\r\n      edges: [],\r\n    };\r\n\r\n    for (const [recipeKey, multiplier] of Object.entries(productionSolution)) {\r\n      const recipeInfo = recipes[recipeKey];\r\n\r\n      for (const product of recipeInfo.products) {\r\n        const amount = multiplier * product.perMinute;\r\n        if (!itemProductionTotals[product.itemClass]) {\r\n          itemProductionTotals[product.itemClass] = {\r\n            producedBy: [],\r\n            usedBy: [],\r\n          };\r\n        }\r\n        itemProductionTotals[product.itemClass].producedBy.push({ recipeKey, amount });\r\n      }\r\n\r\n      for (const ingredient of recipeInfo.ingredients) {\r\n        const amount = multiplier * ingredient.perMinute;\r\n        if (!itemProductionTotals[ingredient.itemClass]) {\r\n          itemProductionTotals[ingredient.itemClass] = {\r\n            producedBy: [],\r\n            usedBy: [],\r\n          };\r\n        }\r\n        itemProductionTotals[ingredient.itemClass].usedBy.push({ recipeKey, amount });\r\n      }\r\n\r\n      graph.nodes[recipeKey] = {\r\n        id: nanoid(),\r\n        key: recipeKey,\r\n        type: NODE_TYPE.RECIPE,\r\n        multiplier,\r\n      };\r\n    }\r\n\r\n    for (const [itemKey, productionTotals] of Object.entries(itemProductionTotals)) {\r\n      const { producedBy, usedBy } = productionTotals;\r\n      let i = 0, j = 0;\r\n      nextDemand:\r\n      while (i < usedBy.length) {\r\n        const usageInfo = usedBy[i];\r\n        const usageNode = graph.nodes[usageInfo.recipeKey];\r\n        \r\n        while (j < producedBy.length) {\r\n          const productionInfo = producedBy[j];\r\n          const productionNode = graph.nodes[productionInfo.recipeKey];\r\n\r\n          const outputRecipe = this.rateTargets[itemKey]?.recipe;\r\n          if (outputRecipe && outputRecipe === productionInfo.recipeKey) {\r\n            const outputInfo = this.rateTargets[itemKey];\r\n            const recipeInfo = recipes[outputRecipe];\r\n            const target = recipeInfo.products.find((p) => p.itemClass === itemKey)!;\r\n            const recipeAmount = outputInfo.value * target.perMinute;\r\n            productionInfo.amount -= recipeAmount;\r\n\r\n            let itemNode = graph.nodes[itemKey];\r\n            if (!itemNode) {\r\n              itemNode = {\r\n                id: nanoid(),\r\n                key: itemKey,\r\n                type: NODE_TYPE.FINAL_PRODUCT,\r\n                multiplier: recipeAmount,\r\n              }\r\n              graph.nodes[itemKey] = itemNode;\r\n            } else {\r\n              graph.nodes[itemKey].multiplier += recipeAmount;\r\n            }\r\n            graph.edges.push({\r\n              key: itemKey,\r\n              from: productionNode.id,\r\n              to: itemNode.id,\r\n              productionRate: recipeAmount,\r\n            });\r\n          } \r\n\r\n          if (productionInfo.amount < EPSILON) {\r\n            j++\r\n            continue;\r\n          }\r\n\r\n          if (usageInfo.amount <= productionInfo.amount) {\r\n            graph.edges.push({\r\n              key: itemKey,\r\n              from: productionNode.id,\r\n              to: usageNode.id,\r\n              productionRate: usageInfo.amount,\r\n            });\r\n            productionInfo.amount -= usageInfo.amount;\r\n            usageInfo.amount = 0;\r\n          } else {\r\n            graph.edges.push({\r\n              key: itemKey,\r\n              from: productionNode.id,\r\n              to: usageNode.id,\r\n              productionRate: productionInfo.amount,\r\n            });\r\n            usageInfo.amount -= productionInfo.amount;\r\n            productionInfo.amount = 0;\r\n          }\r\n          \r\n          if (usageInfo.amount < EPSILON) {\r\n            i++;\r\n            continue nextDemand;\r\n          }\r\n          j++;\r\n        }\r\n        break;\r\n      }\r\n\r\n      while (i < usedBy.length) {\r\n        const usageInfo = usedBy[i];\r\n        const usageNode = graph.nodes[usageInfo.recipeKey];\r\n        if (usageInfo.amount > EPSILON && this.inputs[itemKey]) {\r\n          let itemNode = graph.nodes[itemKey];\r\n          if (!itemNode) {\r\n            const inputInfo = this.inputs[itemKey];\r\n            itemNode = {\r\n              id: nanoid(),\r\n              key: itemKey,\r\n              type: inputInfo.type,\r\n              multiplier: usageInfo.amount,\r\n            };\r\n            graph.nodes[itemKey] = itemNode;\r\n          } else {\r\n            itemNode.multiplier += usageInfo.amount;\r\n          }\r\n          graph.edges.push({\r\n            key: itemKey,\r\n            from: itemNode.id,\r\n            to: usageNode.id,\r\n            productionRate: usageInfo.amount,\r\n          });\r\n          usageInfo.amount = 0;\r\n        }\r\n        i++;\r\n      }\r\n\r\n      while (j < producedBy.length) {\r\n        const productionInfo = producedBy[j];\r\n        const productionNode = graph.nodes[productionInfo.recipeKey];\r\n        if (productionInfo.amount > EPSILON) {\r\n          let itemNode = graph.nodes[itemKey];\r\n          if (!itemNode) {\r\n            let nodeType = NODE_TYPE.SIDE_PRODUCT;\r\n            if (this.rateTargets[itemKey] || this.maximizeTargets.find((t) => t.key === itemKey)) {\r\n              nodeType = NODE_TYPE.FINAL_PRODUCT;\r\n            } else if (this.hasPointsTarget && items[itemKey].sinkPoints > 0) {\r\n              nodeType = NODE_TYPE.FINAL_PRODUCT;\r\n            }\r\n            itemNode = {\r\n              id: nanoid(),\r\n              key: itemKey,\r\n              type: nodeType,\r\n              multiplier: productionInfo.amount\r\n            };\r\n            graph.nodes[itemKey] = itemNode;\r\n          } else {\r\n            itemNode.multiplier += productionInfo.amount;\r\n          }\r\n          graph.edges.push({\r\n            key: itemKey,\r\n            from: productionNode.id,\r\n            to: itemNode.id,\r\n            productionRate: productionInfo.amount,\r\n          });\r\n          productionInfo.amount = 0;\r\n        }\r\n        j++;\r\n      }\r\n    }\r\n\r\n    return graph;\r\n  }\r\n\r\n  private generateProductionReport(productionGraph: ProductionGraph): Report {\r\n    const report: Report = {\r\n      pointsProduced: 0,\r\n      powerUsageEstimate: 0,\r\n      resourceEfficiencyScore: 0,\r\n      totalBuildArea: 0,\r\n      estimatedFoundations: 0,\r\n      buildingsUsed: {},\r\n      totalMaterialCost: {},\r\n    };\r\n\r\n    for (const [key, node] of Object.entries(productionGraph.nodes)) {\r\n      if (node.type === NODE_TYPE.RECIPE) {\r\n        const recipeInfo = recipes[key];\r\n        const buildingKey = recipeInfo.producedIn;\r\n        const buildingInfo = buildings[buildingKey];\r\n\r\n        report.powerUsageEstimate += node.multiplier * buildingInfo.power;\r\n        report.totalBuildArea += Math.ceil(node.multiplier) * buildingInfo.area;\r\n        if (!report.buildingsUsed[buildingKey]) {\r\n          report.buildingsUsed[buildingKey] = {\r\n            count: Math.ceil(node.multiplier),\r\n            materialCost: {},\r\n          };\r\n        } else {\r\n          report.buildingsUsed[buildingKey].count += Math.ceil(node.multiplier);\r\n        }\r\n\r\n        for (const ingredient of buildingInfo.buildCost) {\r\n          const amount = Math.ceil(node.multiplier) * ingredient.quantity;\r\n          if (!report.buildingsUsed[buildingKey].materialCost[ingredient.itemClass]) {\r\n            report.buildingsUsed[buildingKey].materialCost[ingredient.itemClass] = amount;\r\n          } else {\r\n            report.buildingsUsed[buildingKey].materialCost[ingredient.itemClass] += amount;\r\n          }\r\n          if (!report.totalMaterialCost[ingredient.itemClass]) {\r\n            report.totalMaterialCost[ingredient.itemClass] = amount;\r\n          } else {\r\n            report.totalMaterialCost[ingredient.itemClass] += amount;\r\n          }\r\n        }\r\n        continue;\r\n      }\r\n\r\n      const itemInfo = items[key];\r\n      if (node.type === NODE_TYPE.FINAL_PRODUCT) {\r\n        report.pointsProduced += node.multiplier * itemInfo.sinkPoints;\r\n      } else if (node.type === NODE_TYPE.RESOURCE) {\r\n        report.resourceEfficiencyScore += node.multiplier * this.inputs[key].weight;\r\n      }\r\n    }\r\n\r\n    report.estimatedFoundations = Math.ceil(2 * (report.totalBuildArea / 64));\r\n\r\n    return report;\r\n  }\r\n}\r\n","import React, { createContext, useContext, useReducer, useState, useEffect } from 'react';\r\nimport { nanoid } from 'nanoid';\r\nimport { usePrevious } from '../../hooks/usePrevious';\r\nimport { resources, recipes, items } from '../../data'\r\nimport { POINTS_ITEM_KEY } from '../../utilities/production-solver';\r\n\r\nexport const FACTORY_SETTINGS_VERSION = 'v1_U5';\r\nexport const MAX_PRIORITY = 20;\r\n\r\n// TYPES\r\nexport type ProductionItemOptions = {\r\n  key: string,\r\n  itemKey: string,\r\n  mode: 'per-minute'|'maximize'|string,\r\n  value: string,\r\n};\r\n\r\nexport type WeightingOptions = {\r\n  resources: string,\r\n  power: string,\r\n  buildArea: string,\r\n};\r\n\r\nexport type InputItemOptions = {\r\n  key: string,\r\n  itemKey: string,\r\n  value: string,\r\n  weight: string,\r\n  unlimited: boolean,\r\n};\r\n\r\nexport type RecipeMap = {\r\n  [key: string]: boolean,\r\n};\r\n\r\nexport type FactoryOptions = {\r\n  version: string,\r\n  key: string,\r\n  productionItems: ProductionItemOptions[],\r\n  inputItems: InputItemOptions[],\r\n  inputResources: InputItemOptions[],\r\n  allowHandGatheredItems: boolean,\r\n  weightingOptions: WeightingOptions,\r\n  allowedRecipes: RecipeMap,\r\n};\r\n\r\nexport type ProductionContextType = {\r\n  state: FactoryOptions,\r\n  loaded: boolean,\r\n  dispatch: React.Dispatch<FactoryAction>,\r\n}\r\n\r\n\r\n// CONTEXT\r\nexport const ProductionContext = createContext<ProductionContextType | null>(null);\r\nProductionContext.displayName = 'ProductionContext';\r\n\r\n\r\n// HELPER HOOK\r\nexport function useProductionContext() {\r\n  const ctx = useContext(ProductionContext);\r\n  if (!ctx) {\r\n    throw new Error('ProductionContext is null');\r\n  }\r\n  return ctx;\r\n}\r\n\r\n\r\n// DEFAULTS\r\nfunction getDefaultProductionItem(): ProductionItemOptions {\r\n  return ({\r\n    key: nanoid(),\r\n    itemKey: '',\r\n    mode: 'per-minute',\r\n    value: '10',\r\n  });\r\n}\r\n\r\nfunction getDefaultInputItem(): InputItemOptions {\r\n  return ({\r\n    key: nanoid(),\r\n    itemKey: '',\r\n    value: '10',\r\n    weight: '0',\r\n    unlimited: false,\r\n  });\r\n}\r\n\r\nconst ORDERED_RESOURCES = [\r\n  'Desc_OreIron_C',\r\n  'Desc_OreCopper_C',\r\n  'Desc_Stone_C',\r\n  'Desc_Coal_C',\r\n  'Desc_OreGold_C',\r\n  'Desc_RawQuartz_C',\r\n  'Desc_Sulfur_C',\r\n  'Desc_LiquidOil_C',\r\n  'Desc_OreBauxite_C',\r\n  'Desc_OreUranium_C',\r\n  'Desc_NitrogenGas_C',\r\n  'Desc_Water_C',\r\n];\r\nfunction getInitialInputResources(): InputItemOptions[] {\r\n  return Object.entries(resources)\r\n    .map(([key, data]) => {\r\n      let value = '0';\r\n      let unlimited = false;\r\n      if (key === 'Desc_Water_C') {\r\n        unlimited = true;\r\n      } else {\r\n        value = String(data.maxExtraction);\r\n      }\r\n      return {\r\n        key: key,\r\n        itemKey: key,\r\n        value,\r\n        weight: String(data.relativeValue),\r\n        unlimited,\r\n      };\r\n    })\r\n    .sort((a, b) => {\r\n      let aIndex = ORDERED_RESOURCES.findIndex((r) => r === a.itemKey);\r\n      if (aIndex === -1) aIndex = Infinity;\r\n      let bIndex = ORDERED_RESOURCES.findIndex((r) => r === b.itemKey);\r\n      if (bIndex === -1) bIndex = Infinity;\r\n      return aIndex < bIndex ? -1 : 1;\r\n    });\r\n}\r\n\r\nfunction getInitialWeightingOptions(): WeightingOptions {\r\n  return {\r\n    resources: '1000',\r\n    power: '10',\r\n    buildArea: '1',\r\n  };\r\n}\r\n\r\nfunction getInitialAllowedRecipes(): RecipeMap {\r\n  const recipeMap: RecipeMap = {};\r\n  Object.entries(recipes).forEach(([key, data]) => {\r\n    recipeMap[key] = !data.isAlternate;\r\n  });\r\n  return recipeMap;\r\n}\r\n\r\nfunction getInitialState(): FactoryOptions {\r\n  return {\r\n    version: FACTORY_SETTINGS_VERSION,\r\n    key: nanoid(),\r\n    productionItems: [],\r\n    inputItems: [],\r\n    inputResources: getInitialInputResources(),\r\n    allowHandGatheredItems: false,\r\n    weightingOptions: getInitialWeightingOptions(),\r\n    allowedRecipes: getInitialAllowedRecipes(),\r\n  };\r\n}\r\n\r\n\r\n// REDUCER\r\nexport type FactoryAction = \r\n  | { type: 'ADD_PRODUCTION_ITEM' }\r\n  | { type: 'DELETE_PRODUCTION_ITEM', key: string }\r\n  | { type: 'SET_PRODUCTION_ITEM', data: { key: string, itemKey: string } }\r\n  | { type: 'SET_PRODUCTION_ITEM_AMOUNT', data: { key: string, amount: string } }\r\n  | { type: 'SET_PRODUCTION_ITEM_MODE', data: { key: string, mode: string } }\r\n  | { type: 'ADD_INPUT_ITEM' }\r\n  | { type: 'DELETE_INPUT_ITEM', key: string }\r\n  | { type: 'UPDATE_INPUT_ITEM', data: InputItemOptions }\r\n  | { type: 'UPDATE_INPUT_RESOURCE', data: InputItemOptions }\r\n  | { type: 'SET_RESOURCES_TO_MAP_LIMITS' }\r\n  | { type: 'SET_RESOURCES_TO_0' }\r\n  | { type: 'SET_ALLOW_HAND_GATHERED_ITEMS', active: boolean }\r\n  | { type: 'UPDATE_WEIGHTING_OPTIONS', data: WeightingOptions }\r\n  | { type: 'SET_ALL_WEIGHTS_DEFAULT' }\r\n  | { type: 'SET_RECIPE_ACTIVE', key: string, active: boolean }\r\n  | { type: 'MASS_SET_RECIPES_ACTIVE', alternates: boolean, active: boolean }\r\n  | { type: 'LOAD_FROM_QUERY_PARAM' };\r\n\r\nfunction reducer(state: FactoryOptions, action: FactoryAction): FactoryOptions {\r\n  switch (action.type) {\r\n    case 'ADD_PRODUCTION_ITEM': {\r\n      const newProductionItems = [\r\n        ...state.productionItems,\r\n        getDefaultProductionItem(),\r\n      ];\r\n      return { ...state, productionItems: newProductionItems };\r\n    }\r\n    case 'DELETE_PRODUCTION_ITEM': {\r\n      const newProductionItems = state.productionItems\r\n        .filter((i) => i.key !== action.key);\r\n      return { ...state, productionItems: newProductionItems };\r\n    }\r\n    case 'SET_PRODUCTION_ITEM': {\r\n      const newProductionItems = state.productionItems\r\n        .map((item) => {\r\n          if (item.key === action.data.key) {\r\n            const newItem = { ...item };\r\n            newItem.itemKey = action.data.itemKey;\r\n            return newItem;\r\n          }\r\n          return item;\r\n        });\r\n      return { ...state, productionItems: newProductionItems };\r\n    }\r\n    case 'SET_PRODUCTION_ITEM_AMOUNT': {\r\n      const newProductionItems = state.productionItems\r\n        .map((item) => {\r\n          if (item.key === action.data.key) {\r\n            const newItem = { ...item };\r\n            newItem.value = action.data.amount;\r\n            return newItem;\r\n          }\r\n          return item;\r\n        });\r\n      return { ...state, productionItems: newProductionItems };\r\n    }\r\n    case 'SET_PRODUCTION_ITEM_MODE': {\r\n      const newProductionItems = state.productionItems\r\n        .map((item) => {\r\n          if (item.key === action.data.key) {\r\n            const newItem = { ...item };\r\n            newItem.mode = action.data.mode;\r\n            if (newItem.mode !== item.mode) {\r\n              if (newItem.mode === 'per-minute') {\r\n                newItem.value = '10';\r\n              } else if (newItem.mode === 'maximize') {\r\n                let nextPriority = MAX_PRIORITY;\r\n                while (nextPriority && nextPriority > 0) {\r\n                  // eslint-disable-next-line no-loop-func\r\n                  const priorityTaken = !!state.productionItems.find((i) => i.mode === 'maximize' && i.value === String(nextPriority));\r\n                  if (!priorityTaken) {\r\n                    break;\r\n                  }\r\n                  nextPriority--;\r\n                }\r\n                if (nextPriority > 0) {\r\n                  newItem.value = String(nextPriority);\r\n                } else {\r\n                  newItem.value = `${MAX_PRIORITY}`;\r\n                }\r\n              } else if (item.mode === 'per-minute' || item.mode === 'maximize') {\r\n                newItem.value = '1';\r\n              }\r\n            }\r\n            return newItem;\r\n          }\r\n          return item;\r\n        });\r\n      return { ...state, productionItems: newProductionItems };\r\n    }\r\n    case 'ADD_INPUT_ITEM': {\r\n      const newInputItems = [\r\n        ...state.inputItems,\r\n        getDefaultInputItem(),\r\n      ];\r\n      return { ...state, inputItems: newInputItems };\r\n    }\r\n    case 'DELETE_INPUT_ITEM': {\r\n      const newInputItems = state.inputItems\r\n        .filter((i) => i.key !== action.key);\r\n      return { ...state, inputItems: newInputItems };\r\n    }\r\n    case 'UPDATE_INPUT_ITEM': {\r\n      const newInputItems = state.inputItems\r\n        .map((i) => i.key === action.data.key ? action.data : i);\r\n      return { ...state, inputItems: newInputItems };\r\n    }\r\n    case 'UPDATE_INPUT_RESOURCE': {\r\n      const newInputResources = state.inputResources\r\n        .map((i) => i.key === action.data.key ? action.data : i);\r\n      return { ...state, inputResources: newInputResources };\r\n    }\r\n    case 'SET_RESOURCES_TO_MAP_LIMITS': {\r\n      const newInputResources = getInitialInputResources();\r\n      return { ...state, inputResources: newInputResources };\r\n    }\r\n    case 'SET_RESOURCES_TO_0': {\r\n      const newInputResources = state.inputResources\r\n        .map((data) => ({ ...data, value: '0', unlimited: false }));\r\n      return { ...state, inputResources: newInputResources };\r\n    }\r\n    case 'SET_ALLOW_HAND_GATHERED_ITEMS': {\r\n      return { ...state, allowHandGatheredItems: action.active };\r\n    }\r\n    case 'UPDATE_WEIGHTING_OPTIONS': {\r\n      const newWeightingOptions = { ...action.data };\r\n      return { ...state, weightingOptions: newWeightingOptions };\r\n    }\r\n    case 'SET_ALL_WEIGHTS_DEFAULT': {\r\n      const newWeightingOptions = getInitialWeightingOptions();\r\n      const newInputResources = state.inputResources\r\n        .map((i) => ({ ...i, weight: String(resources[i.itemKey].relativeValue) }));\r\n      return { ...state, weightingOptions: newWeightingOptions, inputResources: newInputResources };\r\n    }\r\n    case 'SET_RECIPE_ACTIVE': {\r\n      const newAllowedRecipes = { ...state.allowedRecipes };\r\n      newAllowedRecipes[action.key] = action.active;\r\n      return { ...state, allowedRecipes: newAllowedRecipes };\r\n    }\r\n    case 'MASS_SET_RECIPES_ACTIVE': {\r\n      const newAllowedRecipes = { ...state.allowedRecipes };\r\n      Object.keys(newAllowedRecipes).forEach((key) => {\r\n        if (action.alternates && recipes[key].isAlternate) {\r\n          newAllowedRecipes[key] = action.active;\r\n        } else if (!action.alternates && !recipes[key].isAlternate) {\r\n          newAllowedRecipes[key] = action.active;\r\n        }\r\n      })\r\n      return { ...state, allowedRecipes: newAllowedRecipes };\r\n    }\r\n    case 'LOAD_FROM_QUERY_PARAM': {\r\n      const params = new URLSearchParams(window.location.search);\r\n      const encodedState = params.get('f');\r\n      if (encodedState) {\r\n        try {\r\n          return decodeState(encodedState);\r\n        } catch (e) {\r\n          console.error(e);\r\n        }\r\n      }\r\n      return state;\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nfunction getItemSlug(itemKey: string) {\r\n  if (itemKey === POINTS_ITEM_KEY) {\r\n    return 'points';\r\n  }\r\n  return items[itemKey].slug;\r\n}\r\n\r\nfunction getItemBySlug(slug: string) {\r\n  if (slug === 'points') {\r\n    return POINTS_ITEM_KEY;\r\n  }\r\n  const itemEntry = Object.entries(items).find(([key, item]) => item.slug === slug);\r\n  if (itemEntry) {\r\n    return itemEntry[0];\r\n  }\r\n  throw new Error('INVALID ITEM SLUG');\r\n}\r\n\r\nfunction getModeSlug(mode: string) {\r\n  if (mode === 'per-minute') return 'per_minute';\r\n  if (mode === 'maximize') return 'maximize';\r\n  const recipeKey = mode;\r\n  const recipeInfo = recipes[recipeKey];\r\n  if (recipeInfo) {\r\n    return recipeInfo.slug;\r\n  } else {\r\n    return 'null';\r\n  }\r\n}\r\n\r\nfunction getModeBySlug(slug: string) {\r\n  if (slug === 'per_minute') return 'per-minute';\r\n  if (slug === 'maximize') return 'maximize';\r\n  const recipeEntry = Object.entries(recipes).find(([key, recipe]) => recipe.slug === slug);\r\n  if (recipeEntry) {\r\n    return recipeEntry[0];\r\n  }\r\n  throw new Error('INVALID RECIPE SLUG');\r\n}\r\n\r\nconst SEP0 = ',';\r\nconst SEP1 = '|';\r\nconst SEP2 = ':';\r\n\r\n// ENCODE/DECODE\r\nfunction encodeState(state: FactoryOptions): string {\r\n  const fields: string[] = [];\r\n\r\n  fields.push(state.version);\r\n\r\n  const allowedRecipesBits = Object.keys((state.allowedRecipes))\r\n    .sort((a, b) => {\r\n      if (a < b) return -1;\r\n      if (a > b) return 1;\r\n      return 0;\r\n    })\r\n    .map((key) => state.allowedRecipes[key] ? '1' : '0')\r\n    .join('');\r\n  fields.push(BigInt(`0b${allowedRecipesBits}`).toString(16));\r\n\r\n  const productionItemsField: string[] = [];\r\n  state.productionItems.forEach((item) => {\r\n    if (!item.itemKey) return;\r\n    productionItemsField.push(`${getItemSlug(item.itemKey)}${SEP2}${getModeSlug(item.mode)}${SEP2}${item.value}`);\r\n  });\r\n  fields.push(productionItemsField.join(SEP1));\r\n\r\n  const inputItemsField: string[] = [];\r\n  state.inputItems.forEach((item) => {\r\n    if (!item.itemKey) return;\r\n    inputItemsField.push(`${getItemSlug(item.itemKey)}${SEP2}${item.value}${SEP2}${item.weight}${SEP2}${item.unlimited ? '1' : '0'}`);\r\n  });\r\n  fields.push(inputItemsField.join(SEP1));\r\n\r\n  const inputResourcesField: string[] = [];\r\n  state.inputResources.forEach((item) => {\r\n    inputResourcesField.push(`${item.value}${SEP2}${item.weight}${SEP2}${item.unlimited ? '1' : '0'}`);\r\n  });\r\n  fields.push(inputResourcesField.join(SEP1));\r\n\r\n  fields.push(`${state.allowHandGatheredItems ? '1' : '0'}`);\r\n\r\n  fields.push(`${state.weightingOptions.resources}${SEP2}${state.weightingOptions.power}${SEP2}${state.weightingOptions.buildArea}`);\r\n\r\n  return fields.join(SEP0);\r\n}\r\n\r\nfunction decodeState(stateStr: string): FactoryOptions {\r\n  const newState: FactoryOptions = getInitialState();\r\n\r\n  const fields = stateStr.split(SEP0);\r\n  if (fields[0] !== FACTORY_SETTINGS_VERSION) throw new Error('VERSION MISMATCH');\r\n  if (fields.length !== 7) throw new Error('INVALID DATA [BAD FIELDS]');\r\n\r\n  const allowedRecipesBits = BigInt(`0x${fields[1]}`)\r\n    .toString(2)\r\n    .padStart(Object.keys(newState.allowedRecipes).length, '0')\r\n    .split('')\r\n    .map((b) => !!parseInt(b));\r\n  Object.keys(newState.allowedRecipes)\r\n    .sort((a, b) => {\r\n      if (a < b) return -1;\r\n      if (a > b) return 1;\r\n      return 0;\r\n    })\r\n    .forEach((key, i) => {\r\n      newState.allowedRecipes[key] = !!allowedRecipesBits[i];\r\n    });\r\n\r\n  const productionItemsStrings = fields[2].split(SEP1);\r\n  if (productionItemsStrings[0]) {\r\n    productionItemsStrings.forEach((str) => {\r\n      const values = str.split(SEP2);\r\n      if (values.length !== 3) throw new Error('INVALID DATA [productionItems]');\r\n      newState.productionItems.push({\r\n        key: nanoid(),\r\n        itemKey: getItemBySlug(values[0]),\r\n        mode: getModeBySlug(values[1]),\r\n        value: values[2],\r\n      });\r\n    });\r\n  }\r\n\r\n  const inputItemsStrings = fields[3].split(SEP1);\r\n  if (inputItemsStrings[0]) {\r\n    inputItemsStrings.forEach((str) => {\r\n      const values = str.split(SEP2);\r\n      if (values.length !== 4) throw new Error('INVALID DATA [inputItems]');\r\n      newState.inputItems.push({\r\n        key: nanoid(),\r\n        itemKey: getItemBySlug(values[0]),\r\n        value: values[1],\r\n        weight: values[2],\r\n        unlimited: !!parseInt(values[3]),\r\n      });\r\n    });\r\n  }\r\n\r\n  const inputResourcesStrings = fields[4].split(SEP1);\r\n  newState.inputResources.forEach((resourceOptions, i) => {\r\n    const values = inputResourcesStrings[i].split(SEP2);\r\n    if (values.length !== 3) throw new Error('INVALID DATA [inputResources]');\r\n    resourceOptions.value = values[0];\r\n    resourceOptions.weight = values[1];\r\n    resourceOptions.unlimited = !!parseInt(values[2]);\r\n  });\r\n\r\n  newState.allowHandGatheredItems = !!parseInt(fields[5]);\r\n\r\n  const weightingOptionsStrings = fields[6].split(SEP2);\r\n  if (weightingOptionsStrings.length !== 3) throw new Error('INVALID DATA [weightingOptions]');\r\n  newState.weightingOptions.resources = weightingOptionsStrings[0];\r\n  newState.weightingOptions.power = weightingOptionsStrings[1];\r\n  newState.weightingOptions.buildArea = weightingOptionsStrings[2];\r\n\r\n  return newState;\r\n}\r\n\r\n\r\n// PROVIDER\r\ntype PropTypes = { children: React.ReactNode };\r\nexport const ProductionProvider = ({ children }: PropTypes) => {\r\n  const [state, dispatch] = useReducer(reducer, getInitialState());\r\n  const [loaded, setLoaded] = useState(false);\r\n\r\n  const prevState = usePrevious(state);\r\n\r\n  useEffect(() => {\r\n    if (!loaded) {\r\n      dispatch({ type: 'LOAD_FROM_QUERY_PARAM' });\r\n      setLoaded(true);\r\n    }\r\n  }, [loaded]);\r\n\r\n  useEffect(() => {\r\n    if (prevState !== state) {\r\n      const encodedState = encodeState(state);\r\n      window.history.replaceState(null, '', window.location.pathname + '?f=' + encodedState);\r\n    }\r\n  }, [prevState, state]);\r\n\r\n  return (\r\n    <ProductionContext.Provider value={{ state, loaded, dispatch }}>\r\n      {children}\r\n    </ProductionContext.Provider>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Button, Dropdown, Input, Grid, Icon } from 'semantic-ui-react';\r\nimport { items, recipes, resources } from '../../../../data';\r\nimport { MAX_PRIORITY, useProductionContext } from '../../../../contexts/production';\r\nimport { POINTS_ITEM_KEY } from '../../../../utilities/production-solver';\r\n\r\nconst itemOptions = Object.keys(items)\r\n  .filter((key) => items[key].producedFromRecipes.length !== 0 && !resources[key])\r\n  .map((key) => ({\r\n    value: key,\r\n    text: items[key].name,\r\n  }))\r\n  .sort((a, b) => {\r\n    return a.text > b.text ? 1 : -1;\r\n  });\r\n\r\nitemOptions.unshift({\r\n  value: POINTS_ITEM_KEY,\r\n  text: 'AWESOME Sink Points (x1000)'\r\n})\r\n\r\nconst baseModeOptions = [\r\n  { value: 'per-minute', text: 'Items Per Min' },\r\n  { value: 'maximize', text: 'Maximize Output' },\r\n];\r\n\r\nconst priorityOptions = Array(MAX_PRIORITY)\r\n  .fill('')\r\n  .map((_, i) => ({ value: `${i + 1}`, text: `Priority: ${i + 1}` }))\r\n  .reverse();\r\n\r\nconst ProductionTab = () => {\r\n  const ctx = useProductionContext();\r\n\r\n  function renderItemInputs() {\r\n    return ctx.state.productionItems.map((data) => {\r\n      const modeOptions = [...baseModeOptions];\r\n      if (data.itemKey) {\r\n        const recipeList = items[data.itemKey]?.producedFromRecipes || [];\r\n        recipeList.forEach((recipeKey) => {\r\n          const recipeInfo = recipes[recipeKey];\r\n          const target = recipeInfo?.products.find((p) => p.itemClass === data.itemKey);\r\n          if (target) {\r\n            const name = recipeInfo.isAlternate ? recipeInfo.name.replace('Alternate: ', '') : 'Base Recipe';\r\n            modeOptions.push({ value: recipeKey, text: `${name} [${target.perMinute}/min]` });\r\n          }\r\n        });\r\n      }\r\n      return (\r\n        <Grid.Row key={data.key}>\r\n          <Grid.Column style={{ flex: '1 1 auto', minWidth: '210px' }}>\r\n            <Dropdown\r\n              fluid\r\n              placeholder=\"Select an item\"\r\n              selection\r\n              search\r\n              clearable\r\n              options={itemOptions}\r\n              value={data.itemKey ? data.itemKey : ''}\r\n              onChange={(e, { value }) => {\r\n                ctx.dispatch({\r\n                  type: 'SET_PRODUCTION_ITEM',\r\n                  data: { key: data.key, itemKey: (value as any) },\r\n                });\r\n              }}\r\n            />\r\n          </Grid.Column>\r\n          <Grid.Column style={{ flex: '1 1 auto', minWidth: '280px', display: 'flex' }}>\r\n            {\r\n              data.mode === 'maximize'\r\n                ? (\r\n                  <Dropdown\r\n                    style={{ flex: '0 0 130px', minWidth: '0px' }}\r\n                    selection\r\n                    options={priorityOptions}\r\n                    value={data.value}\r\n                    onChange={(e, { value }) => {\r\n                      ctx.dispatch({\r\n                        type: 'SET_PRODUCTION_ITEM_AMOUNT',\r\n                        data: { key: data.key, amount: (value as any) },\r\n                      });\r\n                    }}\r\n                  />\r\n                )\r\n                : (\r\n                  <Input\r\n                    style={{ flex: '0 0 130px' }}\r\n                    className='no-spinner'\r\n                    type='number'\r\n                    min='0'\r\n                    step='1'\r\n                    fluid\r\n                    value={data.value}\r\n                    onChange={(e, { value }) => {\r\n                      ctx.dispatch({\r\n                        type: 'SET_PRODUCTION_ITEM_AMOUNT',\r\n                        data: { key: data.key, amount: value },\r\n                      });\r\n                    }}\r\n                    action\r\n                  />\r\n                )\r\n            }\r\n            <Dropdown\r\n              style={{ flex: '1 1 auto', minWidth: '0px' }}\r\n              selection\r\n              options={modeOptions}\r\n              value={data.mode}\r\n              onChange={(e, { value }) => {\r\n                ctx.dispatch({\r\n                  type: 'SET_PRODUCTION_ITEM_MODE',\r\n                  data: { key: data.key, mode: (value as any) },\r\n                });\r\n              }}\r\n            />\r\n          </Grid.Column>\r\n          <Grid.Column style={{ flex: '0 0 70px' }}>\r\n            <Button\r\n              icon\r\n              negative\r\n              onClick={() => { ctx.dispatch({ type: 'DELETE_PRODUCTION_ITEM', key: data.key }); }}\r\n            >\r\n              <Icon name='trash alternate outline' />\r\n            </Button>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      );\r\n    });\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <p>\r\n        Select the items you want to produce. When maximizing multiple outputs, higher priority items will be maximized first. When selecting a recipe, the factory will be forced to use that recipe for the final output.\r\n      </p>\r\n      <Grid>\r\n        {renderItemInputs()}\r\n        <Grid.Row columns={1}>\r\n          <Grid.Column>\r\n            <Button\r\n              primary\r\n              onClick={() => { ctx.dispatch({ type: 'ADD_PRODUCTION_ITEM' })}}\r\n            >\r\n              + Add Product\r\n            </Button>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProductionTab;\r\n","import React from 'react';\r\nimport { Button, Dropdown, Input, Checkbox, Grid, Icon, Header, Divider } from 'semantic-ui-react';\r\nimport { items, resources } from '../../../../data';\r\nimport { useProductionContext } from '../../../../contexts/production';\r\n\r\nconst itemOptions = Object.keys(items)\r\n  .filter((key) => items[key].producedFromRecipes.length !== 0 && items[key].usedInRecipes.length !== 0 && !resources[key])\r\n  .map((key) => ({\r\n    value: key,\r\n    text: items[key].name,\r\n  }))\r\n  .sort((a, b) => {\r\n    return a.text > b.text ? 1 : -1;\r\n  });\r\n\r\n\r\nconst InputsTab = () => {\r\n  const ctx = useProductionContext();\r\n\r\n  function renderItemInputs() {\r\n    return ctx.state.inputItems.map((data) => (\r\n      <Grid.Row key={data.key}>\r\n        <Grid.Column style={{ flex: '1 1 auto' }}>\r\n          <Dropdown\r\n            fluid\r\n            placeholder=\"Select an item\"\r\n            selection\r\n            search\r\n            clearable\r\n            options={itemOptions}\r\n            value={data.itemKey ? data.itemKey : ''}\r\n            onChange={(e, { value }) => {\r\n              ctx.dispatch({\r\n                type: 'UPDATE_INPUT_ITEM',\r\n                data: { ...data, itemKey: (value as string) },\r\n              });\r\n            }}\r\n          />\r\n        </Grid.Column>\r\n        <Grid.Column style={{ flex: '0 0 250px' }}>\r\n          <Input\r\n            className='no-spinner'\r\n            type='number'\r\n            min='0'\r\n            step='1'\r\n            fluid\r\n            value={data.value}\r\n            onChange={(e, { value }) => {\r\n              ctx.dispatch({\r\n                type: 'UPDATE_INPUT_ITEM',\r\n                data: { ...data, value: value },\r\n              });\r\n            }}\r\n            labelPosition='right'\r\n          >\r\n            <input disabled={data.unlimited} />\r\n            <Checkbox\r\n              className='label'\r\n              style={{ fontWeight: 'normal' }}\r\n              label='Unlimited'\r\n              checked={data.unlimited}\r\n              onChange={() => {\r\n                ctx.dispatch({\r\n                  type: 'UPDATE_INPUT_ITEM',\r\n                  data: { ...data, unlimited: !data.unlimited },\r\n                });\r\n              }}\r\n            />\r\n          </Input>\r\n        </Grid.Column>\r\n        <Grid.Column style={{ flex: '0 0 70px' }}>\r\n          <Button\r\n            icon\r\n            negative\r\n            onClick={() => { ctx.dispatch({ type: 'DELETE_INPUT_ITEM', key: data.key }); }}\r\n          >\r\n            <Icon name='trash alternate outline' />\r\n          </Button>\r\n        </Grid.Column>\r\n      </Grid.Row>\r\n    ));\r\n  }\r\n\r\n  function renderWeightInputs() {\r\n    const weightingOptions = ctx.state.weightingOptions;\r\n    return (\r\n      <>\r\n        <Grid.Row>\r\n          <Grid.Column style={{ flex: '0 0 180px', display: 'flex', alignItems: 'center' }}>\r\n            Resource Efficiency\r\n          </Grid.Column>\r\n          <Grid.Column style={{ flex: '1 1 auto' }}>\r\n            <Input\r\n              className='no-spinner'\r\n              type='number'\r\n              min='0'\r\n              step='1'\r\n              fluid\r\n              value={weightingOptions.resources}\r\n              onChange={(e, { value }) => {\r\n                ctx.dispatch({\r\n                  type: 'UPDATE_WEIGHTING_OPTIONS',\r\n                  data: { ...weightingOptions, resources: value },\r\n                });\r\n              }}\r\n            >\r\n            </Input>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n        <Grid.Row>\r\n          <Grid.Column style={{ flex: '0 0 180px', display: 'flex', alignItems: 'center' }}>\r\n            Power Efficiency\r\n          </Grid.Column>\r\n          <Grid.Column style={{ flex: '1 1 auto' }}>\r\n            <Input\r\n              className='no-spinner'\r\n              type='number'\r\n              min='0'\r\n              step='1'\r\n              fluid\r\n              value={weightingOptions.power}\r\n              onChange={(e, { value }) => {\r\n                ctx.dispatch({\r\n                  type: 'UPDATE_WEIGHTING_OPTIONS',\r\n                  data: { ...weightingOptions, power: value },\r\n                });\r\n              }}\r\n            >\r\n            </Input>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n        <Grid.Row>\r\n          <Grid.Column style={{ flex: '0 0 180px', display: 'flex', alignItems: 'center' }}>\r\n            Build Area Efficiency\r\n          </Grid.Column>\r\n          <Grid.Column style={{ flex: '1 1 auto' }}>\r\n            <Input\r\n              className='no-spinner'\r\n              type='number'\r\n              min='0'\r\n              step='1'\r\n              fluid\r\n              value={weightingOptions.buildArea}\r\n              onChange={(e, { value }) => {\r\n                ctx.dispatch({\r\n                  type: 'UPDATE_WEIGHTING_OPTIONS',\r\n                  data: { ...weightingOptions, buildArea: value },\r\n                });\r\n              }}\r\n            >\r\n            </Input>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </>\r\n    )\r\n  }\r\n\r\n  function renderResourceInputs() {\r\n    return ctx.state.inputResources.map((data) => (\r\n      <Grid.Row key={data.key}>\r\n        <Grid.Column style={{ flex: '1 1 auto', display: 'flex', alignItems: 'center', minWidth: '120px' }}>\r\n          {items[data.itemKey].name}\r\n        </Grid.Column>\r\n        <Grid.Column style={{ flex: '2 1 auto', minWidth: '210px' }}>\r\n          <Input\r\n            className='no-spinner'\r\n            type='number'\r\n            min='0'\r\n            step='1'\r\n            fluid\r\n            value={data.value}\r\n            onChange={(e, { value }) => {\r\n              ctx.dispatch({\r\n                type: 'UPDATE_INPUT_RESOURCE',\r\n                data: { ...data, value: value },\r\n              });\r\n            }}\r\n            labelPosition='right'\r\n          >\r\n            <input disabled={data.unlimited} />\r\n            <Checkbox\r\n              className='label'\r\n              style={{ fontWeight: 'normal' }}\r\n              label='Unlimited'\r\n              checked={data.unlimited}\r\n              onChange={() => {\r\n                ctx.dispatch({\r\n                  type: 'UPDATE_INPUT_RESOURCE',\r\n                  data: { ...data, unlimited: !data.unlimited },\r\n                });\r\n              }}\r\n            />\r\n          </Input>\r\n        </Grid.Column>\r\n        <Grid.Column style={{ flex: '1.5 1 auto', minWidth: '160px' }}>\r\n          <Input\r\n            className='no-spinner'\r\n            type='number'\r\n            min='0'\r\n            step='1'\r\n            fluid\r\n            value={data.weight}\r\n            onChange={(e, { value }) => {\r\n              ctx.dispatch({\r\n                type: 'UPDATE_INPUT_RESOURCE',\r\n                data: { ...data, weight: value },\r\n              });\r\n            }}\r\n            label='Weight'\r\n          />\r\n        </Grid.Column>\r\n      </Grid.Row>\r\n    ));\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Header>Input Items</Header>\r\n      <p>\r\n        Select the items that you already have available and don't need to produce in this factory.\r\n      </p>\r\n      <Grid>\r\n        {renderItemInputs()}\r\n        <Grid.Row>\r\n          <Grid.Column>\r\n            <Button\r\n              primary\r\n              onClick={() => { ctx.dispatch({ type: 'ADD_INPUT_ITEM' }) }}\r\n            >\r\n              + Add Input\r\n            </Button>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n      <Divider />\r\n      <Header>Weighting Options</Header>\r\n      <p>\r\n        Adjust the weights affecting the importance of various properties of the factory. A value of 0 indicates that that property is not considered during factory layout.\r\n      </p>\r\n      <Grid>\r\n        <Grid.Row>\r\n          <Grid.Column>\r\n            <Button\r\n              primary\r\n              onClick={() => { ctx.dispatch({ type: 'SET_ALL_WEIGHTS_DEFAULT' }) }}\r\n            >\r\n              Reset all weights\r\n            </Button>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n        {renderWeightInputs()}\r\n      </Grid>\r\n      <Divider />\r\n      <Header>Raw Resources</Header>\r\n      <p>\r\n        Select the raw resources that are available to your factory. The default values are set to the map limits. The weight value is a number representing how valuable that resource is when comparing recipes. The defaults are calculated automatically according to node rarity.\r\n      </p>\r\n      <Grid>\r\n        <Grid.Row columns={1}>\r\n          <Grid.Column>\r\n            <Button\r\n              primary\r\n              onClick={() => { ctx.dispatch({ type: 'SET_RESOURCES_TO_MAP_LIMITS' }) }}\r\n            >\r\n              Set to Maximum\r\n            </Button>\r\n            <Button\r\n              primary\r\n              onClick={() => { ctx.dispatch({ type: 'SET_RESOURCES_TO_0' }) }}\r\n            >\r\n              Set to 0\r\n            </Button>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n        <Grid.Row columns={1}>\r\n          <Grid.Column>\r\n            <Checkbox\r\n              label='Allow hand-gathered resources'\r\n              checked={ctx.state.allowHandGatheredItems}\r\n              onChange={(e, { checked }) => { ctx.dispatch({ type: 'SET_ALLOW_HAND_GATHERED_ITEMS', active: !!checked }) }}\r\n              />\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n        {renderResourceInputs()}\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default InputsTab;\r\n","import React, { useState, useMemo, useCallback } from 'react';\r\nimport { Button, Input, Checkbox, Grid, Header, List } from 'semantic-ui-react';\r\nimport { recipes } from '../../../../data';\r\nimport { useProductionContext } from '../../../../contexts/production';\r\n\r\nconst cleanAltNameRegex = /^Alternate: /;\r\nconst baseRecipes: { key: string, label: string }[] = [];\r\nconst altRecipes: { key: string, label: string }[] = [];\r\nObject.entries(recipes)\r\n  .forEach(([key, data]) => {\r\n    if (data.isAlternate) {\r\n      altRecipes.push({\r\n        key,\r\n        label: data.name.replace(cleanAltNameRegex, ''),\r\n      });\r\n    } else {\r\n      baseRecipes.push({\r\n        key,\r\n        label: data.name,\r\n      });\r\n    }\r\n  });\r\nbaseRecipes.sort((a, b) => (a.label > b.label ? 1 : -1));\r\naltRecipes.sort((a, b) => (a.label > b.label ? 1 : -1));\r\n\r\nconst RecipesTab = () => {\r\n  const ctx = useProductionContext();\r\n  const [altRecipeSearch, setAltRecipeSearch] = useState('');\r\n  const [baseRecipeSearch, setBaseRecipeSearch] = useState('');\r\n\r\n  const renderRecipeList = useCallback((recipeList: { key: string, label: string }[]) => {\r\n    return recipeList.map(({ key, label }) => ({\r\n      label,\r\n      component: (\r\n        <List.Item key={key}>\r\n          <Checkbox\r\n            label={label}\r\n            checked={ctx.state.allowedRecipes[key]}\r\n            onChange={() => {\r\n              ctx.dispatch({\r\n                type: 'SET_RECIPE_ACTIVE',\r\n                key,\r\n                active: !ctx.state.allowedRecipes[key],\r\n              });\r\n            }}\r\n          />\r\n        </List.Item>\r\n      )\r\n    }));\r\n  }, [ctx]);\r\n\r\n  const renderedBaseRecipes = useMemo(() => renderRecipeList(baseRecipes), [renderRecipeList]);\r\n  const renderedAltRecipes = useMemo(() => renderRecipeList(altRecipes), [renderRecipeList]);\r\n\r\n  function renderRecipeOptions(alternates: boolean) {\r\n    const [searchValue, setSearchValue] = alternates\r\n      ? [altRecipeSearch, setAltRecipeSearch]\r\n      : [baseRecipeSearch, setBaseRecipeSearch];\r\n    const rendered = alternates ? renderedAltRecipes : renderedBaseRecipes\r\n    return (\r\n      <>\r\n        <Input\r\n          placeholder='Search...'\r\n          fluid\r\n          action\r\n          value={searchValue}\r\n          onChange={(e, { value }) => { setSearchValue(value); }}\r\n        >\r\n          <input />\r\n          <Button onClick={() => { ctx.dispatch({ type: 'MASS_SET_RECIPES_ACTIVE', alternates, active: true }) }}>\r\n            All\r\n          </Button>\r\n          <Button onClick={() => { ctx.dispatch({ type: 'MASS_SET_RECIPES_ACTIVE', alternates, active: false }) }}>\r\n            None\r\n          </Button>\r\n        </Input>\r\n        <List>\r\n          {rendered.filter(({ label }) => label.toLowerCase().includes(searchValue)).map(({ component }) => component)}\r\n        </List>\r\n      </>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <p>\r\n        Select the recipes that you want to be considered in this factory.\r\n      </p>\r\n      <Grid columns={2} divided={true}>\r\n        <Grid.Row>\r\n          <Grid.Column>\r\n            <Header>Alternate Recipes</Header>\r\n            {renderRecipeOptions(true)}\r\n          </Grid.Column>\r\n          <Grid.Column>\r\n            <Header>Base Recipes</Header>\r\n            {renderRecipeOptions(false)}\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RecipesTab;\r\n","import React, { useState } from 'react';\r\nimport { Container, Menu } from 'semantic-ui-react';\r\nimport ProductionTab from './ProductionTab';\r\nimport InputsTab from './InputsTab';\r\nimport RecipesTab from './RecipesTab';\r\n\r\nconst PlannerOptions = () => {\r\n  const [activeTab, setActiveTab] = useState('production');\r\n\r\n  function handleSetTab(e: any, data: any) {\r\n    setActiveTab(data.name);\r\n  }\r\n\r\n  function renderTab() {\r\n    switch (activeTab) {\r\n      case 'production':\r\n        return <ProductionTab />\r\n      case 'inputs':\r\n        return <InputsTab />\r\n      case 'recipes':\r\n        return <RecipesTab />\r\n      default:\r\n        return null;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container fluid>\r\n      <Menu pointing secondary attached=\"top\" fluid widths={3}>\r\n        <Menu.Item\r\n          name='production'\r\n          active={activeTab === 'production'}\r\n          onClick={handleSetTab}\r\n        >\r\n          Production\r\n        </Menu.Item>\r\n        <Menu.Item\r\n          name='inputs'\r\n          active={activeTab === 'inputs'}\r\n          onClick={handleSetTab}\r\n        >\r\n          Inputs\r\n        </Menu.Item>\r\n        <Menu.Item\r\n          name='recipes'\r\n          active={activeTab === 'recipes'}\r\n          onClick={handleSetTab}\r\n        >\r\n          Recipes\r\n        </Menu.Item>\r\n      </Menu>\r\n      <div style={{ padding: '20px 0px' }}>\r\n        {renderTab()}\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default PlannerOptions;\r\n","import React, { useMemo } from 'react';\r\nimport { nanoid } from 'nanoid';\r\nimport Cytoscape, { Stylesheet } from 'cytoscape';\r\nimport klay from 'cytoscape-klay';\r\nimport GraphVisualizer from 'react-cytoscapejs';\r\nimport { ProductionGraph, GraphNode, GraphEdge, NODE_TYPE } from '../../../../utilities/production-solver';\r\nimport { items, recipes, buildings } from '../../../../data';\r\n\r\nCytoscape.use(klay);\r\n\r\nconst layout = {\r\n  name: 'klay',\r\n  padding: 40,\r\n  klay: {\r\n    direction: 'RIGHT',\r\n    edgeRouting: 'ORTHOGONAL',\r\n    nodePlacement: 'LINEAR_SEGMENTS',\r\n    edgeSpacingFactor: 0.2,\r\n    inLayerSpacingFactor: 0.7,\r\n    spacing: 70,\r\n    thoroughness: 10,\r\n  },\r\n};\r\n\r\nconst stylesheet: Stylesheet[] = [\r\n  {\r\n    selector: 'core',\r\n    style: {\r\n      'active-bg-color': '#000',\r\n      'active-bg-opacity': 0,\r\n      'active-bg-size': 0,\r\n      'selection-box-color': '#000',\r\n      'selection-box-border-color': '#000',\r\n      'selection-box-border-width': 0,\r\n      'selection-box-opacity': 0,\r\n      'outside-texture-bg-color': '#000',\r\n      'outside-texture-bg-opacity': 0,\r\n    },\r\n  },\r\n  {\r\n    selector: 'node',\r\n    style: {\r\n      'label': 'data(label)',\r\n      'text-valign': 'center',\r\n      'text-halign': 'center',\r\n      'height': '30px',\r\n      'width': '140px',\r\n      'text-max-width': '160px',\r\n      'padding-top': '20px',\r\n      'overlay-padding': 0,\r\n      'overlay-opacity': 0,\r\n      'text-wrap': 'wrap',\r\n      'font-size': '14px',\r\n    },\r\n  },\r\n  {\r\n    selector: 'edge',\r\n    style: {\r\n      'label': 'data(label)',\r\n      'width': 1,\r\n      'curve-style': 'bezier',\r\n      'control-point-step-size': 100,\r\n      'target-arrow-shape': 'triangle-backcurve',\r\n      'arrow-scale': 1.2,\r\n      'overlay-padding': 0,\r\n      'overlay-opacity': 0,\r\n      'text-wrap': 'wrap',\r\n      'font-size': '13px',\r\n    },\r\n  },\r\n  {\r\n    selector: 'edge.loop',\r\n    style: {\r\n      'loop-direction': '180deg',\r\n      'loop-sweep': '-40deg',\r\n      'edge-distances': 'node-position',\r\n      'source-endpoint': '-15% 50%',\r\n      'target-endpoint': '15% 50%',\r\n    },\r\n  },\r\n  {\r\n    selector: 'node.item-shape',\r\n    style: {\r\n      'shape': 'ellipse',\r\n    },\r\n  },\r\n  {\r\n    selector: 'node.recipe-shape',\r\n    style: {\r\n      'shape': 'round-rectangle',\r\n    },\r\n  },\r\n  {\r\n    selector: 'node.final-product',\r\n    style: {\r\n      'background-color': '#61e873',\r\n    },\r\n  },\r\n  {\r\n    selector: 'node.side-product',\r\n    style: {\r\n      'background-color': '#f371e2',\r\n    },\r\n  },\r\n  {\r\n    selector: 'node.input',\r\n    style: {\r\n      'background-color': '#e86161',\r\n    },\r\n  },\r\n  {\r\n    selector: 'node.hand-gathered',\r\n    style: {\r\n      'background-color': '#9061e8',\r\n    },\r\n  },\r\n  {\r\n    selector: 'node.resource',\r\n    style: {\r\n      'background-color': '#e8a761',\r\n    },\r\n  },\r\n  {\r\n    selector: 'node.recipe',\r\n    style: {\r\n      'background-color': '#61c2e8',\r\n    },\r\n  },\r\n  {\r\n    selector: 'node.nuclear',\r\n    style: {\r\n      'background-color': '#f0ed4c',\r\n    },\r\n  },\r\n];\r\n\r\nconst NODE_COLOR_CLASS = {\r\n  [NODE_TYPE.FINAL_PRODUCT]: 'final-product',\r\n  [NODE_TYPE.SIDE_PRODUCT]: 'side-product',\r\n  [NODE_TYPE.INPUT_ITEM]: 'input',\r\n  [NODE_TYPE.HAND_GATHERED_RESOURCE]: 'hand-gathered',\r\n  [NODE_TYPE.RESOURCE]: 'resource',\r\n  [NODE_TYPE.RECIPE]: 'recipe',\r\n};\r\n\r\nfunction truncateFloat(n: number) {\r\n  return n.toFixed(4).replace(/\\.?0+$/, '');\r\n}\r\n\r\nfunction getNodeLabel(node: GraphNode) {\r\n  let label = '';\r\n  let amountText = '';\r\n  if (node.type === NODE_TYPE.RECIPE) {\r\n    const recipe = recipes[node.key];\r\n    label = recipe.name;\r\n    amountText = `${truncateFloat(node.multiplier)}x ${buildings[recipe.producedIn].name}`;\r\n  } else {\r\n    const item = items[node.key];\r\n    label = item.name;\r\n    amountText = `${truncateFloat(node.multiplier)} / min`;\r\n  }\r\n  return `${label}\\n${amountText}`;\r\n}\r\n\r\nfunction getNodeClasses(node: GraphNode) {\r\n  const classes = [];\r\n  if (node.type === NODE_TYPE.RECIPE) {\r\n    classes.push('recipe-shape');\r\n    const recipe = recipes[node.key];\r\n    if (recipe.producedIn === 'Build_GeneratorNuclear_C') {\r\n      classes.push('nuclear');\r\n    } else {\r\n      classes.push(NODE_COLOR_CLASS[node.type]);\r\n    }\r\n  } else {\r\n    classes.push('item-shape');\r\n    classes.push(NODE_COLOR_CLASS[node.type]);\r\n  }\r\n  return classes;\r\n}\r\n\r\nfunction getEdgeLabel(edge: GraphEdge) {\r\n  const item = items[edge.key];\r\n  const label = item.name;\r\n  const amountText = `${truncateFloat(edge.productionRate)} / min`;\r\n  return `${label}\\n${amountText}`;\r\n}\r\n\r\ninterface Props {\r\n  activeGraph: ProductionGraph | null,\r\n  errorMessage: string,\r\n}\r\n\r\nconst ProductionGraphTab = (props: Props) => {\r\n  const { activeGraph, errorMessage } = props;\r\n\r\n  const graphProps = useMemo<any>(() => {\r\n    if (activeGraph == null) {\r\n      return null;\r\n    }\r\n\r\n    const key = nanoid();\r\n    const elements: any[] = [];\r\n\r\n    Object.entries(activeGraph.nodes).forEach(([key, node]) => {\r\n      elements.push({\r\n        group: 'nodes',\r\n        data: {\r\n          id: node.id,\r\n          label: getNodeLabel(node),\r\n        },\r\n        classes: getNodeClasses(node),\r\n      });\r\n    });\r\n    activeGraph.edges.forEach((edge) => {\r\n      elements.push({\r\n        group: 'edges',\r\n        data: {\r\n          source: edge.from,\r\n          target: edge.to,\r\n          label: getEdgeLabel(edge),\r\n        },\r\n        classes: edge.from === edge.to ? ['loop'] : undefined,\r\n      });\r\n    });\r\n    \r\n    return { key, elements };\r\n  }, [activeGraph]);\r\n\r\n  return (\r\n    <div style={{ height: '900px', display: 'flex', flexDirection:'column', alignItems: 'center', justifyContent: 'center', border: '1px solid black' }}>\r\n      {\r\n        graphProps != null\r\n        ? (\r\n            <GraphVisualizer\r\n              key={graphProps.key}\r\n              elements={graphProps.elements}\r\n              layout={layout}\r\n              stylesheet={stylesheet}\r\n              boxSelectionEnabled={false}\r\n              autounselectify={true}\r\n              wheelSensitivity={0.1}\r\n              maxZoom={3.0}\r\n              minZoom={0.1}\r\n              style={{ height: '100%', width: '100%', overflow: 'hidden' }}\r\n            />\r\n        )\r\n        : (\r\n          <>\r\n            <div>\r\n              No graph available\r\n            </div>\r\n            {errorMessage\r\n              ? (\r\n                <div>\r\n                  {`\\nERROR: ${errorMessage}`}\r\n                </div>\r\n              )\r\n              : null}\r\n          </>\r\n        )\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProductionGraphTab;\r\n","import React from 'react';\r\nimport { Container, Header, Icon, List } from 'semantic-ui-react';\r\nimport { buildings, items } from '../../../../data';\r\nimport { Report } from '../../../../utilities/production-solver';\r\n\r\nfunction formatFloat(n: number) {\r\n  return n.toLocaleString(undefined, { maximumFractionDigits: 3 });\r\n}\r\n\r\ninterface Props {\r\n  report: Report | null,\r\n}\r\n\r\nconst ReportTab = (props: Props) => {\r\n  const { report } = props;\r\n\r\n  // TODO: Use stylesheets ya dingus\r\n  function renderReport() {\r\n    return (\r\n      <>\r\n        <Header size='huge'>Statistics</Header>\r\n        <List celled size='large' style={{ marginBottom: '30px' }}>\r\n          <List.Item style={{ paddingTop: '5px', paddingBottom: '5px', marginBottom: '10px' }}>\r\n            <List.Content>\r\n              <List.Header style={{ marginBottom: '5px' }}>Points Produced</List.Header>\r\n              {formatFloat(report!.pointsProduced)}\r\n            </List.Content>\r\n          </List.Item>\r\n          <List.Item style={{ paddingTop: '5px', paddingBottom: '5px', marginBottom: '10px' }}>\r\n            <List.Content>\r\n              <List.Header style={{ marginBottom: '5px' }}>Estimated Power {report!.powerUsageEstimate < 0 ? 'Production' : 'Usage'}</List.Header>\r\n              {formatFloat(Math.abs(report!.powerUsageEstimate))} MW\r\n            </List.Content>\r\n          </List.Item>\r\n          <List.Item style={{ paddingTop: '5px', paddingBottom: '5px', marginBottom: '10px' }}>\r\n            <List.Content>\r\n              <List.Header style={{ marginBottom: '5px' }}>Resource Usage Score</List.Header>\r\n              {formatFloat(report!.resourceEfficiencyScore)}\r\n            </List.Content>\r\n          </List.Item>\r\n          <List.Item style={{ paddingTop: '5px', paddingBottom: '5px', marginBottom: '10px' }}>\r\n            <List.Content>\r\n              <List.Header style={{ marginBottom: '5px' }}>Total Build Area</List.Header>\r\n              {formatFloat(report!.totalBuildArea)} m²\r\n            </List.Content>\r\n          </List.Item>\r\n          <List.Item style={{ paddingTop: '5px', paddingBottom: '15px' }}>\r\n            <List.Content>\r\n              <List.Header style={{ marginBottom: '5px' }}>Estimated Minimal Foundations</List.Header>\r\n              {formatFloat(report!.estimatedFoundations)} foundations ({formatFloat(report!.estimatedFoundations * 8)} Concrete)\r\n            </List.Content>\r\n          </List.Item>\r\n        </List>\r\n\r\n        <Header size='huge'>Buildings</Header>\r\n        <List celled>\r\n          {renderBuildingsUsed()}\r\n          <List.Item style={{ paddingBottom: '10px' }}>\r\n            <List.Content>\r\n              <Header size='medium'>Total</Header>\r\n              <List.List>\r\n                {\r\n                  Object.entries(report!.totalMaterialCost)\r\n                    .sort((a, b) => {\r\n                      if (a[1] > b[1]) return -1;\r\n                      if (a[1] < b[1]) return 1;\r\n                      return 0;\r\n                    })\r\n                    .map(([itemKey, count]) => (\r\n                      <List.Item key={itemKey}>\r\n                        <Icon name='triangle right' />\r\n                        <List.Content>\r\n                          <b style={{ marginRight: '3px' }}>{items[itemKey].name}</b> x{formatFloat(count)}\r\n                        </List.Content>\r\n                      </List.Item>\r\n                    ))\r\n                }\r\n              </List.List>\r\n            </List.Content>\r\n          </List.Item>\r\n        </List>\r\n      </>\r\n    );\r\n  }\r\n\r\n  function renderBuildingsUsed() {\r\n    return Object.entries(report!.buildingsUsed).map(([buildingKey, usageInfo]) => (\r\n      <List.Item key={buildingKey} style={{ paddingBottom: '10px' }}>\r\n        <List.Content>\r\n          <Header size='medium'>{buildings[buildingKey].name} <span style={{ fontSize: '14px', marginLeft: '3px' }}>x{usageInfo.count}</span></Header>\r\n          <List.List>\r\n            {\r\n              Object.entries(usageInfo.materialCost)\r\n                .sort((a, b) => {\r\n                  if (a[1] > b[1]) return -1;\r\n                  if (a[1] < b[1]) return 1;\r\n                  return 0;\r\n                })\r\n                .map(([itemKey, count]) => (\r\n                  <List.Item key={itemKey}>\r\n                    <Icon name='triangle right' />\r\n                    <List.Content>\r\n                      <b style={{ marginRight: '3px' }}>{items[itemKey].name}</b> x{formatFloat(count)}\r\n                    </List.Content>\r\n                  </List.Item>\r\n                ))\r\n            }\r\n          </List.List>\r\n        </List.Content>\r\n      </List.Item>\r\n    ))\r\n  }\r\n  \r\n  return (\r\n    <div style={{ marginTop: '10px' }}>\r\n      {\r\n      !report\r\n        ? (\r\n          <Header>\r\n            No data available\r\n          </Header>\r\n        )\r\n        : renderReport()\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReportTab;\r\n","import React, { useCallback, useEffect, useState } from 'react';\r\nimport _ from 'lodash';\r\nimport { Container, Menu, Button, Checkbox } from 'semantic-ui-react';\r\nimport ProductionGraphTab from './ProductionGraphTab';\r\nimport ReportTab from './ReportTab';\r\nimport { ProductionSolver, SolverResults } from '../../../utilities/production-solver';\r\nimport { FactoryOptions, useProductionContext } from '../../../contexts/production';\r\nimport { usePrevious } from '../../../hooks/usePrevious';\r\n\r\nconst _handleCalculateFactory = _.debounce(async (state: FactoryOptions, setSolverResults: React.Dispatch<React.SetStateAction<SolverResults | null>>) => {\r\n  try {\r\n    const solver = new ProductionSolver(state);\r\n    const results = await solver.exec();\r\n    setSolverResults((prevState) => {\r\n      if (!prevState || prevState.timestamp < results.timestamp) {\r\n        return results;\r\n      }\r\n      return prevState;\r\n    });\r\n  } catch (e: any) {\r\n    setSolverResults({\r\n      productionGraph: null,\r\n      report: null,\r\n      timestamp: performance.now(),\r\n      error: e.message,\r\n    });\r\n  }\r\n}, 500, { leading: true, trailing: true });\r\n\r\nconst PlannerResults = () => {\r\n  const [activeTab, setActiveTab] = useState('production-graph');\r\n  const [autoCalc, setAutoCalc] = useState(true);\r\n  const [loaded, setLoaded] = useState(false);\r\n  const [solverResults, setSolverResults] = useState<SolverResults | null>(null);\r\n  const ctx = useProductionContext();\r\n  const prevState = usePrevious(ctx.state);\r\n\r\n  const handleCalculateFactory = useCallback(() => {\r\n    _handleCalculateFactory(ctx.state, setSolverResults)\r\n  }, [ctx.state]);\r\n\r\n  function handleSetTab(e: any, data: any) {\r\n    setActiveTab(data.name);\r\n  }\r\n\r\n  const handleSetAutoCalc = (checked: boolean) => {\r\n    setAutoCalc(checked);\r\n    if (checked) {\r\n      handleCalculateFactory();\r\n    }\r\n  };\r\n\r\n  function renderTab() {\r\n    switch (activeTab) {\r\n      case 'production-graph':\r\n        return <ProductionGraphTab activeGraph={solverResults?.productionGraph || null} errorMessage={solverResults?.error || ''} />\r\n      case 'report':\r\n        return <ReportTab report={solverResults?.report || null} />\r\n      default:\r\n        return null;\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!loaded) {\r\n      handleCalculateFactory();\r\n      setLoaded(true);\r\n    } else if (autoCalc && prevState !== ctx.state) {\r\n      handleCalculateFactory();\r\n    }\r\n  }, [autoCalc, ctx.state, handleCalculateFactory, loaded, prevState]);\r\n\r\n  return (\r\n    <Container fluid>\r\n      <Menu pointing secondary attached=\"top\">\r\n        <Menu.Item\r\n          name='production-graph'\r\n          active={activeTab === 'production-graph'}\r\n          onClick={handleSetTab}\r\n        >\r\n          Production Graph\r\n        </Menu.Item>\r\n        <Menu.Item\r\n          name='report'\r\n          active={activeTab === 'report'}\r\n          onClick={handleSetTab}\r\n        >\r\n          Report\r\n        </Menu.Item>\r\n      </Menu>\r\n      <div style={{ padding: '20px 0px' }}>\r\n        <Button primary onClick={handleCalculateFactory} disabled={autoCalc} style={{ marginBottom: '10px', marginRight: '15px' }}>\r\n          Calculate\r\n        </Button>\r\n        <Checkbox\r\n          label='Auto-calculate (turn this off if changing options is too slow)'\r\n          toggle\r\n          checked={autoCalc}\r\n          onChange={(e, { checked }) => { handleSetAutoCalc(!!checked); }}\r\n        />\r\n        {renderTab()}\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default PlannerResults;\r\n","import React from 'react';\r\nimport seedrandom from 'seedrandom';\r\nimport { Container, Header, Grid } from 'semantic-ui-react';\r\nimport PlannerOptions from './PlannerOptions';\r\nimport PlannerResults from './PlannerResults';\r\nimport { ProductionProvider } from '../../contexts/production';\r\n\r\nconst ONE_HOUR = 1000 * 60 * 60;\r\nconst seed = Math.floor(new Date().getTime() / ONE_HOUR);\r\nconst rng = seedrandom(String(seed));\r\n\r\nconst TIPS = [\r\n  'Pet the lizard doggo!',\r\n  'Get back to work!',\r\n  'Update 5 now available!',\r\n  'Arachnophobia mode enabled.',\r\n  'FICSIT does not waste.',\r\n  'Linear algebra!',\r\n  'Do not pet the spiders.',\r\n  'BEAMS.',\r\n  'Just 5 more minutes...',\r\n  'Thanks, Jace. Helps a lot!',\r\n];\r\n\r\nconst TIP_INDEX = Math.floor(rng() * TIPS.length);\r\nconst TIP = `FICSIT Tip #${TIP_INDEX}: ${TIPS[TIP_INDEX]}`\r\n\r\nconst ProductionPlanner = () => {\r\n  return (\r\n    <>\r\n      <Header as='h1'>Production Planner</Header>\r\n      <p>\r\n        {TIP}\r\n      </p>\r\n      <Container fluid>\r\n        <ProductionProvider>\r\n          <Factory />\r\n        </ProductionProvider>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProductionPlanner;\r\n\r\nconst Factory = () => {\r\n  return (\r\n    <>\r\n      <Grid columns={2}>\r\n        <Grid.Column width={5}>\r\n          <PlannerOptions />\r\n        </Grid.Column>\r\n        <Grid.Column width={11}>\r\n          <PlannerResults />\r\n        </Grid.Column>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Container, Header, Menu } from 'semantic-ui-react';\r\nimport ProductionPlanner from '../ProductionPlanner';\r\n\r\nconst Main = () => {\r\n  return (\r\n    <Container fluid>\r\n      <Menu fixed='top' size=\"massive\">\r\n        <Container fluid>\r\n          <Menu.Item as='a' header >\r\n            Yet Another Factory Planner\r\n          </Menu.Item>\r\n          <Menu.Item>\r\n            <Header style={{ color: 'red', fontWeight: 'bold' }}>This site is in ALPHA and is subject to breaking changes without warning!!</Header>\r\n          </Menu.Item>\r\n        </Container>\r\n      </Menu>\r\n      <Container fluid style={{ padding: '0px 50px', paddingTop: '70px' }}>\r\n        <ProductionPlanner />\r\n      </Container>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import React from 'react';\nimport Main from './containers/Main';\n\nfunction App() {\n  return (\n    <Main />\n  );\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'semantic-ui-css/semantic.css';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}