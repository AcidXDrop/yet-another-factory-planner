{"version":3,"sources":["data/index.ts","contexts/production/index.tsx","containers/ProductionPlanner/PlannerOptions/ProductionTab/index.tsx","containers/ProductionPlanner/PlannerOptions/InputsTab/index.tsx","containers/ProductionPlanner/PlannerOptions/RecipesTab/index.tsx","containers/ProductionPlanner/PlannerOptions/index.tsx","containers/ProductionPlanner/PlannerResults/index.tsx","containers/ProductionPlanner/index.tsx","containers/Main/index.tsx","App.tsx","index.tsx"],"names":["items","itemsRaw","itemRecipeMap","itemRecipeMapRaw","recipes","recipesRaw","resources","resourcesRaw","ProductionContext","createContext","useProductionContext","ctx","useContext","Error","getInitialInputResources","Object","entries","map","key","data","value","unlimited","String","maxExtraction","itemKey","sort","a","b","getInitialAllowedRecipes","recipeMap","forEach","isAlternate","reducer","state","action","type","name","newProductionItems","productionItems","nanoid","mode","filter","i","newInputItems","inputItems","newInputResources","inputResources","newAllowedRecipes","allowedRecipes","active","keys","alternates","displayName","ProductionProvider","children","useReducer","dispatch","Provider","itemOptions","text","modeOptions","ProductionTab","Grid","Row","Column","style","flex","Dropdown","fluid","placeholder","selection","search","clearable","options","onChange","e","Input","className","min","step","disabled","width","minWidth","Button","icon","negative","onClick","Icon","columns","primary","InputsTab","Header","labelPosition","Checkbox","fontWeight","label","checked","Divider","display","alignItems","cleanAltNameRegex","baseRecipes","altRecipes","push","replace","RecipesTab","useState","altRecipeSearch","setAltRecipeSearch","baseRecipeSearch","setBaseRecipeSearch","renderRecipeList","useCallback","recipeList","component","List","Item","renderedBaseRecipes","useMemo","renderedAltRecipes","renderRecipeOptions","searchValue","setSearchValue","rendered","toLowerCase","includes","divided","PlannerOptions","activeTab","setActiveTab","handleSetTab","Container","Menu","pointing","secondary","attached","widths","padding","renderTab","PlannerResults","tabular","ProductionPlanner","as","Segment","size","Main","fixed","header","paddingTop","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f8123641.chunk.js","sourcesContent":["import itemsRaw from './json/items.json';\r\nimport itemRecipeMapRaw from './json/itemRecipeMap.json';\r\nimport recipesRaw from './json/recipes.json';\r\nimport resourcesRaw from './json/resources.json';\r\nimport buildingsRaw from './json/buildings.json';\r\n\r\nexport type ItemRate = {\r\n  itemClass: string,\r\n  perMinute: number,\r\n}\r\n\r\nexport type ItemInfo = {\r\n  slug: string,\r\n  name: string,\r\n  sinkPoints: number,\r\n};\r\n\r\nexport type RecipeInfo = {\r\n  slug: string,\r\n  name: string,\r\n  isAlternate: boolean,\r\n  ingredients: ItemRate[],\r\n  products: ItemRate[],\r\n  producedIn: string[],\r\n};\r\n\r\nexport type ResourceInfo = {\r\n  itemClass: string,\r\n  maxExtraction: number | null,\r\n};\r\n\r\nexport type BuildingsInfo = {\r\n  slug: string,\r\n  name: string,\r\n  power: number,\r\n};\r\n\r\nexport type ItemMap = { [key in keyof typeof itemsRaw]: ItemInfo } & { [key: string]: ItemInfo };\r\nexport type ItemRecipeMap = { [key in keyof typeof itemRecipeMapRaw]: string[] } & { [key: string]: string[] };\r\nexport type RecipeMap = { [key in keyof typeof recipesRaw]: RecipeInfo } & { [key: string]: RecipeInfo };\r\nexport type ResourceMap = { [key in keyof typeof resourcesRaw]: ResourceInfo } & { [key: string]: ResourceInfo };\r\nexport type BuildingMap = { [key in keyof typeof buildingsRaw]: BuildingsInfo } & { [key: string]: BuildingsInfo };\r\n\r\nexport const items = (itemsRaw as ItemMap);\r\nexport const itemRecipeMap = (itemRecipeMapRaw as ItemRecipeMap);\r\nexport const recipes = (recipesRaw as RecipeMap);\r\nexport const resources = (resourcesRaw as ResourceMap);\r\nexport const buildings = (buildingsRaw as BuildingMap);\r\n","import React, { createContext, useContext, useReducer } from 'react';\r\nimport { nanoid } from 'nanoid';\r\nimport { resources, recipes } from '../../data'\r\n\r\n// TYPES\r\nexport type ProductionItemOptions = {\r\n  key: string,\r\n  itemKey: string | null,\r\n  mode: 'rate-target'|'building-target'|'maximize',\r\n  value: string,\r\n};\r\n\r\nexport type InputItemOptions = {\r\n  key: string,\r\n  itemKey: string,\r\n  value: string,\r\n  unlimited: boolean,\r\n};\r\n\r\nexport type RecipeMap = {\r\n  [key: string]: boolean,\r\n};\r\n\r\nexport type FactoryOptions = {\r\n  key: string,\r\n  name: string,\r\n  productionItems: ProductionItemOptions[],\r\n  inputItems: InputItemOptions[],\r\n  inputResources: InputItemOptions[],\r\n  allowedRecipes: RecipeMap,\r\n};\r\n\r\nexport type ProductionContextType = {\r\n  state: FactoryOptions,\r\n  dispatch: React.Dispatch<FactoryAction>,\r\n}\r\n\r\n\r\n// CONTEXT\r\nexport const ProductionContext = createContext<ProductionContextType | null>(null);\r\nProductionContext.displayName = 'ProductionContext';\r\n\r\n\r\n// HELPER HOOK\r\nexport function useProductionContext() {\r\n  const ctx = useContext(ProductionContext);\r\n  if (!ctx) {\r\n    throw new Error('ProductionContext is null');\r\n  }\r\n  return ctx;\r\n}\r\n\r\n\r\n// DEFAULTS\r\nfunction getDefaultProductionItem(): ProductionItemOptions {\r\n  return ({\r\n    key: nanoid(),\r\n    itemKey: '',\r\n    mode: 'rate-target',\r\n    value: '10',\r\n  });\r\n}\r\n\r\nfunction getDefaultInputItem(): InputItemOptions {\r\n  return ({\r\n    key: nanoid(),\r\n    itemKey: '',\r\n    value: '0',\r\n    unlimited: false,\r\n  });\r\n}\r\n\r\nfunction getInitialInputResources(): InputItemOptions[] {\r\n  return Object.entries(resources)\r\n    .map(([key, data]) => {\r\n      let value = '0';\r\n      let unlimited = false;\r\n      if (key === 'Desc_Water_C') {\r\n        unlimited = true;\r\n      } else {\r\n        value = String(data.maxExtraction);\r\n      }\r\n      return {\r\n        key: key,\r\n        itemKey: key,\r\n        value,\r\n        unlimited,\r\n      };\r\n    })\r\n    .sort((a, b) => {\r\n      if (a.key === 'Desc_Water_C') return 1;\r\n      if (b.key === 'Desc_Water_C') return -1;\r\n      return a.itemKey > b.itemKey ? 1 : -1;\r\n    });\r\n}\r\n\r\nfunction getInitialAllowedRecipes(): RecipeMap {\r\n  const recipeMap: RecipeMap = {};\r\n  Object.entries(recipes).forEach(([key, data]) => {\r\n    recipeMap[key] = !data.isAlternate;\r\n  });\r\n  return recipeMap;\r\n}\r\n\r\nfunction getInitialState(): FactoryOptions {\r\n  return {\r\n    key: nanoid(),\r\n    name: 'New Factory',\r\n    productionItems: [],\r\n    inputItems: [],\r\n    inputResources: getInitialInputResources(),\r\n    allowedRecipes: getInitialAllowedRecipes(),\r\n  };\r\n}\r\n\r\n\r\n// REDUCER\r\nexport type FactoryAction = \r\n  | { type: 'SET_NAME', name: string }\r\n  | { type: 'ADD_PRODUCTION_ITEM' }\r\n  | { type: 'DELETE_PRODUCTION_ITEM', key: string }\r\n  | { type: 'UPDATE_PRODUCTION_ITEM', data: ProductionItemOptions }\r\n  | { type: 'ADD_INPUT_ITEM' }\r\n  | { type: 'DELETE_INPUT_ITEM', key: string }\r\n  | { type: 'UPDATE_INPUT_ITEM', data: InputItemOptions }\r\n  | { type: 'UPDATE_INPUT_RESOURCE', data: InputItemOptions }\r\n  | { type: 'SET_RESOURCES_TO_MAP_LIMITS' }\r\n  | { type: 'SET_RESOURCES_TO_0' }\r\n  | { type: 'SET_RECIPE_ACTIVE', key: string, active: boolean }\r\n  | { type: 'MASS_SET_RECIPES_ACTIVE', alternates: boolean, active: boolean };\r\n\r\nfunction reducer(state: FactoryOptions, action: FactoryAction): FactoryOptions {\r\n  switch (action.type) {\r\n    case 'SET_NAME': {\r\n      return { ...state, name: action.name };\r\n    }\r\n    case 'ADD_PRODUCTION_ITEM': {\r\n      const newProductionItems = [\r\n        ...state.productionItems,\r\n        getDefaultProductionItem(),\r\n      ];\r\n      return { ...state, productionItems: newProductionItems };\r\n    }\r\n    case 'DELETE_PRODUCTION_ITEM': {\r\n      const newProductionItems = state.productionItems\r\n        .filter((i) => i.key !== action.key);\r\n      return { ...state, productionItems: newProductionItems };\r\n    }\r\n    case 'UPDATE_PRODUCTION_ITEM': {\r\n      const newProductionItems = state.productionItems\r\n        .map((i) => i.key === action.data.key ? action.data : i);\r\n      return { ...state, productionItems: newProductionItems };\r\n    }\r\n    case 'ADD_INPUT_ITEM': {\r\n      const newInputItems = [\r\n        ...state.inputItems,\r\n        getDefaultInputItem(),\r\n      ];\r\n      return { ...state, inputItems: newInputItems };\r\n    }\r\n    case 'DELETE_INPUT_ITEM': {\r\n      const newInputItems = state.inputItems\r\n        .filter((i) => i.key !== action.key);\r\n      return { ...state, inputItems: newInputItems };\r\n    }\r\n    case 'UPDATE_INPUT_ITEM': {\r\n      const newInputItems = state.inputItems\r\n        .map((i) => i.key === action.data.key ? action.data : i);\r\n      return { ...state, inputItems: newInputItems };\r\n    }\r\n    case 'UPDATE_INPUT_RESOURCE': {\r\n      const newInputResources = state.inputResources\r\n        .map((i) => i.key === action.data.key ? action.data : i);\r\n      return { ...state, inputResources: newInputResources };\r\n    }\r\n    case 'SET_RESOURCES_TO_MAP_LIMITS': {\r\n      const newInputResources = getInitialInputResources();\r\n      return { ...state, inputResources: newInputResources };\r\n    }\r\n    case 'SET_RESOURCES_TO_0': {\r\n      const newInputResources = state.inputResources\r\n        .map((data) => ({ ...data, value: '0', unlimited: false }));\r\n      return { ...state, inputResources: newInputResources };\r\n    }\r\n    case 'SET_RECIPE_ACTIVE': {\r\n      const newAllowedRecipes = { ...state.allowedRecipes };\r\n      newAllowedRecipes[action.key] = action.active;\r\n      return { ...state, allowedRecipes: newAllowedRecipes };\r\n    }\r\n    case 'MASS_SET_RECIPES_ACTIVE': {\r\n      const newAllowedRecipes = { ...state.allowedRecipes };\r\n      Object.keys(newAllowedRecipes).forEach((key) => {\r\n        if (action.alternates && recipes[key].isAlternate) {\r\n          newAllowedRecipes[key] = action.active;\r\n        } else if (!action.alternates && !recipes[key].isAlternate) {\r\n          newAllowedRecipes[key] = action.active;\r\n        }\r\n      })\r\n      return { ...state, allowedRecipes: newAllowedRecipes };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n\r\n// PROVIDER\r\ntype PropTypes = { children: React.ReactNode };\r\nexport const ProductionProvider = ({ children }: PropTypes) => {\r\n  const [state, dispatch] = useReducer(reducer, getInitialState());\r\n\r\n  return (\r\n    <ProductionContext.Provider value={{ state, dispatch }}>\r\n      {children}\r\n    </ProductionContext.Provider>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Button, Dropdown, Input, Grid, Icon } from 'semantic-ui-react';\r\nimport { items, itemRecipeMap } from '../../../../data';\r\nimport { useProductionContext } from '../../../../contexts/production';\r\n\r\nconst itemOptions = Object.keys(itemRecipeMap)\r\n  .map((key) => ({\r\n    value: key,\r\n    text: items[key].name,\r\n  }))\r\n  .sort((a, b) => {\r\n    return a.text > b.text ? 1 : -1;\r\n  });\r\n\r\nconst modeOptions = [\r\n  { value: 'rate-target', text: 'Items Per Min' },\r\n  { value: 'building-target', text: 'Assembly Buildings' },\r\n  { value: 'maximize', text: 'Maximize Output' },\r\n];\r\n\r\nconst ProductionTab = () => {\r\n  const ctx = useProductionContext();\r\n\r\n  function renderItemInputs() {\r\n    return ctx.state.productionItems.map((data) => (\r\n      <Grid.Row key={data.key}>\r\n        <Grid.Column style={{ flex: '1 1 auto' }}>\r\n          <Dropdown\r\n            fluid\r\n            placeholder=\"Select an item\"\r\n            selection\r\n            search\r\n            clearable\r\n            options={itemOptions}\r\n            value={data.itemKey ? data.itemKey : ''}\r\n            onChange={(e, { value }) => {\r\n              ctx.dispatch({\r\n                type: 'UPDATE_PRODUCTION_ITEM',\r\n                data: { ...data, itemKey: String(value) },\r\n              });\r\n            }}\r\n          />\r\n        </Grid.Column>\r\n        <Grid.Column style={{ flex: '0 0 290px' }}>\r\n          <Input\r\n            className='no-spinner'\r\n            type='number'\r\n            min='0'\r\n            step='1'\r\n            fluid\r\n            value={data.value}\r\n            onChange={(e, { value }) => {\r\n              ctx.dispatch({\r\n                type: 'UPDATE_PRODUCTION_ITEM',\r\n                data: { ...data, value: value },\r\n              });\r\n            }}\r\n            action\r\n          >\r\n            <input disabled={data.mode === 'maximize'} />\r\n            <Dropdown\r\n              style={{ width: '170px', minWidth: '0px' }}\r\n              selection\r\n              options={modeOptions}\r\n              value={data.mode}\r\n              onChange={(e, { value }) => {\r\n                ctx.dispatch({\r\n                  type: 'UPDATE_PRODUCTION_ITEM',\r\n                  data: { ...data, mode: (value as any) },\r\n                });\r\n              }}\r\n            />\r\n          </Input>\r\n        </Grid.Column>\r\n        <Grid.Column style={{ flex: '0 0 70px' }}>\r\n          <Button\r\n            icon\r\n            negative\r\n            onClick={() => { ctx.dispatch({ type: 'DELETE_PRODUCTION_ITEM', key: data.key }); }}\r\n          >\r\n            <Icon name='trash alternate outline' />\r\n          </Button>\r\n        </Grid.Column>\r\n      </Grid.Row>\r\n    ));\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <p>\r\n        Select the items you want to produce.\r\n      </p>\r\n      <Grid>\r\n        {renderItemInputs()}\r\n        <Grid.Row columns={1}>\r\n          <Grid.Column>\r\n            <Button\r\n              primary\r\n              onClick={() => { ctx.dispatch({ type: 'ADD_PRODUCTION_ITEM' })}}\r\n            >\r\n              Add Product\r\n            </Button>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProductionTab;\r\n","import React from 'react';\r\nimport { Button, Dropdown, Input, Checkbox, Grid, Icon, Header, Divider } from 'semantic-ui-react';\r\nimport { items, itemRecipeMap } from '../../../../data';\r\nimport { useProductionContext } from '../../../../contexts/production';\r\n\r\nconst itemOptions = Object.keys(itemRecipeMap)\r\n  .map((key) => ({\r\n    value: key,\r\n    text: items[key].name,\r\n  }))\r\n  .sort((a, b) => {\r\n    return a.text > b.text ? 1 : -1;\r\n  });\r\n\r\n\r\nconst InputsTab = () => {\r\n  const ctx = useProductionContext();\r\n\r\n  function renderItemInputs() {\r\n    return ctx.state.inputItems.map((data) => (\r\n      <Grid.Row key={data.key}>\r\n        <Grid.Column style={{ flex: '1 1 auto' }}>\r\n          <Dropdown\r\n            fluid\r\n            placeholder=\"Select an item\"\r\n            selection\r\n            search\r\n            clearable\r\n            options={itemOptions}\r\n            value={data.itemKey ? data.itemKey : ''}\r\n            onChange={(e, { value }) => {\r\n              ctx.dispatch({\r\n                type: 'UPDATE_INPUT_ITEM',\r\n                data: { ...data, itemKey: String(value) },\r\n              });\r\n            }}\r\n          />\r\n        </Grid.Column>\r\n        <Grid.Column style={{ flex: '0 0 250px' }}>\r\n          <Input\r\n            className='no-spinner'\r\n            type='number'\r\n            min='0'\r\n            step='1'\r\n            fluid\r\n            value={data.value}\r\n            onChange={(e, { value }) => {\r\n              ctx.dispatch({\r\n                type: 'UPDATE_INPUT_ITEM',\r\n                data: { ...data, value: value },\r\n              });\r\n            }}\r\n            labelPosition='right'\r\n          >\r\n            <input disabled={data.unlimited} />\r\n            <Checkbox\r\n              className='label'\r\n              style={{ fontWeight: 'normal' }}\r\n              label='Unlimited'\r\n              checked={data.unlimited}\r\n              onChange={() => {\r\n                ctx.dispatch({\r\n                  type: 'UPDATE_INPUT_ITEM',\r\n                  data: { ...data, unlimited: !data.unlimited },\r\n                });\r\n              }}\r\n            />\r\n          </Input>\r\n        </Grid.Column>\r\n        <Grid.Column style={{ flex: '0 0 70px' }}>\r\n          <Button\r\n            icon\r\n            negative\r\n            onClick={() => { ctx.dispatch({ type: 'DELETE_INPUT_ITEM', key: data.key }); }}\r\n          >\r\n            <Icon name='trash alternate outline' />\r\n          </Button>\r\n        </Grid.Column>\r\n      </Grid.Row>\r\n    ));\r\n  }\r\n\r\n  function renderResourceInputs() {\r\n    return ctx.state.inputResources.map((data) => (\r\n      <Grid.Row key={data.key}>\r\n        <Grid.Column style={{ flex: '0 0 200px', display: 'flex', alignItems: 'center' }}>\r\n          {items[data.itemKey].name}\r\n        </Grid.Column>\r\n        <Grid.Column style={{ flex: '1 1 auto' }}>\r\n          <Input\r\n            className='no-spinner'\r\n            type='number'\r\n            min='0'\r\n            step='1'\r\n            fluid\r\n            value={data.value}\r\n            onChange={(e, { value }) => {\r\n              ctx.dispatch({\r\n                type: 'UPDATE_INPUT_RESOURCE',\r\n                data: { ...data, value: value },\r\n              });\r\n            }}\r\n            labelPosition='right'\r\n          >\r\n            <input disabled={data.unlimited} />\r\n            <Checkbox\r\n              className='label'\r\n              style={{ fontWeight: 'normal' }}\r\n              label='Unlimited'\r\n              checked={data.unlimited}\r\n              onChange={() => {\r\n                ctx.dispatch({\r\n                  type: 'UPDATE_INPUT_RESOURCE',\r\n                  data: { ...data, unlimited: !data.unlimited },\r\n                });\r\n              }}\r\n            />\r\n          </Input>\r\n        </Grid.Column>\r\n      </Grid.Row>\r\n    ));\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Header>Input Items</Header>\r\n      <p>\r\n        Select the items that you already have available and don't need to produce in this factory.\r\n      </p>\r\n      <Grid>\r\n        {renderItemInputs()}\r\n        <Grid.Row>\r\n          <Grid.Column>\r\n            <Button\r\n              primary\r\n              onClick={() => { ctx.dispatch({ type: 'ADD_INPUT_ITEM' }) }}\r\n            >\r\n              Add Input\r\n            </Button>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n      <Divider />\r\n      <Header>Raw Resources</Header>\r\n      <p>\r\n        Select the raw resources that are available to your factory. The default values are set to the map limits.\r\n      </p>\r\n      <Grid>\r\n        <Grid.Row columns={1}>\r\n          <Grid.Column>\r\n            <Button\r\n              primary\r\n              onClick={() => { ctx.dispatch({ type: 'SET_RESOURCES_TO_MAP_LIMITS' }) }}\r\n            >\r\n              Set to Maximum\r\n            </Button>\r\n            <Button\r\n              primary\r\n              onClick={() => { ctx.dispatch({ type: 'SET_RESOURCES_TO_0' }) }}\r\n            >\r\n              Set to 0\r\n            </Button>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n        {renderResourceInputs()}\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default InputsTab;\r\n","import React, { useState, useMemo, useCallback } from 'react';\r\nimport { Button, Input, Checkbox, Grid, Header, List } from 'semantic-ui-react';\r\nimport { recipes } from '../../../../data';\r\nimport { useProductionContext } from '../../../../contexts/production';\r\n\r\nconst cleanAltNameRegex = /^Alternate: /;\r\nconst baseRecipes: { key: string, label: string }[] = [];\r\nconst altRecipes: { key: string, label: string }[] = [];\r\nObject.entries(recipes)\r\n  .forEach(([key, data]) => {\r\n    if (data.isAlternate) {\r\n      altRecipes.push({\r\n        key,\r\n        label: data.name.replace(cleanAltNameRegex, ''),\r\n      });\r\n    } else {\r\n      baseRecipes.push({\r\n        key,\r\n        label: data.name,\r\n      });\r\n    }\r\n  });\r\nbaseRecipes.sort((a, b) => (a.label > b.label ? 1 : -1));\r\naltRecipes.sort((a, b) => (a.label > b.label ? 1 : -1));\r\n\r\nconst RecipesTab = () => {\r\n  const ctx = useProductionContext();\r\n  const [altRecipeSearch, setAltRecipeSearch] = useState('');\r\n  const [baseRecipeSearch, setBaseRecipeSearch] = useState('');\r\n\r\n  const renderRecipeList = useCallback((recipeList: { key: string, label: string }[]) => {\r\n    return recipeList.map(({ key, label }) => ({\r\n      label,\r\n      component: (\r\n        <List.Item>\r\n          <Checkbox\r\n            label={label}\r\n            checked={ctx.state.allowedRecipes[key]}\r\n            onChange={() => {\r\n              ctx.dispatch({\r\n                type: 'SET_RECIPE_ACTIVE',\r\n                key,\r\n                active: !ctx.state.allowedRecipes[key],\r\n              });\r\n            }}\r\n          />\r\n        </List.Item>\r\n      )\r\n    }));\r\n  }, [ctx]);\r\n\r\n  const renderedBaseRecipes = useMemo(() => renderRecipeList(baseRecipes), [renderRecipeList]);\r\n  const renderedAltRecipes = useMemo(() => renderRecipeList(altRecipes), [renderRecipeList]);\r\n\r\n  function renderRecipeOptions(alternates: boolean) {\r\n    const [searchValue, setSearchValue] = alternates\r\n      ? [altRecipeSearch, setAltRecipeSearch]\r\n      : [baseRecipeSearch, setBaseRecipeSearch];\r\n    const rendered = alternates ? renderedAltRecipes : renderedBaseRecipes\r\n    return (\r\n      <>\r\n        <Input\r\n          placeholder='Search...'\r\n          fluid\r\n          action\r\n          value={searchValue}\r\n          onChange={(e, { value }) => { setSearchValue(value); }}\r\n        >\r\n          <input />\r\n          <Button onClick={() => { ctx.dispatch({ type: 'MASS_SET_RECIPES_ACTIVE', alternates, active: true }) }}>\r\n            All\r\n          </Button>\r\n          <Button onClick={() => { ctx.dispatch({ type: 'MASS_SET_RECIPES_ACTIVE', alternates, active: false }) }}>\r\n            None\r\n          </Button>\r\n        </Input>\r\n        <List>\r\n          {rendered.filter(({ label }) => label.toLowerCase().includes(searchValue)).map(({ component }) => component)}\r\n        </List>\r\n      </>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <p>\r\n        Select the items that you already have available and don't need to produce in this factory.\r\n      </p>\r\n      <Grid columns={2} divided={true}>\r\n        <Grid.Row>\r\n          <Grid.Column>\r\n            <Header>Alternate Recipes</Header>\r\n            {renderRecipeOptions(true)}\r\n          </Grid.Column>\r\n          <Grid.Column>\r\n            <Header>Base Recipes</Header>\r\n            {renderRecipeOptions(false)}\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RecipesTab;\r\n","import React, { useState } from 'react';\r\nimport { Container, Menu } from 'semantic-ui-react';\r\nimport ProductionTab from './ProductionTab';\r\nimport InputsTab from './InputsTab';\r\nimport RecipesTab from './RecipesTab';\r\n\r\nconst PlannerOptions = () => {\r\n  const [activeTab, setActiveTab] = useState('production');\r\n\r\n  function handleSetTab(e: any, data: any) {\r\n    setActiveTab(data.name);\r\n  }\r\n\r\n  function renderTab() {\r\n    switch (activeTab) {\r\n      case 'production':\r\n        return <ProductionTab />\r\n      case 'inputs':\r\n        return <InputsTab />\r\n      case 'recipes':\r\n        return <RecipesTab />\r\n      default:\r\n        return null;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container fluid>\r\n      <Menu pointing secondary attached=\"top\" fluid widths={3}>\r\n        <Menu.Item\r\n          name='production'\r\n          active={activeTab === 'production'}\r\n          onClick={handleSetTab}\r\n        >\r\n          Production\r\n        </Menu.Item>\r\n        <Menu.Item\r\n          name='inputs'\r\n          active={activeTab === 'inputs'}\r\n          onClick={handleSetTab}\r\n        >\r\n          Inputs\r\n        </Menu.Item>\r\n        <Menu.Item\r\n          name='recipes'\r\n          active={activeTab === 'recipes'}\r\n          onClick={handleSetTab}\r\n        >\r\n          Recipes\r\n        </Menu.Item>\r\n      </Menu>\r\n      <Container style={{ padding: '20px 0px' }}>\r\n        {renderTab()}\r\n      </Container>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default PlannerOptions;\r\n","import React from 'react';\r\nimport { Container, Menu } from 'semantic-ui-react';\r\n\r\nconst PlannerResults = () => {\r\n  return (\r\n    <Container fluid>\r\n      <Menu tabular>\r\n        <Menu.Item name='graph'>\r\n          Production Graph\r\n          </Menu.Item>\r\n        <Menu.Item name='buildings'>\r\n          Buildings\r\n          </Menu.Item>\r\n      </Menu>\r\n    </Container>  );\r\n};\r\n\r\nexport default PlannerResults;\r\n","import React from 'react';\r\nimport { Container, Header, Segment, Grid } from 'semantic-ui-react';\r\nimport PlannerOptions from './PlannerOptions';\r\nimport PlannerResults from './PlannerResults';\r\nimport { ProductionProvider } from '../../contexts/production';\r\n\r\nconst ProductionPlanner = () => {\r\n  return (\r\n    <>\r\n      <Header as='h1'>Production Planner</Header>\r\n      <p>\r\n        This is some descriptive text that will have some usage information or whatever.\r\n      </p>\r\n      <Container fluid>\r\n        <ProductionProvider>\r\n          <Segment attached='top'>\r\n            <Header size='medium'>Factory Name</Header>\r\n          </Segment>\r\n          <Grid columns={2}>\r\n            <Grid.Column width={5}>\r\n              <PlannerOptions />\r\n            </Grid.Column>\r\n            <Grid.Column width={11}>\r\n              <PlannerResults />\r\n            </Grid.Column>\r\n          </Grid>\r\n        </ProductionProvider>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProductionPlanner;\r\n","import React from 'react';\r\nimport { Container, Menu } from 'semantic-ui-react';\r\nimport ProductionPlanner from '../ProductionPlanner';\r\n\r\nconst Main = () => {\r\n  return (\r\n    <Container fluid>\r\n      <Menu fixed='top' size=\"massive\">\r\n        <Container fluid>\r\n          <Menu.Item as='a' header >\r\n            Yet Another Factory Planner\r\n          </Menu.Item>\r\n        </Container>\r\n      </Menu>\r\n      <Container fluid style={{ padding: '0px 50px', paddingTop: '70px' }}>\r\n        <ProductionPlanner />\r\n      </Container>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import React from 'react';\nimport Main from './containers/Main';\n\nfunction App() {\n  return (\n    <Main />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-less/semantic.less';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './utilities/reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// reportWebVitals();\n"],"sourceRoot":""}