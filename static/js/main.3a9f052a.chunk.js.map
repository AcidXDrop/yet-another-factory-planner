{"version":3,"sources":["data/index.ts","contexts/production/index.tsx","containers/ProductionPlanner/PlannerOptions/ProductionTab/index.tsx","containers/ProductionPlanner/PlannerOptions/InputsTab/index.tsx","containers/ProductionPlanner/PlannerOptions/RecipesTab/index.tsx","containers/ProductionPlanner/PlannerOptions/index.tsx","utilities/production-calculator/index.ts","containers/ProductionPlanner/PlannerResults/index.tsx","containers/ProductionPlanner/index.tsx","containers/Main/index.tsx","App.tsx","index.tsx"],"names":["items","itemsRaw","itemRecipeMap","itemRecipeMapRaw","recipes","recipesRaw","resources","resourcesRaw","ProductionContext","createContext","useProductionContext","ctx","useContext","Error","displayName","ORDERED_RESOURCES","getInitialInputResources","Object","entries","map","key","data","value","unlimited","String","maxExtraction","itemKey","sort","a","b","aIndex","findIndex","r","Infinity","bIndex","getInitialAllowedRecipes","recipeMap","forEach","isAlternate","reducer","state","action","type","name","newProductionItems","productionItems","nanoid","mode","filter","i","newInputItems","inputItems","newInputResources","inputResources","newAllowedRecipes","allowedRecipes","active","keys","alternates","ProductionProvider","children","useReducer","dispatch","Provider","itemOptions","text","modeOptions","ProductionTab","Grid","Row","Column","style","flex","Dropdown","fluid","placeholder","selection","search","clearable","options","onChange","e","Input","className","min","step","disabled","width","minWidth","Button","icon","negative","onClick","Icon","columns","primary","InputsTab","Header","labelPosition","Checkbox","fontWeight","label","checked","Divider","display","alignItems","cleanAltNameRegex","baseRecipes","altRecipes","push","replace","RecipesTab","useState","altRecipeSearch","setAltRecipeSearch","baseRecipeSearch","setBaseRecipeSearch","renderRecipeList","useCallback","recipeList","component","List","Item","renderedBaseRecipes","useMemo","renderedAltRecipes","renderRecipeOptions","searchValue","setSearchValue","rendered","toLowerCase","includes","divided","PlannerOptions","activeTab","setActiveTab","handleSetTab","Container","Menu","pointing","secondary","attached","widths","padding","renderTab","ProductionGraphAlgorithm","inputs","outputs","currentId","console","clear","this","item","Number","targets","rate","buildings","graphs","buildItemTree","nextId","g","log","length","nodeId","depth","nodes","id","recipe","edges","itemRecipes","allRecipeGraphs","recipeKey","recipeInfo","primaryProduct","products","find","p","itemClass","rateScaleFactor","perMinute","outputNode","indexes","indexLimits","allIngredientGraphs","ingredients","ingredient","topNodeId","ingredientGraphs","done","iter","newGraph","idx","graph","input","output","PlannerResults","exec","ProductionPlanner","as","Factory","Segment","size","Main","fixed","header","paddingTop","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3a9f052a.chunk.js","sourcesContent":["import itemsRaw from './json/items.json';\r\nimport itemRecipeMapRaw from './json/itemRecipeMap.json';\r\nimport recipesRaw from './json/recipes.json';\r\nimport resourcesRaw from './json/resources.json';\r\nimport buildingsRaw from './json/buildings.json';\r\n\r\nexport type ItemRate = {\r\n  itemClass: string,\r\n  perMinute: number,\r\n}\r\n\r\nexport type ItemInfo = {\r\n  slug: string,\r\n  name: string,\r\n  sinkPoints: number,\r\n};\r\n\r\nexport type RecipeInfo = {\r\n  slug: string,\r\n  name: string,\r\n  isAlternate: boolean,\r\n  ingredients: ItemRate[],\r\n  products: ItemRate[],\r\n  producedIn: string[],\r\n};\r\n\r\nexport type ResourceInfo = {\r\n  itemClass: string,\r\n  maxExtraction: number | null,\r\n};\r\n\r\nexport type BuildingsInfo = {\r\n  slug: string,\r\n  name: string,\r\n  power: number,\r\n};\r\n\r\nexport type ItemMap = { [key in keyof typeof itemsRaw]: ItemInfo } & { [key: string]: ItemInfo };\r\nexport type ItemRecipeMap = { [key in keyof typeof itemRecipeMapRaw]: string[] } & { [key: string]: string[] };\r\nexport type RecipeMap = { [key in keyof typeof recipesRaw]: RecipeInfo } & { [key: string]: RecipeInfo };\r\nexport type ResourceMap = { [key in keyof typeof resourcesRaw]: ResourceInfo } & { [key: string]: ResourceInfo };\r\nexport type BuildingMap = { [key in keyof typeof buildingsRaw]: BuildingsInfo } & { [key: string]: BuildingsInfo };\r\n\r\nexport const items = (itemsRaw as ItemMap);\r\nexport const itemRecipeMap = (itemRecipeMapRaw as ItemRecipeMap);\r\nexport const recipes = (recipesRaw as RecipeMap);\r\nexport const resources = (resourcesRaw as ResourceMap);\r\nexport const buildings = (buildingsRaw as BuildingMap);\r\n","import React, { createContext, useContext, useReducer } from 'react';\r\nimport { nanoid } from 'nanoid';\r\nimport { resources, recipes } from '../../data'\r\n\r\n// TYPES\r\nexport type ProductionItemOptions = {\r\n  key: string,\r\n  itemKey: string,\r\n  mode: 'rate-target'|'building-target'|'maximize',\r\n  value: string,\r\n};\r\n\r\nexport type InputItemOptions = {\r\n  key: string,\r\n  itemKey: string,\r\n  value: string,\r\n  unlimited: boolean,\r\n};\r\n\r\nexport type RecipeMap = {\r\n  [key: string]: boolean,\r\n};\r\n\r\nexport type FactoryOptions = {\r\n  key: string,\r\n  name: string,\r\n  productionItems: ProductionItemOptions[],\r\n  inputItems: InputItemOptions[],\r\n  inputResources: InputItemOptions[],\r\n  allowedRecipes: RecipeMap,\r\n};\r\n\r\nexport type ProductionContextType = {\r\n  state: FactoryOptions,\r\n  dispatch: React.Dispatch<FactoryAction>,\r\n}\r\n\r\n\r\n// CONTEXT\r\nexport const ProductionContext = createContext<ProductionContextType | null>(null);\r\nProductionContext.displayName = 'ProductionContext';\r\n\r\n\r\n// HELPER HOOK\r\nexport function useProductionContext() {\r\n  const ctx = useContext(ProductionContext);\r\n  if (!ctx) {\r\n    throw new Error('ProductionContext is null');\r\n  }\r\n  return ctx;\r\n}\r\n\r\n\r\n// DEFAULTS\r\nfunction getDefaultProductionItem(): ProductionItemOptions {\r\n  return ({\r\n    key: nanoid(),\r\n    itemKey: '',\r\n    mode: 'rate-target',\r\n    value: '10',\r\n  });\r\n}\r\n\r\nfunction getDefaultInputItem(): InputItemOptions {\r\n  return ({\r\n    key: nanoid(),\r\n    itemKey: '',\r\n    value: '0',\r\n    unlimited: false,\r\n  });\r\n}\r\n\r\nconst ORDERED_RESOURCES = [\r\n  'Desc_OreIron_C',\r\n  'Desc_OreCopper_C',\r\n  'Desc_Stone_C',\r\n  'Desc_Coal_C',\r\n  'Desc_OreGold_C',\r\n  'Desc_RawQuartz_C',\r\n  'Desc_Sulfur_C',\r\n  'Desc_LiquidOil_C',\r\n  'Desc_OreBauxite_C',\r\n  'Desc_OreUranium_C',\r\n  'Desc_NitrogenGas_C',\r\n  'Desc_Water_C',\r\n];\r\nfunction getInitialInputResources(): InputItemOptions[] {\r\n  return Object.entries(resources)\r\n    .map(([key, data]) => {\r\n      let value = '0';\r\n      let unlimited = false;\r\n      if (key === 'Desc_Water_C') {\r\n        unlimited = true;\r\n      } else {\r\n        value = String(data.maxExtraction);\r\n      }\r\n      return {\r\n        key: key,\r\n        itemKey: key,\r\n        value,\r\n        unlimited,\r\n      };\r\n    })\r\n    .sort((a, b) => {\r\n      let aIndex = ORDERED_RESOURCES.findIndex((r) => r === a.itemKey);\r\n      if (aIndex === -1) aIndex = Infinity;\r\n      let bIndex = ORDERED_RESOURCES.findIndex((r) => r === b.itemKey);\r\n      if (bIndex === -1) bIndex = Infinity;\r\n      return aIndex < bIndex ? -1 : 1;\r\n    });\r\n}\r\n\r\nfunction getInitialAllowedRecipes(): RecipeMap {\r\n  const recipeMap: RecipeMap = {};\r\n  Object.entries(recipes).forEach(([key, data]) => {\r\n    recipeMap[key] = !data.isAlternate;\r\n  });\r\n  return recipeMap;\r\n}\r\n\r\nfunction getInitialState(): FactoryOptions {\r\n  return {\r\n    key: nanoid(),\r\n    name: 'New Factory',\r\n    productionItems: [],\r\n    inputItems: [],\r\n    inputResources: getInitialInputResources(),\r\n    allowedRecipes: getInitialAllowedRecipes(),\r\n  };\r\n}\r\n\r\n\r\n// REDUCER\r\nexport type FactoryAction = \r\n  | { type: 'SET_NAME', name: string }\r\n  | { type: 'ADD_PRODUCTION_ITEM' }\r\n  | { type: 'DELETE_PRODUCTION_ITEM', key: string }\r\n  | { type: 'UPDATE_PRODUCTION_ITEM', data: ProductionItemOptions }\r\n  | { type: 'ADD_INPUT_ITEM' }\r\n  | { type: 'DELETE_INPUT_ITEM', key: string }\r\n  | { type: 'UPDATE_INPUT_ITEM', data: InputItemOptions }\r\n  | { type: 'UPDATE_INPUT_RESOURCE', data: InputItemOptions }\r\n  | { type: 'SET_RESOURCES_TO_MAP_LIMITS' }\r\n  | { type: 'SET_RESOURCES_TO_0' }\r\n  | { type: 'SET_RECIPE_ACTIVE', key: string, active: boolean }\r\n  | { type: 'MASS_SET_RECIPES_ACTIVE', alternates: boolean, active: boolean };\r\n\r\nfunction reducer(state: FactoryOptions, action: FactoryAction): FactoryOptions {\r\n  switch (action.type) {\r\n    case 'SET_NAME': {\r\n      return { ...state, name: action.name };\r\n    }\r\n    case 'ADD_PRODUCTION_ITEM': {\r\n      const newProductionItems = [\r\n        ...state.productionItems,\r\n        getDefaultProductionItem(),\r\n      ];\r\n      return { ...state, productionItems: newProductionItems };\r\n    }\r\n    case 'DELETE_PRODUCTION_ITEM': {\r\n      const newProductionItems = state.productionItems\r\n        .filter((i) => i.key !== action.key);\r\n      return { ...state, productionItems: newProductionItems };\r\n    }\r\n    case 'UPDATE_PRODUCTION_ITEM': {\r\n      const newProductionItems = state.productionItems\r\n        .map((i) => i.key === action.data.key ? action.data : i);\r\n      return { ...state, productionItems: newProductionItems };\r\n    }\r\n    case 'ADD_INPUT_ITEM': {\r\n      const newInputItems = [\r\n        ...state.inputItems,\r\n        getDefaultInputItem(),\r\n      ];\r\n      return { ...state, inputItems: newInputItems };\r\n    }\r\n    case 'DELETE_INPUT_ITEM': {\r\n      const newInputItems = state.inputItems\r\n        .filter((i) => i.key !== action.key);\r\n      return { ...state, inputItems: newInputItems };\r\n    }\r\n    case 'UPDATE_INPUT_ITEM': {\r\n      const newInputItems = state.inputItems\r\n        .map((i) => i.key === action.data.key ? action.data : i);\r\n      return { ...state, inputItems: newInputItems };\r\n    }\r\n    case 'UPDATE_INPUT_RESOURCE': {\r\n      const newInputResources = state.inputResources\r\n        .map((i) => i.key === action.data.key ? action.data : i);\r\n      return { ...state, inputResources: newInputResources };\r\n    }\r\n    case 'SET_RESOURCES_TO_MAP_LIMITS': {\r\n      const newInputResources = getInitialInputResources();\r\n      return { ...state, inputResources: newInputResources };\r\n    }\r\n    case 'SET_RESOURCES_TO_0': {\r\n      const newInputResources = state.inputResources\r\n        .map((data) => ({ ...data, value: '0', unlimited: false }));\r\n      return { ...state, inputResources: newInputResources };\r\n    }\r\n    case 'SET_RECIPE_ACTIVE': {\r\n      const newAllowedRecipes = { ...state.allowedRecipes };\r\n      newAllowedRecipes[action.key] = action.active;\r\n      return { ...state, allowedRecipes: newAllowedRecipes };\r\n    }\r\n    case 'MASS_SET_RECIPES_ACTIVE': {\r\n      const newAllowedRecipes = { ...state.allowedRecipes };\r\n      Object.keys(newAllowedRecipes).forEach((key) => {\r\n        if (action.alternates && recipes[key].isAlternate) {\r\n          newAllowedRecipes[key] = action.active;\r\n        } else if (!action.alternates && !recipes[key].isAlternate) {\r\n          newAllowedRecipes[key] = action.active;\r\n        }\r\n      })\r\n      return { ...state, allowedRecipes: newAllowedRecipes };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n\r\n// PROVIDER\r\ntype PropTypes = { children: React.ReactNode };\r\nexport const ProductionProvider = ({ children }: PropTypes) => {\r\n  const [state, dispatch] = useReducer(reducer, getInitialState());\r\n\r\n  return (\r\n    <ProductionContext.Provider value={{ state, dispatch }}>\r\n      {children}\r\n    </ProductionContext.Provider>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Button, Dropdown, Input, Grid, Icon } from 'semantic-ui-react';\r\nimport { items, itemRecipeMap } from '../../../../data';\r\nimport { useProductionContext } from '../../../../contexts/production';\r\n\r\nconst itemOptions = Object.keys(itemRecipeMap)\r\n  .map((key) => ({\r\n    value: key,\r\n    text: items[key].name,\r\n  }))\r\n  .sort((a, b) => {\r\n    return a.text > b.text ? 1 : -1;\r\n  });\r\n\r\nconst modeOptions = [\r\n  { value: 'rate-target', text: 'Items Per Min' },\r\n  { value: 'building-target', text: 'Assembly Buildings' },\r\n  { value: 'maximize', text: 'Maximize Output' },\r\n];\r\n\r\nconst ProductionTab = () => {\r\n  const ctx = useProductionContext();\r\n\r\n  function renderItemInputs() {\r\n    return ctx.state.productionItems.map((data) => (\r\n      <Grid.Row key={data.key}>\r\n        <Grid.Column style={{ flex: '1 1 auto' }}>\r\n          <Dropdown\r\n            fluid\r\n            placeholder=\"Select an item\"\r\n            selection\r\n            search\r\n            clearable\r\n            options={itemOptions}\r\n            value={data.itemKey ? data.itemKey : ''}\r\n            onChange={(e, { value }) => {\r\n              ctx.dispatch({\r\n                type: 'UPDATE_PRODUCTION_ITEM',\r\n                data: { ...data, itemKey: String(value) },\r\n              });\r\n            }}\r\n          />\r\n        </Grid.Column>\r\n        <Grid.Column style={{ flex: '0 0 290px' }}>\r\n          <Input\r\n            className='no-spinner'\r\n            type='number'\r\n            min='0'\r\n            step='1'\r\n            fluid\r\n            value={data.value}\r\n            onChange={(e, { value }) => {\r\n              ctx.dispatch({\r\n                type: 'UPDATE_PRODUCTION_ITEM',\r\n                data: { ...data, value: value },\r\n              });\r\n            }}\r\n            action\r\n          >\r\n            <input disabled={data.mode === 'maximize'} />\r\n            <Dropdown\r\n              style={{ width: '170px', minWidth: '0px' }}\r\n              selection\r\n              options={modeOptions}\r\n              value={data.mode}\r\n              onChange={(e, { value }) => {\r\n                ctx.dispatch({\r\n                  type: 'UPDATE_PRODUCTION_ITEM',\r\n                  data: { ...data, mode: (value as any) },\r\n                });\r\n              }}\r\n            />\r\n          </Input>\r\n        </Grid.Column>\r\n        <Grid.Column style={{ flex: '0 0 70px' }}>\r\n          <Button\r\n            icon\r\n            negative\r\n            onClick={() => { ctx.dispatch({ type: 'DELETE_PRODUCTION_ITEM', key: data.key }); }}\r\n          >\r\n            <Icon name='trash alternate outline' />\r\n          </Button>\r\n        </Grid.Column>\r\n      </Grid.Row>\r\n    ));\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <p>\r\n        Select the items you want to produce.\r\n      </p>\r\n      <Grid>\r\n        {renderItemInputs()}\r\n        <Grid.Row columns={1}>\r\n          <Grid.Column>\r\n            <Button\r\n              primary\r\n              onClick={() => { ctx.dispatch({ type: 'ADD_PRODUCTION_ITEM' })}}\r\n            >\r\n              Add Product\r\n            </Button>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProductionTab;\r\n","import React from 'react';\r\nimport { Button, Dropdown, Input, Checkbox, Grid, Icon, Header, Divider } from 'semantic-ui-react';\r\nimport { items, itemRecipeMap } from '../../../../data';\r\nimport { useProductionContext } from '../../../../contexts/production';\r\n\r\nconst itemOptions = Object.keys(itemRecipeMap)\r\n  .map((key) => ({\r\n    value: key,\r\n    text: items[key].name,\r\n  }))\r\n  .sort((a, b) => {\r\n    return a.text > b.text ? 1 : -1;\r\n  });\r\n\r\n\r\nconst InputsTab = () => {\r\n  const ctx = useProductionContext();\r\n\r\n  function renderItemInputs() {\r\n    return ctx.state.inputItems.map((data) => (\r\n      <Grid.Row key={data.key}>\r\n        <Grid.Column style={{ flex: '1 1 auto' }}>\r\n          <Dropdown\r\n            fluid\r\n            placeholder=\"Select an item\"\r\n            selection\r\n            search\r\n            clearable\r\n            options={itemOptions}\r\n            value={data.itemKey ? data.itemKey : ''}\r\n            onChange={(e, { value }) => {\r\n              ctx.dispatch({\r\n                type: 'UPDATE_INPUT_ITEM',\r\n                data: { ...data, itemKey: String(value) },\r\n              });\r\n            }}\r\n          />\r\n        </Grid.Column>\r\n        <Grid.Column style={{ flex: '0 0 250px' }}>\r\n          <Input\r\n            className='no-spinner'\r\n            type='number'\r\n            min='0'\r\n            step='1'\r\n            fluid\r\n            value={data.value}\r\n            onChange={(e, { value }) => {\r\n              ctx.dispatch({\r\n                type: 'UPDATE_INPUT_ITEM',\r\n                data: { ...data, value: value },\r\n              });\r\n            }}\r\n            labelPosition='right'\r\n          >\r\n            <input disabled={data.unlimited} />\r\n            <Checkbox\r\n              className='label'\r\n              style={{ fontWeight: 'normal' }}\r\n              label='Unlimited'\r\n              checked={data.unlimited}\r\n              onChange={() => {\r\n                ctx.dispatch({\r\n                  type: 'UPDATE_INPUT_ITEM',\r\n                  data: { ...data, unlimited: !data.unlimited },\r\n                });\r\n              }}\r\n            />\r\n          </Input>\r\n        </Grid.Column>\r\n        <Grid.Column style={{ flex: '0 0 70px' }}>\r\n          <Button\r\n            icon\r\n            negative\r\n            onClick={() => { ctx.dispatch({ type: 'DELETE_INPUT_ITEM', key: data.key }); }}\r\n          >\r\n            <Icon name='trash alternate outline' />\r\n          </Button>\r\n        </Grid.Column>\r\n      </Grid.Row>\r\n    ));\r\n  }\r\n\r\n  function renderResourceInputs() {\r\n    return ctx.state.inputResources.map((data) => (\r\n      <Grid.Row key={data.key}>\r\n        <Grid.Column style={{ flex: '0 0 200px', display: 'flex', alignItems: 'center' }}>\r\n          {items[data.itemKey].name}\r\n        </Grid.Column>\r\n        <Grid.Column style={{ flex: '1 1 auto' }}>\r\n          <Input\r\n            className='no-spinner'\r\n            type='number'\r\n            min='0'\r\n            step='1'\r\n            fluid\r\n            value={data.value}\r\n            onChange={(e, { value }) => {\r\n              ctx.dispatch({\r\n                type: 'UPDATE_INPUT_RESOURCE',\r\n                data: { ...data, value: value },\r\n              });\r\n            }}\r\n            labelPosition='right'\r\n          >\r\n            <input disabled={data.unlimited} />\r\n            <Checkbox\r\n              className='label'\r\n              style={{ fontWeight: 'normal' }}\r\n              label='Unlimited'\r\n              checked={data.unlimited}\r\n              onChange={() => {\r\n                ctx.dispatch({\r\n                  type: 'UPDATE_INPUT_RESOURCE',\r\n                  data: { ...data, unlimited: !data.unlimited },\r\n                });\r\n              }}\r\n            />\r\n          </Input>\r\n        </Grid.Column>\r\n      </Grid.Row>\r\n    ));\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Header>Input Items</Header>\r\n      <p>\r\n        Select the items that you already have available and don't need to produce in this factory.\r\n      </p>\r\n      <Grid>\r\n        {renderItemInputs()}\r\n        <Grid.Row>\r\n          <Grid.Column>\r\n            <Button\r\n              primary\r\n              onClick={() => { ctx.dispatch({ type: 'ADD_INPUT_ITEM' }) }}\r\n            >\r\n              Add Input\r\n            </Button>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n      <Divider />\r\n      <Header>Raw Resources</Header>\r\n      <p>\r\n        Select the raw resources that are available to your factory. The default values are set to the map limits.\r\n      </p>\r\n      <Grid>\r\n        <Grid.Row columns={1}>\r\n          <Grid.Column>\r\n            <Button\r\n              primary\r\n              onClick={() => { ctx.dispatch({ type: 'SET_RESOURCES_TO_MAP_LIMITS' }) }}\r\n            >\r\n              Set to Maximum\r\n            </Button>\r\n            <Button\r\n              primary\r\n              onClick={() => { ctx.dispatch({ type: 'SET_RESOURCES_TO_0' }) }}\r\n            >\r\n              Set to 0\r\n            </Button>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n        {renderResourceInputs()}\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default InputsTab;\r\n","import React, { useState, useMemo, useCallback } from 'react';\r\nimport { Button, Input, Checkbox, Grid, Header, List } from 'semantic-ui-react';\r\nimport { recipes } from '../../../../data';\r\nimport { useProductionContext } from '../../../../contexts/production';\r\n\r\nconst cleanAltNameRegex = /^Alternate: /;\r\nconst baseRecipes: { key: string, label: string }[] = [];\r\nconst altRecipes: { key: string, label: string }[] = [];\r\nObject.entries(recipes)\r\n  .forEach(([key, data]) => {\r\n    if (data.isAlternate) {\r\n      altRecipes.push({\r\n        key,\r\n        label: data.name.replace(cleanAltNameRegex, ''),\r\n      });\r\n    } else {\r\n      baseRecipes.push({\r\n        key,\r\n        label: data.name,\r\n      });\r\n    }\r\n  });\r\nbaseRecipes.sort((a, b) => (a.label > b.label ? 1 : -1));\r\naltRecipes.sort((a, b) => (a.label > b.label ? 1 : -1));\r\n\r\nconst RecipesTab = () => {\r\n  const ctx = useProductionContext();\r\n  const [altRecipeSearch, setAltRecipeSearch] = useState('');\r\n  const [baseRecipeSearch, setBaseRecipeSearch] = useState('');\r\n\r\n  const renderRecipeList = useCallback((recipeList: { key: string, label: string }[]) => {\r\n    return recipeList.map(({ key, label }) => ({\r\n      label,\r\n      component: (\r\n        <List.Item key={key}>\r\n          <Checkbox\r\n            label={label}\r\n            checked={ctx.state.allowedRecipes[key]}\r\n            onChange={() => {\r\n              ctx.dispatch({\r\n                type: 'SET_RECIPE_ACTIVE',\r\n                key,\r\n                active: !ctx.state.allowedRecipes[key],\r\n              });\r\n            }}\r\n          />\r\n        </List.Item>\r\n      )\r\n    }));\r\n  }, [ctx]);\r\n\r\n  const renderedBaseRecipes = useMemo(() => renderRecipeList(baseRecipes), [renderRecipeList]);\r\n  const renderedAltRecipes = useMemo(() => renderRecipeList(altRecipes), [renderRecipeList]);\r\n\r\n  function renderRecipeOptions(alternates: boolean) {\r\n    const [searchValue, setSearchValue] = alternates\r\n      ? [altRecipeSearch, setAltRecipeSearch]\r\n      : [baseRecipeSearch, setBaseRecipeSearch];\r\n    const rendered = alternates ? renderedAltRecipes : renderedBaseRecipes\r\n    return (\r\n      <>\r\n        <Input\r\n          placeholder='Search...'\r\n          fluid\r\n          action\r\n          value={searchValue}\r\n          onChange={(e, { value }) => { setSearchValue(value); }}\r\n        >\r\n          <input />\r\n          <Button onClick={() => { ctx.dispatch({ type: 'MASS_SET_RECIPES_ACTIVE', alternates, active: true }) }}>\r\n            All\r\n          </Button>\r\n          <Button onClick={() => { ctx.dispatch({ type: 'MASS_SET_RECIPES_ACTIVE', alternates, active: false }) }}>\r\n            None\r\n          </Button>\r\n        </Input>\r\n        <List>\r\n          {rendered.filter(({ label }) => label.toLowerCase().includes(searchValue)).map(({ component }) => component)}\r\n        </List>\r\n      </>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <p>\r\n        Select the items that you already have available and don't need to produce in this factory.\r\n      </p>\r\n      <Grid columns={2} divided={true}>\r\n        <Grid.Row>\r\n          <Grid.Column>\r\n            <Header>Alternate Recipes</Header>\r\n            {renderRecipeOptions(true)}\r\n          </Grid.Column>\r\n          <Grid.Column>\r\n            <Header>Base Recipes</Header>\r\n            {renderRecipeOptions(false)}\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RecipesTab;\r\n","import React, { useState } from 'react';\r\nimport { Container, Menu } from 'semantic-ui-react';\r\nimport ProductionTab from './ProductionTab';\r\nimport InputsTab from './InputsTab';\r\nimport RecipesTab from './RecipesTab';\r\n\r\nconst PlannerOptions = () => {\r\n  const [activeTab, setActiveTab] = useState('production');\r\n\r\n  function handleSetTab(e: any, data: any) {\r\n    setActiveTab(data.name);\r\n  }\r\n\r\n  function renderTab() {\r\n    switch (activeTab) {\r\n      case 'production':\r\n        return <ProductionTab />\r\n      case 'inputs':\r\n        return <InputsTab />\r\n      case 'recipes':\r\n        return <RecipesTab />\r\n      default:\r\n        return null;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container fluid>\r\n      <Menu pointing secondary attached=\"top\" fluid widths={3}>\r\n        <Menu.Item\r\n          name='production'\r\n          active={activeTab === 'production'}\r\n          onClick={handleSetTab}\r\n        >\r\n          Production\r\n        </Menu.Item>\r\n        <Menu.Item\r\n          name='inputs'\r\n          active={activeTab === 'inputs'}\r\n          onClick={handleSetTab}\r\n        >\r\n          Inputs\r\n        </Menu.Item>\r\n        <Menu.Item\r\n          name='recipes'\r\n          active={activeTab === 'recipes'}\r\n          onClick={handleSetTab}\r\n        >\r\n          Recipes\r\n        </Menu.Item>\r\n      </Menu>\r\n      <div style={{ padding: '20px 0px' }}>\r\n        {renderTab()}\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default PlannerOptions;\r\n","import { FactoryOptions } from '../../contexts/production';\r\nimport { items, itemRecipeMap, recipes, resources, buildings } from '../../data';\r\nimport { RecipeMap } from '../../contexts/production';\r\n\r\ntype InputMap = { [key: string]: number };\r\ntype OutputTargets = { rate: number | null, buildings: number | null };\r\ntype OutputMap = { [key: string]: OutputTargets };\r\n\r\ntype Graph = {\r\n  nodes: GraphNode[],\r\n  edges: GraphEdge[],\r\n};\r\n\r\ntype GraphNode = {\r\n  id: number,\r\n  item: string,\r\n  rate: number,\r\n  recipe: string,\r\n};\r\n\r\ntype GraphEdge = {\r\n  input: number,\r\n  output: number,\r\n};\r\n\r\nexport class ProductionGraphAlgorithm {\r\n  private inputs: InputMap;\r\n  private outputs: OutputMap;\r\n  private allowedRecipes: RecipeMap;\r\n  private currentId: number = 0;\r\n\r\n  public constructor(options: FactoryOptions) {\r\n    console.clear();\r\n    // TODO\r\n    // check NaN\r\n    // check output not zero\r\n    // sum multiple in/out of same item\r\n\r\n    this.inputs = {};\r\n    options.inputItems.forEach((item) => {\r\n      if (!item.itemKey) return;\r\n      this.inputs[item.itemKey] = item.unlimited ? Infinity : Number(item.value);\r\n    });\r\n    options.inputResources.forEach((item) => {\r\n      this.inputs[item.itemKey] = item.unlimited ? Infinity : Number(item.value);\r\n    });\r\n\r\n    this.outputs = {};\r\n    options.productionItems.forEach((item) => {\r\n      if (!item.itemKey) return;\r\n      const targets: OutputTargets = {\r\n        rate: null,\r\n        buildings: null,\r\n      };\r\n      switch (item.mode) {\r\n        case 'building-target':\r\n          targets.buildings = Number(item.value);\r\n          break;\r\n        case 'rate-target':\r\n          targets.rate = Number(item.value);\r\n          break;\r\n        case 'maximize':\r\n          targets.rate = Infinity;\r\n          break;\r\n        default:\r\n          // Panic\r\n          break;\r\n      }\r\n      this.outputs[item.itemKey] = targets;\r\n    });\r\n\r\n    this.allowedRecipes = options.allowedRecipes;\r\n  }\r\n\r\n  public exec() {\r\n    Object.keys(this.outputs).forEach((key) => {\r\n      const graphs = this.buildItemTree(this.nextId(), key, 10, 0);\r\n      graphs.forEach((g) => console.log(g));\r\n      console.log(`GRAPHS: ${graphs.length}`);\r\n    });\r\n  }\r\n\r\n  private nextId() {\r\n    return this.currentId++;\r\n  }\r\n\r\n  private buildItemTree(nodeId: number, item: string, rate: number, depth: number): Graph[] {\r\n    if (depth > 80) {\r\n      throw new Error(\"MAX DEPTH EXCEEDED\");\r\n    }\r\n    if (this.inputs[item] || !itemRecipeMap[item]) {\r\n      // this is an input item (i.e. root node)\r\n      const node: GraphNode = {\r\n        id: nodeId,\r\n        item,\r\n        rate,\r\n        recipe: 'INPUT',\r\n      };\r\n      const graph: Graph = {\r\n        nodes: [node],\r\n        edges: [],\r\n      };\r\n      return [graph];\r\n    } else {\r\n      // TODO: cache this recipe list\r\n      // TODO: check if no recipes\r\n      const itemRecipes = itemRecipeMap[item].filter((r) => this.allowedRecipes[r]);\r\n\r\n      const allRecipeGraphs: Graph[] = [];\r\n      itemRecipes.forEach((recipeKey) => {\r\n        // TODO: error if recipe or primary product doesnt exist\r\n        // TODO: figure out how the heck to do side products\r\n        const recipeInfo = recipes[recipeKey];\r\n        const primaryProduct = recipeInfo.products.find((p) => p.itemClass === item);\r\n        const sideProducts = recipeInfo.products.filter((p) => p.itemClass !== item);\r\n\r\n        const rateScaleFactor = rate / primaryProduct!.perMinute;\r\n\r\n        const outputNode: GraphNode = {\r\n          id: nodeId,\r\n          item,\r\n          rate,\r\n          recipe: recipeKey,\r\n        };\r\n\r\n        const indexes: number[] = [];\r\n        const indexLimits: number[] = [];\r\n        const allIngredientGraphs = recipeInfo.ingredients.map((ingredient) => {\r\n          const topNodeId = this.nextId();\r\n          const ingredientGraphs = this.buildItemTree(topNodeId, ingredient.itemClass, ingredient.perMinute * rateScaleFactor, depth + 1);\r\n          indexes.push(0);\r\n          indexLimits.push(ingredientGraphs.length);\r\n          return {\r\n            topNodeId,\r\n            graphs: ingredientGraphs,\r\n          };\r\n        });\r\n\r\n        // This part chooses all combinations of pathways for each ingredient\r\n        let done = false;\r\n        let iter = 0;\r\n        while (!done && iter < 10000) {\r\n          // choose one graph from each ingredient\r\n          const newGraph: Graph = {\r\n            edges: [],\r\n            nodes: [],\r\n          };\r\n          for (let i = 0; i < indexes.length; i++) {\r\n            const idx = indexes[i];\r\n            const topNodeId = allIngredientGraphs[i].topNodeId;\r\n            const graph = allIngredientGraphs[i].graphs[idx];\r\n            newGraph.edges.push(...graph.edges, { input: topNodeId, output: nodeId });\r\n            newGraph.nodes.push(...graph.nodes);\r\n          }\r\n          newGraph.nodes.push(outputNode);\r\n          allRecipeGraphs.push(newGraph);\r\n\r\n          // Increment indices with rollover\r\n          iter++;\r\n          indexes[0]++;\r\n          for (let i = 0; i < indexes.length; i++) {\r\n            if (indexes[i] < indexLimits[i]) {\r\n              break;\r\n            }\r\n            indexes[i] = 0;\r\n            if (i >= indexes.length - 1) {\r\n              done = true;\r\n              break;\r\n            }\r\n            indexes[i + 1]++;\r\n          }\r\n        }\r\n      });\r\n\r\n      return allRecipeGraphs;\r\n    }\r\n  }\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Container, Menu, Button } from 'semantic-ui-react';\r\nimport { ProductionGraphAlgorithm } from '../../../utilities/production-calculator';\r\nimport { useProductionContext } from '../../../contexts/production';\r\n\r\nconst PlannerResults = () => {\r\n  const [activeTab, setActiveTab] = useState('graph');\r\n  const ctx = useProductionContext();\r\n\r\n  function handleCalculateFactory() {\r\n    const alg = new ProductionGraphAlgorithm(ctx.state);\r\n    const results = alg.exec();\r\n  }\r\n\r\n  function handleSetTab(e: any, data: any) {\r\n    setActiveTab(data.name);\r\n  }\r\n\r\n  function renderTab() {\r\n    switch (activeTab) {\r\n      case 'graph':\r\n      case 'buildings':\r\n      default:\r\n        return null;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container fluid>\r\n      <Menu pointing secondary attached=\"top\">\r\n        <Menu.Item\r\n          name='graph'\r\n          active={activeTab === 'graph'}\r\n          onClick={handleSetTab}\r\n        >\r\n          Production Graph\r\n        </Menu.Item>\r\n        <Menu.Item\r\n          name='buildings'\r\n          active={activeTab === 'buildings'}\r\n          onClick={handleSetTab}\r\n        >\r\n          Buildings\r\n        </Menu.Item>\r\n      </Menu>\r\n      <div style={{ padding: '20px 0px' }}>\r\n        <Button primary onClick={handleCalculateFactory}>\r\n          Calculate\r\n        </Button>\r\n        {renderTab()}\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default PlannerResults;\r\n","import React from 'react';\r\nimport { Container, Header, Segment, Grid } from 'semantic-ui-react';\r\nimport PlannerOptions from './PlannerOptions';\r\nimport PlannerResults from './PlannerResults';\r\nimport { ProductionProvider } from '../../contexts/production';\r\nimport { useProductionContext } from '../../contexts/production';\r\n\r\nconst ProductionPlanner = () => {\r\n  return (\r\n    <>\r\n      <Header as='h1'>Production Planner</Header>\r\n      <p>\r\n        This is some descriptive text that will have some usage information or whatever.\r\n      </p>\r\n      <Container fluid>\r\n        <ProductionProvider>\r\n          <Factory />\r\n        </ProductionProvider>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProductionPlanner;\r\n\r\nconst Factory = () => {\r\n  const ctx = useProductionContext();\r\n  return (\r\n    <>\r\n      <Segment attached='top'>\r\n        <Header size='medium'>{ctx.state.name}</Header>\r\n      </Segment>\r\n      <Grid columns={2}>\r\n        <Grid.Column width={5}>\r\n          <PlannerOptions />\r\n        </Grid.Column>\r\n        <Grid.Column width={11}>\r\n          <PlannerResults />\r\n        </Grid.Column>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Container, Menu } from 'semantic-ui-react';\r\nimport ProductionPlanner from '../ProductionPlanner';\r\n\r\nconst Main = () => {\r\n  return (\r\n    <Container fluid>\r\n      <Menu fixed='top' size=\"massive\">\r\n        <Container fluid>\r\n          <Menu.Item as='a' header >\r\n            Yet Another Factory Planner\r\n          </Menu.Item>\r\n        </Container>\r\n      </Menu>\r\n      <Container fluid style={{ padding: '0px 50px', paddingTop: '70px' }}>\r\n        <ProductionPlanner />\r\n      </Container>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import React from 'react';\nimport Main from './containers/Main';\n\nfunction App() {\n  return (\n    <Main />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-less/semantic.less';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './utilities/debug/reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// reportWebVitals(console.log);\n"],"sourceRoot":""}