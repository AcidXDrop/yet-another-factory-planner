{"version":3,"sources":["data/index.ts","hooks/usePrevious.ts","utilities/production-solver/index.ts","contexts/production/index.tsx","containers/ProductionPlanner/PlannerOptions/ProductionTab/index.tsx","containers/ProductionPlanner/PlannerOptions/InputsTab/index.tsx","containers/ProductionPlanner/PlannerOptions/RecipesTab/index.tsx","containers/ProductionPlanner/PlannerOptions/index.tsx","containers/ProductionPlanner/PlannerResults/ProductionGraphTab/index.tsx","containers/ProductionPlanner/PlannerResults/ReportTab/index.tsx","containers/ProductionPlanner/PlannerResults/index.tsx","containers/ProductionPlanner/index.tsx","containers/Main/index.tsx","App.tsx","index.tsx"],"names":["buildings","buildingsRaw","recipes","recipesRaw","resources","resourcesRaw","items","itemsRaw","handGatheredItems","handGatheredItemsRaw","usePrevious","value","ref","useRef","useEffect","current","EPSILON","MAXIMIZE_OBJECTIVE_WEIGHT","NODE_TYPE","POINTS_ITEM_KEY","ProductionSolver","options","globalWeights","inputs","outputs","allowedRecipes","this","Number","weightingOptions","power","buildArea","validateNumber","maxGlobalWeight","Math","max","inputResources","forEach","item","itemKey","amount","unlimited","Infinity","weight","type","maxResourceWeight","Object","values","map","i","inputItems","allowHandGatheredItems","keys","rateTargets","recipeTargets","maximizeTargets","sortedMaximizeTargets","productionItems","mode","recipe","maximize","isPoints","recipeKey","recipeInfo","Error","target","products","find","p","itemClass","perMinute","entries","sort","a","b","index","key","val","length","num","isNaN","timestamp","performance","now","solveProduction","productionSolution","productionGraph","generateProductionGraph","report","generateProductionReport","error","message","loadGLPK","glpk","model","name","objective","direction","GLP_MIN","vars","subjectTo","pointsVars","buildingInfo","producedIn","powerScore","areaScore","area","push","coef","bnds","GLP_LO","ub","lb","pointCoef","product","sinkPoints","ingredients","ingredient","v","pow","existingVar","ov","GLP_UP","NaN","itemInfo","usedInRecipes","producedFromRecipes","objectiveVars","inputInfo","filter","outputInfo","solve","msglev","GLP_MSG_OFF","solution","result","status","GLP_OPT","abs","itemProductionTotals","graph","nodes","edges","multiplier","producedBy","usedBy","id","nanoid","productionTotals","j","nextDemand","usageInfo","usageNode","productionInfo","productionNode","outputRecipe","recipeAmount","itemNode","from","to","productionRate","pointsProduced","powerUsageEstimate","resourceEfficiencyScore","totalBuildArea","estimatedFoundations","buildingsUsed","totalMaterialCost","node","buildingKey","ceil","count","materialCost","buildCost","quantity","FACTORY_SETTINGS_VERSION","ProductionContext","createContext","useProductionContext","ctx","useContext","displayName","ORDERED_RESOURCES","getInitialInputResources","data","String","maxExtraction","relativeValue","aIndex","findIndex","r","bIndex","getInitialAllowedRecipes","recipeMap","isAlternate","getInitialState","version","reducer","state","action","newProductionItems","newInputItems","newInputResources","active","newWeightingOptions","newAllowedRecipes","alternates","encodedState","URLSearchParams","window","location","search","get","stateStr","newState","fields","split","productionItemsStrings","SEP1","str","SEP2","getItemBySlug","inputItemsStrings","parseInt","inputResourcesStrings","resourceOptions","weightingOptionsStrings","allowedRecipesBits","BigInt","toString","padStart","decodeState","e","console","getItemSlug","slug","itemEntry","ProductionProvider","children","useReducer","dispatch","useState","loaded","setLoaded","prevState","productionItemsField","join","inputItemsField","inputResourcesField","encodeState","history","pushState","pathname","Provider","itemOptions","text","unshift","baseModeOptions","ProductionTab","Grid","modeOptions","replace","Row","Column","style","flex","minWidth","Dropdown","fluid","placeholder","selection","clearable","onChange","newMode","Input","className","min","step","Button","icon","negative","onClick","Icon","columns","primary","InputsTab","Header","labelPosition","disabled","Checkbox","fontWeight","label","checked","Divider","display","alignItems","renderWeightInputs","cleanAltNameRegex","baseRecipes","altRecipes","RecipesTab","altRecipeSearch","setAltRecipeSearch","baseRecipeSearch","setBaseRecipeSearch","renderRecipeList","useCallback","recipeList","component","List","Item","renderedBaseRecipes","useMemo","renderedAltRecipes","renderRecipeOptions","searchValue","setSearchValue","rendered","toLowerCase","includes","divided","PlannerOptions","activeTab","setActiveTab","handleSetTab","Container","Menu","pointing","secondary","attached","widths","padding","renderTab","Cytoscape","use","klay","layout","edgeRouting","nodePlacement","edgeSpacingFactor","inLayerSpacingFactor","spacing","thoroughness","stylesheet","selector","NODE_COLOR_CLASS","truncateFloat","n","toFixed","getNodeLabel","amountText","getNodeClasses","classes","getEdgeLabel","edge","ProductionGraphTab","props","activeGraph","errorMessage","graphProps","elements","group","source","undefined","height","flexDirection","justifyContent","border","boxSelectionEnabled","autounselectify","wheelSensitivity","maxZoom","minZoom","width","overflow","formatFloat","toLocaleString","maximumFractionDigits","ReportTab","marginTop","size","celled","marginBottom","paddingTop","paddingBottom","Content","fontSize","marginLeft","marginRight","PlannerResults","autoCalc","setAutoCalc","solverResults","setSolverResults","handleCalculateFactory","solver","exec","results","toggle","seed","floor","Date","getTime","rng","seedrandom","TIPS","TIP_INDEX","TIP","ProductionPlanner","as","Factory","Main","fixed","header","color","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6efab5ea.chunk.js","sourcesContent":["import buildingsRaw from './json/buildings.json';\r\nimport recipesRaw from './json/recipes.json';\r\nimport resourcesRaw from './json/resources.json';\r\nimport itemsRaw from './json/items.json';\r\nimport handGatheredItemsRaw from './json/handGatheredItems.json';\r\n\r\n\r\nexport type ItemRate = {\r\n  itemClass: string,\r\n  perMinute: number,\r\n};\r\n\r\nexport type ItemQuantity = {\r\n  itemClass: string,\r\n  quantity: number,\r\n};\r\n\r\nexport type BuildingsInfo = {\r\n  slug: string,\r\n  name: string,\r\n  power: number,\r\n  area: number,\r\n  buildCost: ItemQuantity[],\r\n};\r\n\r\nexport type RecipeInfo = {\r\n  slug: string,\r\n  name: string,\r\n  isAlternate: boolean,\r\n  ingredients: ItemRate[],\r\n  products: ItemRate[],\r\n  producedIn: string,\r\n};\r\n\r\nexport type ResourceInfo = {\r\n  itemClass: string,\r\n  maxExtraction: number | null,\r\n  relativeValue: number,\r\n};\r\n\r\nexport type ItemInfo = {\r\n  slug: string,\r\n  name: string,\r\n  sinkPoints: number,\r\n  usedInRecipes: string[],\r\n  producedFromRecipes: string[],\r\n};\r\n\r\nexport type BuildingMap = { [key in keyof typeof buildingsRaw]: BuildingsInfo } & { [key: string]: BuildingsInfo };\r\nexport type RecipeMap = { [key in keyof typeof recipesRaw]: RecipeInfo } & { [key: string]: RecipeInfo };\r\nexport type ResourceMap = { [key in keyof typeof resourcesRaw]: ResourceInfo } & { [key: string]: ResourceInfo };\r\nexport type ItemMap = { [key in keyof typeof itemsRaw]: ItemInfo } & { [key: string]: ItemInfo };\r\nexport type HandGatheredItemMap = { [key in keyof typeof handGatheredItemsRaw]: string } & { [key: string]: string };\r\n\r\nexport const buildings = (buildingsRaw as BuildingMap);\r\nexport const recipes = (recipesRaw as RecipeMap);\r\nexport const resources = (resourcesRaw as ResourceMap);\r\nexport const items = (itemsRaw as ItemMap);\r\nexport const handGatheredItems = (handGatheredItemsRaw as HandGatheredItemMap);\r\n","import { useRef, useEffect } from 'react';\r\n\r\nexport function usePrevious<T>(value: T) {\r\n  const ref = useRef<T>();\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  }, [value]);\r\n  return ref.current;\r\n}\r\n","import loadGLPK, { LP, Var } from 'glpk.js';\r\nimport { nanoid } from 'nanoid';\r\nimport { FactoryOptions } from '../../contexts/production';\r\nimport { buildings, items, recipes, resources, handGatheredItems } from '../../data';\r\nimport { RecipeMap } from '../../contexts/production';\r\n\r\nconst EPSILON = 1e-8;\r\nconst MAXIMIZE_OBJECTIVE_WEIGHT = 1e6;\r\n\r\nexport const NODE_TYPE = {\r\n  FINAL_PRODUCT: 'FINAL_PRODUCT',\r\n  SIDE_PRODUCT: 'SIDE_PRODUCT',\r\n  INPUT_ITEM: 'INPUT_ITEM',\r\n  HAND_GATHERED_RESOURCE: 'HAND_GATHERED_RESOURCE',\r\n  RESOURCE: 'RESOURCE',\r\n  RECIPE: 'RECIPE',\r\n};\r\n\r\nexport const POINTS_ITEM_KEY = 'POINTS_ITEM_KEY';\r\n\r\ntype Inputs = {\r\n  [key: string]: {\r\n    amount: number,\r\n    weight: number,\r\n    type: string,\r\n  }\r\n};\r\n\r\ntype Outputs = {\r\n  [key: string]: {\r\n    value: number,\r\n    recipe: string | null,\r\n    maximize: boolean,\r\n    isPoints: boolean,\r\n  }\r\n};\r\n\r\ntype GlobalWeights = {\r\n  resources: number,\r\n  power: number,\r\n  buildArea: number,\r\n};\r\n\r\ntype ProductionSolution = { [key: string]: number };\r\ntype ProductionAmount = { recipeKey: string, amount: number };\r\ntype ItemProductionTotals = {\r\n  [key: string]: {\r\n    producedBy: ProductionAmount[],\r\n    usedBy: ProductionAmount[],\r\n  }\r\n};\r\n\r\nexport type SolverResults = {\r\n  productionGraph: ProductionGraph | null,\r\n  report: Report | null,\r\n  timestamp: number,\r\n  error: string,\r\n};\r\n\r\nexport type Report = {\r\n  pointsProduced: number,\r\n  powerUsageEstimate: number,\r\n  resourceEfficiencyScore: number,\r\n  totalBuildArea: number,\r\n  estimatedFoundations: number,\r\n  buildingsUsed: {\r\n    [key: string]: {\r\n      count: number,\r\n      materialCost: {\r\n        [key: string]: number,\r\n      }\r\n    },\r\n  },\r\n  totalMaterialCost: {\r\n    [key: string]: number,\r\n  },\r\n}\r\n\r\nexport type ProductionGraph = {\r\n  nodes: { [key: string]: GraphNode },\r\n  edges: GraphEdge[],\r\n};\r\n\r\nexport type GraphNode = {\r\n  id: string,\r\n  key: string,\r\n  type: string,\r\n  multiplier: number,\r\n};\r\n\r\nexport type GraphEdge = {\r\n  key: string,\r\n  from: string,\r\n  to: string,\r\n  productionRate: number,\r\n};\r\n\r\nexport class ProductionSolver {\r\n  private globalWeights: GlobalWeights;\r\n  private inputs: Inputs;\r\n  private outputs: Outputs;\r\n  private allowedRecipes: RecipeMap;\r\n\r\n  public constructor(options: FactoryOptions) {\r\n    this.allowedRecipes = options.allowedRecipes;\r\n    \r\n    this.globalWeights = {\r\n      resources: Number(options.weightingOptions.resources),\r\n      power: Number(options.weightingOptions.power),\r\n      buildArea: Number(options.weightingOptions.buildArea),\r\n    };\r\n\r\n    this.validateNumber(this.globalWeights.resources);\r\n    this.validateNumber(this.globalWeights.power);\r\n    this.validateNumber(this.globalWeights.buildArea);\r\n\r\n    const maxGlobalWeight = Math.max(this.globalWeights.resources, this.globalWeights.power, this.globalWeights.buildArea);\r\n    this.globalWeights.resources /= maxGlobalWeight;\r\n    this.globalWeights.power /= maxGlobalWeight;\r\n    this.globalWeights.buildArea /= (10 * maxGlobalWeight); // Extra factor of 10 to be closer to power numbers\r\n\r\n    this.inputs = {};\r\n\r\n    options.inputResources.forEach((item) => {\r\n      const resourceData = resources[item.itemKey];\r\n      if (!resourceData) return;\r\n      const amount = item.unlimited ? Infinity : Number(item.value);\r\n      this.validateNumber(amount);\r\n      if (!amount) return;\r\n      const weight = Number(item.weight);\r\n      this.validateNumber(weight);\r\n      this.inputs[item.itemKey] = {\r\n        amount,\r\n        weight,\r\n        type: NODE_TYPE.RESOURCE,\r\n      }\r\n    });\r\n\r\n    const maxResourceWeight = Math.max(...Object.values(this.inputs).map((i) => i.weight));\r\n    Object.values(this.inputs).forEach((i) => { i.weight /= maxResourceWeight });\r\n\r\n    options.inputItems.forEach((item) => {\r\n      if (!item.itemKey) return;\r\n      const amount = item.unlimited ? Infinity : Number(item.value);\r\n      this.validateNumber(amount);\r\n      if (!amount) return;\r\n      if (!this.inputs[item.itemKey]) {\r\n        this.inputs[item.itemKey] = {\r\n          amount,\r\n          weight: 0,\r\n          type: NODE_TYPE.INPUT_ITEM,\r\n        }\r\n      } else {\r\n        this.inputs[item.itemKey].amount += amount;\r\n      }\r\n    });\r\n\r\n    if (options.allowHandGatheredItems) {\r\n      Object.keys(handGatheredItems).forEach((item) => {\r\n        this.inputs[item] = {\r\n          amount: Infinity,\r\n          weight: 1000,\r\n          type: NODE_TYPE.HAND_GATHERED_RESOURCE,\r\n        };\r\n      });\r\n    }\r\n\r\n    this.outputs = {};\r\n    const rateTargets: Outputs = {};\r\n    const recipeTargets: Outputs = {};\r\n    const maximizeTargets: Outputs = {};\r\n    const sortedMaximizeTargets: Outputs = {};\r\n    options.productionItems.forEach((item) => {\r\n      if (!item.itemKey) return;\r\n      const amount = Number(item.value);\r\n      this.validateNumber(amount);\r\n      if (!amount) return;\r\n      switch (item.mode) {\r\n        case 'per-minute':\r\n          if (rateTargets[item.itemKey]) {\r\n            rateTargets[item.itemKey].value += amount;\r\n          } else {\r\n            rateTargets[item.itemKey] = {\r\n              value: amount,\r\n              recipe: null,\r\n              maximize: false,\r\n              isPoints: item.itemKey === POINTS_ITEM_KEY,\r\n            };\r\n          }\r\n          break;\r\n        case 'maximize':\r\n          if (maximizeTargets[item.itemKey]) {\r\n            if (maximizeTargets[item.itemKey].value < amount) {\r\n              maximizeTargets[item.itemKey].value = amount;\r\n            }\r\n          } else {\r\n            maximizeTargets[item.itemKey] = {\r\n              value: amount,\r\n              recipe: null,\r\n              maximize: true,\r\n              isPoints: item.itemKey === POINTS_ITEM_KEY,\r\n            };\r\n          }\r\n          break;\r\n        default:\r\n          const recipeKey = item.mode;\r\n          const recipeInfo = recipes[recipeKey];\r\n          if (recipeInfo) {\r\n            if (!this.allowedRecipes[recipeKey]) {\r\n              throw new Error('CANNOT TARGET A DISABLED RECIPE');\r\n            }\r\n            const target = recipeInfo.products.find((p) => p.itemClass === item.itemKey)!;\r\n            if (rateTargets[item.itemKey]) {\r\n              rateTargets[item.itemKey].value += target.perMinute * amount;\r\n            } else {\r\n              rateTargets[item.itemKey] = {\r\n                value: target.perMinute * amount,\r\n                recipe: null,\r\n                maximize: false,\r\n                isPoints: false,\r\n              };\r\n            }\r\n            if (recipeTargets[recipeKey]) {\r\n              recipeTargets[recipeKey].value += amount;\r\n            } else {\r\n              recipeTargets[recipeKey] = {\r\n                value: amount,\r\n                recipe: recipeKey,\r\n                maximize: false,\r\n                isPoints: false,\r\n              };\r\n            }\r\n          } else {\r\n            throw new Error('INVALID OUTPUT MODE SELECTION');\r\n          }\r\n      }\r\n    });\r\n\r\n    Object.entries(maximizeTargets)\r\n      .sort((a, b) => {\r\n        if (a[1].value > b[1].value) return 1;\r\n        if (a[1].value < b[1].value) return -1;\r\n        return 0;\r\n      })\r\n      .forEach(([key, val], index) => {\r\n        sortedMaximizeTargets[key] = {\r\n          ...val,\r\n          value: index + 1,\r\n        }\r\n      });\r\n\r\n    this.outputs = {\r\n      ...rateTargets,\r\n      ...recipeTargets,\r\n      ...sortedMaximizeTargets,\r\n    };\r\n    if (Object.keys(this.outputs).length === 0) {\r\n      throw new Error('NO OUTPUTS SET');\r\n    }\r\n  }\r\n\r\n  private validateNumber(num: Number) {\r\n    if (Number.isNaN(num)) {\r\n      throw new Error('INVALID VALUE: NOT A NUMBER');\r\n    } else if (num < 0) {\r\n      throw new Error('INVALID VALUE: NEGATIVE NUMBER');\r\n    }\r\n  }\r\n\r\n  public async exec(): Promise<SolverResults> {\r\n    const timestamp = performance.now();\r\n    try {\r\n      const productionSolution = await this.solveProduction();\r\n      if (Object.keys(productionSolution).length === 0) {\r\n        throw new Error('SOLUTION IS EMPTY.');\r\n      }\r\n      const productionGraph = this.generateProductionGraph(productionSolution);\r\n      const report = this.generateProductionReport(productionGraph);\r\n\r\n      return {\r\n        productionGraph,\r\n        report,\r\n        timestamp: timestamp,\r\n        error: '',\r\n      };\r\n    } catch (e: any) {\r\n      return {\r\n        productionGraph: null,\r\n        report: null,\r\n        timestamp: timestamp,\r\n        error: e.message,\r\n      };\r\n    }\r\n  }\r\n\r\n  private async solveProduction(): Promise<ProductionSolution> {\r\n    const glpk = await loadGLPK();\r\n    const model: LP = {\r\n      name: 'production',\r\n      objective: {\r\n        name: 'score',\r\n        direction: glpk.GLP_MIN,\r\n        vars: [],\r\n      },\r\n      subjectTo: [],\r\n    };\r\n\r\n    const pointsVars: Var[] = [];\r\n\r\n    for (const [recipeKey, recipeInfo] of Object.entries(recipes)) {\r\n      if (!this.allowedRecipes[recipeKey]) continue;\r\n      const buildingInfo = buildings[recipeInfo.producedIn];\r\n      const powerScore = buildingInfo.power > 0 ? buildingInfo.power * this.globalWeights.power : 0;\r\n      const areaScore = buildingInfo.area * this.globalWeights.buildArea;\r\n      model.objective.vars.push({\r\n        name: recipeKey,\r\n        coef: powerScore + areaScore,\r\n      });\r\n\r\n      if (this.outputs[recipeKey]) {\r\n        model.subjectTo.push({\r\n          name: `${recipeKey} recipe constraint`,\r\n          vars: [{ name: recipeKey, coef: 1 }],\r\n          bnds: { type: glpk.GLP_LO, ub: 0, lb: this.outputs[recipeKey].value },\r\n        });\r\n      }\r\n\r\n      if (this.outputs[POINTS_ITEM_KEY]) {\r\n        let pointCoef = 0;\r\n        for (const product of recipeInfo.products) {\r\n          if (!this.inputs[product.itemClass]) {\r\n            pointCoef -= product.perMinute * items[product.itemClass].sinkPoints / 1000;\r\n          }\r\n        }\r\n        for (const ingredient of recipeInfo.ingredients) {\r\n          if (!this.inputs[ingredient.itemClass]) {\r\n            pointCoef += ingredient.perMinute * items[ingredient.itemClass].sinkPoints / 1000;\r\n          } \r\n        }\r\n        pointsVars.push({ name: recipeKey, coef: pointCoef });\r\n      }\r\n    }\r\n\r\n    if (this.outputs[POINTS_ITEM_KEY]) {\r\n      if (this.outputs[POINTS_ITEM_KEY].maximize) {\r\n        pointsVars\r\n          .map<Var>((v) => ({\r\n            name: v.name,\r\n            coef: v.coef * Math.pow(MAXIMIZE_OBJECTIVE_WEIGHT, this.outputs[POINTS_ITEM_KEY].value),\r\n          }))\r\n          .forEach((v) => {\r\n            const existingVar = model.objective.vars.find((ov) => ov.name === v.name);\r\n            if (existingVar) {\r\n              existingVar.coef += v.coef;\r\n            } else {\r\n              model.objective.vars.push(v);\r\n            }\r\n          });\r\n      } else {\r\n        model.subjectTo.push({\r\n          name: 'AWESOME Sink Points constraint',\r\n          vars: pointsVars,\r\n          bnds: { type: glpk.GLP_UP, ub: -this.outputs[POINTS_ITEM_KEY].value, lb: NaN },\r\n        });\r\n      }\r\n    }\r\n\r\n    for (const [itemKey, itemInfo] of Object.entries(items)) {\r\n      const vars: Var[] = [];\r\n\r\n      for (const recipeKey of itemInfo.usedInRecipes) {\r\n        if (!this.allowedRecipes[recipeKey]) continue;\r\n        const recipeInfo = recipes[recipeKey];\r\n        const target = recipeInfo.ingredients.find((i) => i.itemClass === itemKey)!;\r\n        vars.push({ name: recipeKey, coef: target.perMinute });\r\n      }\r\n\r\n      for (const recipeKey of itemInfo.producedFromRecipes) {\r\n        if (!this.allowedRecipes[recipeKey]) continue;\r\n        const recipeInfo = recipes[recipeKey];\r\n        const target = recipeInfo.products.find((p) => p.itemClass === itemKey)!;\r\n        const existingVar = vars.find((v) => v.name === recipeKey);\r\n        if (existingVar) {\r\n          existingVar.coef -= target.perMinute;\r\n        } else {\r\n          vars.push({ name: recipeKey, coef: -target.perMinute });\r\n        }\r\n      }\r\n\r\n      if (vars.length === 0) continue;\r\n\r\n      let objectiveVars: Var[] = [];\r\n\r\n      if (this.inputs[itemKey]) {\r\n        const inputInfo = this.inputs[itemKey];\r\n        if (inputInfo.amount !== Infinity) {\r\n          model.subjectTo.push({\r\n            name: `${itemKey} resource constraint`,\r\n            vars,\r\n            bnds: { type: glpk.GLP_UP, ub: inputInfo.amount, lb: NaN },\r\n          });\r\n        }\r\n\r\n        if (inputInfo.type === NODE_TYPE.RESOURCE || inputInfo.type === NODE_TYPE.HAND_GATHERED_RESOURCE) {\r\n          objectiveVars = vars\r\n            .filter((v) => v.coef > 0)\r\n            .map<Var>((v) => ({\r\n              name: v.name,\r\n              coef: v.coef * inputInfo.weight * this.globalWeights.resources,\r\n            }));\r\n        }\r\n      }\r\n\r\n      else if (this.outputs[itemKey]) {\r\n        const outputInfo = this.outputs[itemKey];\r\n        if (outputInfo.maximize) {\r\n          model.subjectTo.push({\r\n            name: `${itemKey} final product constraint`,\r\n            vars,\r\n            bnds: { type: glpk.GLP_UP, ub: 0, lb: NaN },\r\n          });\r\n\r\n          objectiveVars = vars.map<Var>((v) => ({\r\n            name: v.name,\r\n            coef: v.coef * Math.pow(MAXIMIZE_OBJECTIVE_WEIGHT, outputInfo.value),\r\n          }));\r\n\r\n        } else {\r\n          model.subjectTo.push({\r\n            name: `${itemKey} final product constraint`,\r\n            vars,\r\n            bnds: { type: glpk.GLP_UP, ub: -outputInfo.value, lb: NaN },\r\n          });\r\n        }\r\n      }\r\n\r\n      else {\r\n        model.subjectTo.push({\r\n          name: `${itemKey} intermediates constraint`,\r\n          vars,\r\n          bnds: { type: glpk.GLP_UP, ub: 0, lb: NaN },\r\n        });\r\n      }\r\n\r\n      objectiveVars.forEach((v) => {\r\n        const existingVar = model.objective.vars.find((ov) => ov.name === v.name);\r\n        if (existingVar) {\r\n          existingVar.coef += v.coef;\r\n        } else {\r\n          model.objective.vars.push(v);\r\n        }\r\n      });\r\n    }\r\n\r\n    const solution = await glpk.solve(model, { msglev: glpk.GLP_MSG_OFF });\r\n    if (solution.result.status !== glpk.GLP_OPT) {\r\n      throw new Error(\"NO POSSIBLE SOLUTION\");\r\n    }\r\n\r\n    const result: ProductionSolution = {};\r\n    Object.entries(solution.result.vars).forEach(([key, val]) => {\r\n      if (Math.abs(val) > EPSILON) {\r\n        result[key] = val;\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n\r\n  private generateProductionGraph(productionSolution: ProductionSolution): ProductionGraph {\r\n    const itemProductionTotals: ItemProductionTotals = {};\r\n    const graph: ProductionGraph = {\r\n      nodes: {},\r\n      edges: [],\r\n    };\r\n\r\n    for (const [recipeKey, multiplier] of Object.entries(productionSolution)) {\r\n      const recipeInfo = recipes[recipeKey];\r\n\r\n      for (const product of recipeInfo.products) {\r\n        const amount = multiplier * product.perMinute;\r\n        if (!itemProductionTotals[product.itemClass]) {\r\n          itemProductionTotals[product.itemClass] = {\r\n            producedBy: [],\r\n            usedBy: [],\r\n          };\r\n        }\r\n        itemProductionTotals[product.itemClass].producedBy.push({ recipeKey, amount });\r\n      }\r\n\r\n      for (const ingredient of recipeInfo.ingredients) {\r\n        const amount = multiplier * ingredient.perMinute;\r\n        if (!itemProductionTotals[ingredient.itemClass]) {\r\n          itemProductionTotals[ingredient.itemClass] = {\r\n            producedBy: [],\r\n            usedBy: [],\r\n          };\r\n        }\r\n        itemProductionTotals[ingredient.itemClass].usedBy.push({ recipeKey, amount });\r\n      }\r\n\r\n      graph.nodes[recipeKey] = {\r\n        id: nanoid(),\r\n        key: recipeKey,\r\n        type: NODE_TYPE.RECIPE,\r\n        multiplier,\r\n      };\r\n    }\r\n\r\n    for (const [itemKey, productionTotals] of Object.entries(itemProductionTotals)) {\r\n      const { producedBy, usedBy } = productionTotals;\r\n      let i = 0, j = 0;\r\n      nextDemand:\r\n      while (i < usedBy.length) {\r\n        const usageInfo = usedBy[i];\r\n        const usageNode = graph.nodes[usageInfo.recipeKey];\r\n\r\n        while (j < producedBy.length) {\r\n          const productionInfo = producedBy[j];\r\n          const productionNode = graph.nodes[productionInfo.recipeKey];\r\n\r\n          const outputRecipe = this.outputs[itemKey]?.recipe;\r\n          if (outputRecipe && outputRecipe === productionInfo.recipeKey) {\r\n            const outputInfo = this.outputs[itemKey];\r\n            const recipeInfo = recipes[outputRecipe];\r\n            const target = recipeInfo.products.find((p) => p.itemClass === itemKey)!;\r\n            const recipeAmount = outputInfo.value * target.perMinute;\r\n            productionInfo.amount -= recipeAmount;\r\n\r\n            let itemNode = graph.nodes[itemKey];\r\n            if (!itemNode) {\r\n              itemNode = {\r\n                id: nanoid(),\r\n                key: itemKey,\r\n                type: NODE_TYPE.FINAL_PRODUCT,\r\n                multiplier: recipeAmount,\r\n              }\r\n              graph.nodes[itemKey] = itemNode;\r\n            } else {\r\n              graph.nodes[itemKey].multiplier += recipeAmount;\r\n            }\r\n            graph.edges.push({\r\n              key: itemKey,\r\n              from: productionNode.id,\r\n              to: itemNode.id,\r\n              productionRate: recipeAmount,\r\n            });\r\n          } \r\n\r\n          if (productionInfo.amount < EPSILON) {\r\n            j++\r\n            continue;\r\n          }\r\n\r\n          if (usageInfo.amount <= productionInfo.amount) {\r\n            graph.edges.push({\r\n              key: itemKey,\r\n              from: productionNode.id,\r\n              to: usageNode.id,\r\n              productionRate: usageInfo.amount,\r\n            });\r\n            productionInfo.amount -= usageInfo.amount;\r\n            usageInfo.amount = 0;\r\n            i++;\r\n            continue nextDemand;\r\n          } else {\r\n            graph.edges.push({\r\n              key: itemKey,\r\n              from: productionNode.id,\r\n              to: usageNode.id,\r\n              productionRate: productionInfo.amount,\r\n            });\r\n            usageInfo.amount -= productionInfo.amount;\r\n            productionInfo.amount = 0;\r\n          }\r\n          j++;\r\n        }\r\n        break;\r\n      }\r\n\r\n      while (i < usedBy.length) {\r\n        const usageInfo = usedBy[i];\r\n        const usageNode = graph.nodes[usageInfo.recipeKey];\r\n        if (usageInfo.amount > EPSILON && this.inputs[itemKey]) {\r\n          let itemNode = graph.nodes[itemKey];\r\n          if (!itemNode) {\r\n            const inputInfo = this.inputs[itemKey];\r\n            itemNode = {\r\n              id: nanoid(),\r\n              key: itemKey,\r\n              type: inputInfo.type,\r\n              multiplier: usageInfo.amount,\r\n            };\r\n            graph.nodes[itemKey] = itemNode;\r\n          } else {\r\n            itemNode.multiplier += usageInfo.amount;\r\n          }\r\n          graph.edges.push({\r\n            key: itemKey,\r\n            from: itemNode.id,\r\n            to: usageNode.id,\r\n            productionRate: usageInfo.amount,\r\n          });\r\n          usageInfo.amount = 0;\r\n        }\r\n        i++;\r\n      }\r\n\r\n      while (j < producedBy.length) {\r\n        const productionInfo = producedBy[j];\r\n        const productionNode = graph.nodes[productionInfo.recipeKey];\r\n        if (productionInfo.amount > EPSILON) {\r\n          let itemNode = graph.nodes[itemKey];\r\n          if (!itemNode) {\r\n            itemNode = {\r\n              id: nanoid(),\r\n              key: itemKey,\r\n              type: this.outputs[itemKey] || this.outputs[POINTS_ITEM_KEY] ? NODE_TYPE.FINAL_PRODUCT : NODE_TYPE.SIDE_PRODUCT,\r\n              multiplier: productionInfo.amount\r\n            };\r\n            graph.nodes[itemKey] = itemNode;\r\n          } else {\r\n            itemNode.multiplier += productionInfo.amount;\r\n          }\r\n          graph.edges.push({\r\n            key: itemKey,\r\n            from: productionNode.id,\r\n            to: itemNode.id,\r\n            productionRate: productionInfo.amount,\r\n          });\r\n          productionInfo.amount = 0;\r\n        }\r\n        j++;\r\n      }\r\n    }\r\n\r\n    return graph;\r\n  }\r\n\r\n  private generateProductionReport(productionGraph: ProductionGraph): Report {\r\n    const report: Report = {\r\n      pointsProduced: 0,\r\n      powerUsageEstimate: 0,\r\n      resourceEfficiencyScore: 0,\r\n      totalBuildArea: 0,\r\n      estimatedFoundations: 0,\r\n      buildingsUsed: {},\r\n      totalMaterialCost: {},\r\n    };\r\n\r\n    for (const [key, node] of Object.entries(productionGraph.nodes)) {\r\n      if (node.type === NODE_TYPE.RECIPE) {\r\n        const recipeInfo = recipes[key];\r\n        const buildingKey = recipeInfo.producedIn;\r\n        const buildingInfo = buildings[buildingKey];\r\n\r\n        report.powerUsageEstimate += node.multiplier * buildingInfo.power;\r\n        report.totalBuildArea += Math.ceil(node.multiplier) * buildingInfo.area;\r\n        if (!report.buildingsUsed[buildingKey]) {\r\n          report.buildingsUsed[buildingKey] = {\r\n            count: Math.ceil(node.multiplier),\r\n            materialCost: {},\r\n          };\r\n        } else {\r\n          report.buildingsUsed[buildingKey].count += Math.ceil(node.multiplier);\r\n        }\r\n\r\n        for (const ingredient of buildingInfo.buildCost) {\r\n          const amount = Math.ceil(node.multiplier) * ingredient.quantity;\r\n          if (!report.buildingsUsed[buildingKey].materialCost[ingredient.itemClass]) {\r\n            report.buildingsUsed[buildingKey].materialCost[ingredient.itemClass] = amount;\r\n          } else {\r\n            report.buildingsUsed[buildingKey].materialCost[ingredient.itemClass] += amount;\r\n          }\r\n          if (!report.totalMaterialCost[ingredient.itemClass]) {\r\n            report.totalMaterialCost[ingredient.itemClass] = amount;\r\n          } else {\r\n            report.totalMaterialCost[ingredient.itemClass] += amount;\r\n          }\r\n        }\r\n        continue;\r\n      }\r\n\r\n      const itemInfo = items[key];\r\n      if (node.type === NODE_TYPE.FINAL_PRODUCT) {\r\n        report.pointsProduced += node.multiplier * itemInfo.sinkPoints;\r\n      } else if (node.type === NODE_TYPE.RESOURCE) {\r\n        report.resourceEfficiencyScore += node.multiplier * this.inputs[key].weight;\r\n      }\r\n    }\r\n\r\n    report.estimatedFoundations = Math.ceil(2 * (report.totalBuildArea / 64));\r\n\r\n    return report;\r\n  }\r\n}\r\n","import React, { createContext, useContext, useReducer, useState, useEffect } from 'react';\r\nimport { nanoid } from 'nanoid';\r\nimport { usePrevious } from '../../hooks/usePrevious';\r\nimport { resources, recipes, items } from '../../data'\r\nimport { POINTS_ITEM_KEY } from '../../utilities/production-solver';\r\n\r\nconst FACTORY_SETTINGS_VERSION = 'v1_U5';\r\n\r\n// TYPES\r\nexport type ProductionItemOptions = {\r\n  key: string,\r\n  itemKey: string,\r\n  mode: 'per-minute'|'maximize'|string,\r\n  value: string,\r\n};\r\n\r\nexport type WeightingOptions = {\r\n  resources: string,\r\n  power: string,\r\n  buildArea: string,\r\n};\r\n\r\nexport type InputItemOptions = {\r\n  key: string,\r\n  itemKey: string,\r\n  value: string,\r\n  weight: string,\r\n  unlimited: boolean,\r\n};\r\n\r\nexport type RecipeMap = {\r\n  [key: string]: boolean,\r\n};\r\n\r\nexport type FactoryOptions = {\r\n  version: string,\r\n  key: string,\r\n  productionItems: ProductionItemOptions[],\r\n  inputItems: InputItemOptions[],\r\n  inputResources: InputItemOptions[],\r\n  allowHandGatheredItems: boolean,\r\n  weightingOptions: WeightingOptions,\r\n  allowedRecipes: RecipeMap,\r\n};\r\n\r\nexport type ProductionContextType = {\r\n  state: FactoryOptions,\r\n  loaded: boolean,\r\n  dispatch: React.Dispatch<FactoryAction>,\r\n}\r\n\r\n\r\n// CONTEXT\r\nexport const ProductionContext = createContext<ProductionContextType | null>(null);\r\nProductionContext.displayName = 'ProductionContext';\r\n\r\n\r\n// HELPER HOOK\r\nexport function useProductionContext() {\r\n  const ctx = useContext(ProductionContext);\r\n  if (!ctx) {\r\n    throw new Error('ProductionContext is null');\r\n  }\r\n  return ctx;\r\n}\r\n\r\n\r\n// DEFAULTS\r\nfunction getDefaultProductionItem(): ProductionItemOptions {\r\n  return ({\r\n    key: nanoid(),\r\n    itemKey: '',\r\n    mode: 'per-minute',\r\n    value: '10',\r\n  });\r\n}\r\n\r\nfunction getDefaultInputItem(): InputItemOptions {\r\n  return ({\r\n    key: nanoid(),\r\n    itemKey: '',\r\n    value: '0',\r\n    weight: '0',\r\n    unlimited: false,\r\n  });\r\n}\r\n\r\nconst ORDERED_RESOURCES = [\r\n  'Desc_OreIron_C',\r\n  'Desc_OreCopper_C',\r\n  'Desc_Stone_C',\r\n  'Desc_Coal_C',\r\n  'Desc_OreGold_C',\r\n  'Desc_RawQuartz_C',\r\n  'Desc_Sulfur_C',\r\n  'Desc_LiquidOil_C',\r\n  'Desc_OreBauxite_C',\r\n  'Desc_OreUranium_C',\r\n  'Desc_NitrogenGas_C',\r\n  'Desc_Water_C',\r\n];\r\nfunction getInitialInputResources(): InputItemOptions[] {\r\n  return Object.entries(resources)\r\n    .map(([key, data]) => {\r\n      let value = '0';\r\n      let unlimited = false;\r\n      if (key === 'Desc_Water_C') {\r\n        unlimited = true;\r\n      } else {\r\n        value = String(data.maxExtraction);\r\n      }\r\n      return {\r\n        key: key,\r\n        itemKey: key,\r\n        value,\r\n        weight: String(data.relativeValue),\r\n        unlimited,\r\n      };\r\n    })\r\n    .sort((a, b) => {\r\n      let aIndex = ORDERED_RESOURCES.findIndex((r) => r === a.itemKey);\r\n      if (aIndex === -1) aIndex = Infinity;\r\n      let bIndex = ORDERED_RESOURCES.findIndex((r) => r === b.itemKey);\r\n      if (bIndex === -1) bIndex = Infinity;\r\n      return aIndex < bIndex ? -1 : 1;\r\n    });\r\n}\r\n\r\nfunction getInitialWeightingOptions(): WeightingOptions {\r\n  return {\r\n    resources: '1000',\r\n    power: '10',\r\n    buildArea: '1',\r\n  };\r\n}\r\n\r\nfunction getInitialAllowedRecipes(): RecipeMap {\r\n  const recipeMap: RecipeMap = {};\r\n  Object.entries(recipes).forEach(([key, data]) => {\r\n    recipeMap[key] = !data.isAlternate;\r\n  });\r\n  return recipeMap;\r\n}\r\n\r\nfunction getInitialState(): FactoryOptions {\r\n  return {\r\n    version: FACTORY_SETTINGS_VERSION,\r\n    key: nanoid(),\r\n    productionItems: [],\r\n    inputItems: [],\r\n    inputResources: getInitialInputResources(),\r\n    allowHandGatheredItems: false,\r\n    weightingOptions: getInitialWeightingOptions(),\r\n    allowedRecipes: getInitialAllowedRecipes(),\r\n  };\r\n}\r\n\r\n\r\n// REDUCER\r\nexport type FactoryAction = \r\n  | { type: 'ADD_PRODUCTION_ITEM' }\r\n  | { type: 'DELETE_PRODUCTION_ITEM', key: string }\r\n  | { type: 'UPDATE_PRODUCTION_ITEM', data: ProductionItemOptions }\r\n  | { type: 'ADD_INPUT_ITEM' }\r\n  | { type: 'DELETE_INPUT_ITEM', key: string }\r\n  | { type: 'UPDATE_INPUT_ITEM', data: InputItemOptions }\r\n  | { type: 'UPDATE_INPUT_RESOURCE', data: InputItemOptions }\r\n  | { type: 'SET_RESOURCES_TO_MAP_LIMITS' }\r\n  | { type: 'SET_RESOURCES_TO_0' }\r\n  | { type: 'SET_ALLOW_HAND_GATHERED_ITEMS', active: boolean }\r\n  | { type: 'UPDATE_WEIGHTING_OPTIONS', data: WeightingOptions }\r\n  | { type: 'SET_ALL_WEIGHTS_DEFAULT' }\r\n  | { type: 'SET_RECIPE_ACTIVE', key: string, active: boolean }\r\n  | { type: 'MASS_SET_RECIPES_ACTIVE', alternates: boolean, active: boolean }\r\n  | { type: 'LOAD_FROM_QUERY_PARAM' };\r\n\r\nfunction reducer(state: FactoryOptions, action: FactoryAction): FactoryOptions {\r\n  switch (action.type) {\r\n    case 'ADD_PRODUCTION_ITEM': {\r\n      const newProductionItems = [\r\n        ...state.productionItems,\r\n        getDefaultProductionItem(),\r\n      ];\r\n      return { ...state, productionItems: newProductionItems };\r\n    }\r\n    case 'DELETE_PRODUCTION_ITEM': {\r\n      const newProductionItems = state.productionItems\r\n        .filter((i) => i.key !== action.key);\r\n      return { ...state, productionItems: newProductionItems };\r\n    }\r\n    case 'UPDATE_PRODUCTION_ITEM': {\r\n      const newProductionItems = state.productionItems\r\n        .map((i) => i.key === action.data.key ? action.data : i);\r\n      return { ...state, productionItems: newProductionItems };\r\n    }\r\n    case 'ADD_INPUT_ITEM': {\r\n      const newInputItems = [\r\n        ...state.inputItems,\r\n        getDefaultInputItem(),\r\n      ];\r\n      return { ...state, inputItems: newInputItems };\r\n    }\r\n    case 'DELETE_INPUT_ITEM': {\r\n      const newInputItems = state.inputItems\r\n        .filter((i) => i.key !== action.key);\r\n      return { ...state, inputItems: newInputItems };\r\n    }\r\n    case 'UPDATE_INPUT_ITEM': {\r\n      const newInputItems = state.inputItems\r\n        .map((i) => i.key === action.data.key ? action.data : i);\r\n      return { ...state, inputItems: newInputItems };\r\n    }\r\n    case 'UPDATE_INPUT_RESOURCE': {\r\n      const newInputResources = state.inputResources\r\n        .map((i) => i.key === action.data.key ? action.data : i);\r\n      return { ...state, inputResources: newInputResources };\r\n    }\r\n    case 'SET_RESOURCES_TO_MAP_LIMITS': {\r\n      const newInputResources = getInitialInputResources();\r\n      return { ...state, inputResources: newInputResources };\r\n    }\r\n    case 'SET_RESOURCES_TO_0': {\r\n      const newInputResources = state.inputResources\r\n        .map((data) => ({ ...data, value: '0', unlimited: false }));\r\n      return { ...state, inputResources: newInputResources };\r\n    }\r\n    case 'SET_ALLOW_HAND_GATHERED_ITEMS': {\r\n      return { ...state, allowHandGatheredItems: action.active };\r\n    }\r\n    case 'UPDATE_WEIGHTING_OPTIONS': {\r\n      const newWeightingOptions = { ...action.data };\r\n      return { ...state, weightingOptions: newWeightingOptions };\r\n    }\r\n    case 'SET_ALL_WEIGHTS_DEFAULT': {\r\n      const newWeightingOptions = getInitialWeightingOptions();\r\n      const newInputResources = state.inputResources\r\n        .map((i) => ({ ...i, weight: String(resources[i.itemKey].relativeValue) }));\r\n      return { ...state, weightingOptions: newWeightingOptions, inputResources: newInputResources };\r\n    }\r\n    case 'SET_RECIPE_ACTIVE': {\r\n      const newAllowedRecipes = { ...state.allowedRecipes };\r\n      newAllowedRecipes[action.key] = action.active;\r\n      return { ...state, allowedRecipes: newAllowedRecipes };\r\n    }\r\n    case 'MASS_SET_RECIPES_ACTIVE': {\r\n      const newAllowedRecipes = { ...state.allowedRecipes };\r\n      Object.keys(newAllowedRecipes).forEach((key) => {\r\n        if (action.alternates && recipes[key].isAlternate) {\r\n          newAllowedRecipes[key] = action.active;\r\n        } else if (!action.alternates && !recipes[key].isAlternate) {\r\n          newAllowedRecipes[key] = action.active;\r\n        }\r\n      })\r\n      return { ...state, allowedRecipes: newAllowedRecipes };\r\n    }\r\n    case 'LOAD_FROM_QUERY_PARAM': {\r\n      const params = new URLSearchParams(window.location.search);\r\n      const encodedState = params.get('f');\r\n      if (encodedState) {\r\n        try {\r\n          return decodeState(encodedState);\r\n        } catch (e) {\r\n          console.error(e);\r\n        }\r\n      }\r\n      return state;\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nfunction getItemSlug(itemKey: string) {\r\n  if (itemKey === POINTS_ITEM_KEY) {\r\n    return 'points';\r\n  }\r\n  return items[itemKey].slug;\r\n}\r\n\r\nfunction getItemBySlug(slug: string) {\r\n  if (slug === 'points') {\r\n    return POINTS_ITEM_KEY;\r\n  }\r\n  const itemEntry = Object.entries(items).find(([key, item]) => item.slug === slug);\r\n  if (itemEntry) {\r\n    return itemEntry[0];\r\n  }\r\n  throw new Error('INVALID ITEM SLUG');\r\n}\r\n\r\nconst SEP0 = ',';\r\nconst SEP1 = '|';\r\nconst SEP2 = ':';\r\n\r\n// ENCODE/DECODE\r\nfunction encodeState(state: FactoryOptions): string {\r\n  const fields: string[] = [];\r\n\r\n  fields.push(state.version);\r\n\r\n  const productionItemsField: string[] = [];\r\n  state.productionItems.forEach((item) => {\r\n    if (!item.itemKey) return;\r\n    productionItemsField.push(`${getItemSlug(item.itemKey)}${SEP2}${item.mode}${SEP2}${item.value}`);\r\n  });\r\n  fields.push(productionItemsField.join(SEP1));\r\n\r\n  const inputItemsField: string[] = [];\r\n  state.inputItems.forEach((item) => {\r\n    if (!item.itemKey) return;\r\n    inputItemsField.push(`${getItemSlug(item.itemKey)}${SEP2}${item.value}${SEP2}${item.weight}${SEP2}${item.unlimited ? '1' : '0'}`);\r\n  });\r\n  fields.push(inputItemsField.join(SEP1));\r\n\r\n  const inputResourcesField: string[] = [];\r\n  state.inputResources.forEach((item) => {\r\n    inputResourcesField.push(`${item.value}${SEP2}${item.weight}${SEP2}${item.unlimited ? '1' : '0'}`);\r\n  });\r\n  fields.push(inputResourcesField.join(SEP1));\r\n\r\n  fields.push(`${state.allowHandGatheredItems ? '1' : '0'}`);\r\n\r\n  fields.push(`${state.weightingOptions.resources}${SEP2}${state.weightingOptions.power}${SEP2}${state.weightingOptions.buildArea}`);\r\n\r\n  const allowedRecipesBits = Object.keys((state.allowedRecipes))\r\n    .sort((a, b) => {\r\n      if (a < b) return -1;\r\n      if(a > b) return 1;\r\n      return 0;\r\n    })\r\n    .map((key) => state.allowedRecipes[key] ? '1' : '0')\r\n    .join('');\r\n  fields.push(BigInt(`0b${allowedRecipesBits}`).toString(16));\r\n\r\n  return fields.join(SEP0);\r\n}\r\n\r\nfunction decodeState(stateStr: string): FactoryOptions {\r\n  const newState: FactoryOptions = getInitialState();\r\n\r\n  const fields = stateStr.split(SEP0);\r\n  if (fields[0] !== FACTORY_SETTINGS_VERSION) throw new Error('VERSION MISMATCH');\r\n  if (fields.length !== 7) throw new Error('INVALID DATA [BAD FIELDS]');\r\n\r\n  const productionItemsStrings = fields[1].split(SEP1);\r\n  if (productionItemsStrings[0]) {\r\n    productionItemsStrings.forEach((str) => {\r\n      const values = str.split(SEP2);\r\n      if (values.length !== 3) throw new Error('INVALID DATA [productionItems]');\r\n      newState.productionItems.push({\r\n        key: nanoid(),\r\n        itemKey: getItemBySlug(values[0]),\r\n        mode: values[1],\r\n        value: values[2],\r\n      });\r\n    });\r\n  }\r\n\r\n  const inputItemsStrings = fields[2].split(SEP1);\r\n  if (inputItemsStrings[0]) {\r\n    inputItemsStrings.forEach((str) => {\r\n      const values = str.split(SEP2);\r\n      if (values.length !== 4) throw new Error('INVALID DATA [inputItems]');\r\n      newState.inputItems.push({\r\n        key: nanoid(),\r\n        itemKey: getItemBySlug(values[0]),\r\n        value: values[1],\r\n        weight: values[2],\r\n        unlimited: !!parseInt(values[3]),\r\n      });\r\n    });\r\n  }\r\n\r\n  const inputResourcesStrings = fields[3].split(SEP1);\r\n  newState.inputResources.forEach((resourceOptions, i) => {\r\n    const values = inputResourcesStrings[i].split(SEP2);\r\n    if (values.length !== 3) throw new Error('INVALID DATA [inputResources]');\r\n    resourceOptions.value = values[0];\r\n    resourceOptions.weight = values[1];\r\n    resourceOptions.unlimited = !!parseInt(values[2]);\r\n  });\r\n\r\n  newState.allowHandGatheredItems = !!parseInt(fields[4]);\r\n\r\n  const weightingOptionsStrings = fields[5].split(SEP2);\r\n  if (weightingOptionsStrings.length !== 3) throw new Error('INVALID DATA [weightingOptions]');\r\n  newState.weightingOptions.resources = weightingOptionsStrings[0];\r\n  newState.weightingOptions.power = weightingOptionsStrings[1];\r\n  newState.weightingOptions.buildArea = weightingOptionsStrings[2];\r\n\r\n  const allowedRecipesBits = BigInt(`0x${fields[6]}`)\r\n    .toString(2)\r\n    .padStart(Object.keys(newState.allowedRecipes).length, '0')\r\n    .split('')\r\n    .map((b) => !!parseInt(b));\r\n  Object.keys(newState.allowedRecipes)\r\n    .sort((a, b) => {\r\n      if (a < b) return -1;\r\n      if (a > b) return 1;\r\n      return 0;\r\n    })\r\n    .forEach((key, i) => {\r\n      newState.allowedRecipes[key] = !!allowedRecipesBits[i];\r\n    });\r\n\r\n  return newState;\r\n}\r\n\r\n\r\n// PROVIDER\r\ntype PropTypes = { children: React.ReactNode };\r\nexport const ProductionProvider = ({ children }: PropTypes) => {\r\n  const [state, dispatch] = useReducer(reducer, getInitialState());\r\n  const [loaded, setLoaded] = useState(false);\r\n\r\n  const prevState = usePrevious(state);\r\n\r\n  useEffect(() => {\r\n    if (!loaded) {\r\n      dispatch({ type: 'LOAD_FROM_QUERY_PARAM' });\r\n      setLoaded(true);\r\n    }\r\n  }, [loaded]);\r\n\r\n  useEffect(() => {\r\n    if (prevState !== state) {\r\n      const encodedState = encodeState(state);\r\n      window.history.pushState(null, '', window.location.pathname + '?f=' + encodedState);\r\n    }\r\n  }, [prevState, state]);\r\n\r\n  return (\r\n    <ProductionContext.Provider value={{ state, loaded, dispatch }}>\r\n      {children}\r\n    </ProductionContext.Provider>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Button, Dropdown, Input, Grid, Icon } from 'semantic-ui-react';\r\nimport { items, recipes, resources } from '../../../../data';\r\nimport { useProductionContext } from '../../../../contexts/production';\r\nimport { POINTS_ITEM_KEY } from '../../../../utilities/production-solver';\r\n\r\nconst itemOptions = Object.keys(items)\r\n  .filter((key) => items[key].producedFromRecipes.length !== 0 && !resources[key])\r\n  .map((key) => ({\r\n    value: key,\r\n    text: items[key].name,\r\n  }))\r\n  .sort((a, b) => {\r\n    return a.text > b.text ? 1 : -1;\r\n  });\r\n\r\nitemOptions.unshift({\r\n  value: POINTS_ITEM_KEY,\r\n  text: 'AWESOME Sink Points (x1000)'\r\n})\r\n\r\nconst baseModeOptions = [\r\n  { value: 'per-minute', text: 'Items Per Min' },\r\n  { value: 'maximize', text: 'Maximize Output' },\r\n];\r\n\r\nconst ProductionTab = () => {\r\n  const ctx = useProductionContext();\r\n\r\n  function renderItemInputs() {\r\n    return ctx.state.productionItems.map((data) => {\r\n      const modeOptions = [...baseModeOptions];\r\n      if (data.itemKey) {\r\n        const recipeList = items[data.itemKey]?.producedFromRecipes || [];\r\n        recipeList.forEach((recipeKey) => {\r\n          const recipeInfo = recipes[recipeKey];\r\n          const target = recipeInfo?.products.find((p) => p.itemClass === data.itemKey);\r\n          if (target) {\r\n            const name = recipeInfo.isAlternate ? recipeInfo.name.replace('Alternate: ', '') : 'Base Recipe';\r\n            modeOptions.push({ value: recipeKey, text: `${name} [${target.perMinute}/min]` });\r\n          }\r\n        });\r\n      }\r\n      return (\r\n        <Grid.Row key={data.key}>\r\n          <Grid.Column style={{ flex: '1 1 auto', minWidth: '210px' }}>\r\n            <Dropdown\r\n              fluid\r\n              placeholder=\"Select an item\"\r\n              selection\r\n              search\r\n              clearable\r\n              options={itemOptions}\r\n              value={data.itemKey ? data.itemKey : ''}\r\n              onChange={(e, { value }) => {\r\n                const newMode = data.mode === 'maximize' ? 'maximize' : 'per-minute';\r\n                ctx.dispatch({\r\n                  type: 'UPDATE_PRODUCTION_ITEM',\r\n                  data: { ...data, itemKey: (value as string), mode: newMode },\r\n                });\r\n              }}\r\n            />\r\n          </Grid.Column>\r\n          <Grid.Column style={{ flex: '1 1 auto', minWidth: '230px' }}>\r\n            <Input\r\n              className='no-spinner'\r\n              type='number'\r\n              min='0'\r\n              step='1'\r\n              fluid\r\n              value={data.value}\r\n              onChange={(e, { value }) => {\r\n                ctx.dispatch({\r\n                  type: 'UPDATE_PRODUCTION_ITEM',\r\n                  data: { ...data, value: value },\r\n                });\r\n              }}\r\n              action\r\n            >\r\n              <input />\r\n              <Dropdown\r\n                style={{ minWidth: '140px' }}\r\n                selection\r\n                options={modeOptions}\r\n                value={data.mode}\r\n                onChange={(e, { value }) => {\r\n                  ctx.dispatch({\r\n                    type: 'UPDATE_PRODUCTION_ITEM',\r\n                    data: { ...data, mode: (value as any) },\r\n                  });\r\n                }}\r\n              />\r\n            </Input>\r\n          </Grid.Column>\r\n          <Grid.Column style={{ flex: '0 0 70px' }}>\r\n            <Button\r\n              icon\r\n              negative\r\n              onClick={() => { ctx.dispatch({ type: 'DELETE_PRODUCTION_ITEM', key: data.key }); }}\r\n            >\r\n              <Icon name='trash alternate outline' />\r\n            </Button>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      );\r\n    });\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <p>\r\n        Select the items you want to produce. When maximizing multiple outputs, the value represents the priority of that item.\r\n      </p>\r\n      <Grid>\r\n        {renderItemInputs()}\r\n        <Grid.Row columns={1}>\r\n          <Grid.Column>\r\n            <Button\r\n              primary\r\n              onClick={() => { ctx.dispatch({ type: 'ADD_PRODUCTION_ITEM' })}}\r\n            >\r\n              + Add Product\r\n            </Button>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProductionTab;\r\n","import React from 'react';\r\nimport { Button, Dropdown, Input, Checkbox, Grid, Icon, Header, Divider } from 'semantic-ui-react';\r\nimport { items, resources } from '../../../../data';\r\nimport { useProductionContext } from '../../../../contexts/production';\r\n\r\nconst itemOptions = Object.keys(items)\r\n  .filter((key) => items[key].producedFromRecipes.length !== 0 && items[key].usedInRecipes.length !== 0 && !resources[key])\r\n  .map((key) => ({\r\n    value: key,\r\n    text: items[key].name,\r\n  }))\r\n  .sort((a, b) => {\r\n    return a.text > b.text ? 1 : -1;\r\n  });\r\n\r\n\r\nconst InputsTab = () => {\r\n  const ctx = useProductionContext();\r\n\r\n  function renderItemInputs() {\r\n    return ctx.state.inputItems.map((data) => (\r\n      <Grid.Row key={data.key}>\r\n        <Grid.Column style={{ flex: '1 1 auto' }}>\r\n          <Dropdown\r\n            fluid\r\n            placeholder=\"Select an item\"\r\n            selection\r\n            search\r\n            clearable\r\n            options={itemOptions}\r\n            value={data.itemKey ? data.itemKey : ''}\r\n            onChange={(e, { value }) => {\r\n              ctx.dispatch({\r\n                type: 'UPDATE_INPUT_ITEM',\r\n                data: { ...data, itemKey: (value as string) },\r\n              });\r\n            }}\r\n          />\r\n        </Grid.Column>\r\n        <Grid.Column style={{ flex: '0 0 250px' }}>\r\n          <Input\r\n            className='no-spinner'\r\n            type='number'\r\n            min='0'\r\n            step='1'\r\n            fluid\r\n            value={data.value}\r\n            onChange={(e, { value }) => {\r\n              ctx.dispatch({\r\n                type: 'UPDATE_INPUT_ITEM',\r\n                data: { ...data, value: value },\r\n              });\r\n            }}\r\n            labelPosition='right'\r\n          >\r\n            <input disabled={data.unlimited} />\r\n            <Checkbox\r\n              className='label'\r\n              style={{ fontWeight: 'normal' }}\r\n              label='Unlimited'\r\n              checked={data.unlimited}\r\n              onChange={() => {\r\n                ctx.dispatch({\r\n                  type: 'UPDATE_INPUT_ITEM',\r\n                  data: { ...data, unlimited: !data.unlimited },\r\n                });\r\n              }}\r\n            />\r\n          </Input>\r\n        </Grid.Column>\r\n        <Grid.Column style={{ flex: '0 0 70px' }}>\r\n          <Button\r\n            icon\r\n            negative\r\n            onClick={() => { ctx.dispatch({ type: 'DELETE_INPUT_ITEM', key: data.key }); }}\r\n          >\r\n            <Icon name='trash alternate outline' />\r\n          </Button>\r\n        </Grid.Column>\r\n      </Grid.Row>\r\n    ));\r\n  }\r\n\r\n  function renderWeightInputs() {\r\n    const weightingOptions = ctx.state.weightingOptions;\r\n    return (\r\n      <>\r\n        <Grid.Row>\r\n          <Grid.Column style={{ flex: '0 0 180px', display: 'flex', alignItems: 'center' }}>\r\n            Resource Efficiency\r\n          </Grid.Column>\r\n          <Grid.Column style={{ flex: '1 1 auto' }}>\r\n            <Input\r\n              className='no-spinner'\r\n              type='number'\r\n              min='0'\r\n              step='1'\r\n              fluid\r\n              value={weightingOptions.resources}\r\n              onChange={(e, { value }) => {\r\n                ctx.dispatch({\r\n                  type: 'UPDATE_WEIGHTING_OPTIONS',\r\n                  data: { ...weightingOptions, resources: value },\r\n                });\r\n              }}\r\n            >\r\n            </Input>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n        <Grid.Row>\r\n          <Grid.Column style={{ flex: '0 0 180px', display: 'flex', alignItems: 'center' }}>\r\n            Power Efficiency\r\n          </Grid.Column>\r\n          <Grid.Column style={{ flex: '1 1 auto' }}>\r\n            <Input\r\n              className='no-spinner'\r\n              type='number'\r\n              min='0'\r\n              step='1'\r\n              fluid\r\n              value={weightingOptions.power}\r\n              onChange={(e, { value }) => {\r\n                ctx.dispatch({\r\n                  type: 'UPDATE_WEIGHTING_OPTIONS',\r\n                  data: { ...weightingOptions, power: value },\r\n                });\r\n              }}\r\n            >\r\n            </Input>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n        <Grid.Row>\r\n          <Grid.Column style={{ flex: '0 0 180px', display: 'flex', alignItems: 'center' }}>\r\n            Build Area Efficiency\r\n          </Grid.Column>\r\n          <Grid.Column style={{ flex: '1 1 auto' }}>\r\n            <Input\r\n              className='no-spinner'\r\n              type='number'\r\n              min='0'\r\n              step='1'\r\n              fluid\r\n              value={weightingOptions.buildArea}\r\n              onChange={(e, { value }) => {\r\n                ctx.dispatch({\r\n                  type: 'UPDATE_WEIGHTING_OPTIONS',\r\n                  data: { ...weightingOptions, buildArea: value },\r\n                });\r\n              }}\r\n            >\r\n            </Input>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </>\r\n    )\r\n  }\r\n\r\n  function renderResourceInputs() {\r\n    return ctx.state.inputResources.map((data) => (\r\n      <Grid.Row key={data.key}>\r\n        <Grid.Column style={{ flex: '1 1 auto', display: 'flex', alignItems: 'center', minWidth: '120px' }}>\r\n          {items[data.itemKey].name}\r\n        </Grid.Column>\r\n        <Grid.Column style={{ flex: '2 1 auto', minWidth: '210px' }}>\r\n          <Input\r\n            className='no-spinner'\r\n            type='number'\r\n            min='0'\r\n            step='1'\r\n            fluid\r\n            value={data.value}\r\n            onChange={(e, { value }) => {\r\n              ctx.dispatch({\r\n                type: 'UPDATE_INPUT_RESOURCE',\r\n                data: { ...data, value: value },\r\n              });\r\n            }}\r\n            labelPosition='right'\r\n          >\r\n            <input disabled={data.unlimited} />\r\n            <Checkbox\r\n              className='label'\r\n              style={{ fontWeight: 'normal' }}\r\n              label='Unlimited'\r\n              checked={data.unlimited}\r\n              onChange={() => {\r\n                ctx.dispatch({\r\n                  type: 'UPDATE_INPUT_RESOURCE',\r\n                  data: { ...data, unlimited: !data.unlimited },\r\n                });\r\n              }}\r\n            />\r\n          </Input>\r\n        </Grid.Column>\r\n        <Grid.Column style={{ flex: '1.5 1 auto', minWidth: '160px' }}>\r\n          <Input\r\n            className='no-spinner'\r\n            type='number'\r\n            min='0'\r\n            step='1'\r\n            fluid\r\n            value={data.weight}\r\n            onChange={(e, { value }) => {\r\n              ctx.dispatch({\r\n                type: 'UPDATE_INPUT_RESOURCE',\r\n                data: { ...data, weight: value },\r\n              });\r\n            }}\r\n            label='Weight'\r\n          />\r\n        </Grid.Column>\r\n      </Grid.Row>\r\n    ));\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Header>Input Items</Header>\r\n      <p>\r\n        Select the items that you already have available and don't need to produce in this factory.\r\n      </p>\r\n      <Grid>\r\n        {renderItemInputs()}\r\n        <Grid.Row>\r\n          <Grid.Column>\r\n            <Button\r\n              primary\r\n              onClick={() => { ctx.dispatch({ type: 'ADD_INPUT_ITEM' }) }}\r\n            >\r\n              + Add Input\r\n            </Button>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n      <Divider />\r\n      <Header>Weighting Options</Header>\r\n      <p>\r\n        Adjust the weights affecting the importance of various properties of the factory. A value of 0 indicates that that property is not considered during factory layout.\r\n      </p>\r\n      <Grid>\r\n        <Grid.Row>\r\n          <Grid.Column>\r\n            <Button\r\n              primary\r\n              onClick={() => { ctx.dispatch({ type: 'SET_ALL_WEIGHTS_DEFAULT' }) }}\r\n            >\r\n              Reset all weights\r\n            </Button>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n        {renderWeightInputs()}\r\n      </Grid>\r\n      <Divider />\r\n      <Header>Raw Resources</Header>\r\n      <p>\r\n        Select the raw resources that are available to your factory. The default values are set to the map limits. The weight value is a number representing how valuable that resource is when comparing recipes. The defaults are calculated automatically according to node rarity.\r\n      </p>\r\n      <Grid>\r\n        <Grid.Row columns={1}>\r\n          <Grid.Column>\r\n            <Button\r\n              primary\r\n              onClick={() => { ctx.dispatch({ type: 'SET_RESOURCES_TO_MAP_LIMITS' }) }}\r\n            >\r\n              Set to Maximum\r\n            </Button>\r\n            <Button\r\n              primary\r\n              onClick={() => { ctx.dispatch({ type: 'SET_RESOURCES_TO_0' }) }}\r\n            >\r\n              Set to 0\r\n            </Button>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n        <Grid.Row columns={1}>\r\n          <Grid.Column>\r\n            <Checkbox\r\n              label='Allow hand-gathered resources'\r\n              checked={ctx.state.allowHandGatheredItems}\r\n              onChange={(e, { checked }) => { ctx.dispatch({ type: 'SET_ALLOW_HAND_GATHERED_ITEMS', active: !!checked }) }}\r\n              />\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n        {renderResourceInputs()}\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default InputsTab;\r\n","import React, { useState, useMemo, useCallback } from 'react';\r\nimport { Button, Input, Checkbox, Grid, Header, List } from 'semantic-ui-react';\r\nimport { recipes } from '../../../../data';\r\nimport { useProductionContext } from '../../../../contexts/production';\r\n\r\nconst cleanAltNameRegex = /^Alternate: /;\r\nconst baseRecipes: { key: string, label: string }[] = [];\r\nconst altRecipes: { key: string, label: string }[] = [];\r\nObject.entries(recipes)\r\n  .forEach(([key, data]) => {\r\n    if (data.isAlternate) {\r\n      altRecipes.push({\r\n        key,\r\n        label: data.name.replace(cleanAltNameRegex, ''),\r\n      });\r\n    } else {\r\n      baseRecipes.push({\r\n        key,\r\n        label: data.name,\r\n      });\r\n    }\r\n  });\r\nbaseRecipes.sort((a, b) => (a.label > b.label ? 1 : -1));\r\naltRecipes.sort((a, b) => (a.label > b.label ? 1 : -1));\r\n\r\nconst RecipesTab = () => {\r\n  const ctx = useProductionContext();\r\n  const [altRecipeSearch, setAltRecipeSearch] = useState('');\r\n  const [baseRecipeSearch, setBaseRecipeSearch] = useState('');\r\n\r\n  const renderRecipeList = useCallback((recipeList: { key: string, label: string }[]) => {\r\n    return recipeList.map(({ key, label }) => ({\r\n      label,\r\n      component: (\r\n        <List.Item key={key}>\r\n          <Checkbox\r\n            label={label}\r\n            checked={ctx.state.allowedRecipes[key]}\r\n            onChange={() => {\r\n              ctx.dispatch({\r\n                type: 'SET_RECIPE_ACTIVE',\r\n                key,\r\n                active: !ctx.state.allowedRecipes[key],\r\n              });\r\n            }}\r\n          />\r\n        </List.Item>\r\n      )\r\n    }));\r\n  }, [ctx]);\r\n\r\n  const renderedBaseRecipes = useMemo(() => renderRecipeList(baseRecipes), [renderRecipeList]);\r\n  const renderedAltRecipes = useMemo(() => renderRecipeList(altRecipes), [renderRecipeList]);\r\n\r\n  function renderRecipeOptions(alternates: boolean) {\r\n    const [searchValue, setSearchValue] = alternates\r\n      ? [altRecipeSearch, setAltRecipeSearch]\r\n      : [baseRecipeSearch, setBaseRecipeSearch];\r\n    const rendered = alternates ? renderedAltRecipes : renderedBaseRecipes\r\n    return (\r\n      <>\r\n        <Input\r\n          placeholder='Search...'\r\n          fluid\r\n          action\r\n          value={searchValue}\r\n          onChange={(e, { value }) => { setSearchValue(value); }}\r\n        >\r\n          <input />\r\n          <Button onClick={() => { ctx.dispatch({ type: 'MASS_SET_RECIPES_ACTIVE', alternates, active: true }) }}>\r\n            All\r\n          </Button>\r\n          <Button onClick={() => { ctx.dispatch({ type: 'MASS_SET_RECIPES_ACTIVE', alternates, active: false }) }}>\r\n            None\r\n          </Button>\r\n        </Input>\r\n        <List>\r\n          {rendered.filter(({ label }) => label.toLowerCase().includes(searchValue)).map(({ component }) => component)}\r\n        </List>\r\n      </>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <p>\r\n        Select the recipes that you want to be considered in this factory.\r\n      </p>\r\n      <Grid columns={2} divided={true}>\r\n        <Grid.Row>\r\n          <Grid.Column>\r\n            <Header>Alternate Recipes</Header>\r\n            {renderRecipeOptions(true)}\r\n          </Grid.Column>\r\n          <Grid.Column>\r\n            <Header>Base Recipes</Header>\r\n            {renderRecipeOptions(false)}\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RecipesTab;\r\n","import React, { useState } from 'react';\r\nimport { Container, Menu } from 'semantic-ui-react';\r\nimport ProductionTab from './ProductionTab';\r\nimport InputsTab from './InputsTab';\r\nimport RecipesTab from './RecipesTab';\r\n\r\nconst PlannerOptions = () => {\r\n  const [activeTab, setActiveTab] = useState('production');\r\n\r\n  function handleSetTab(e: any, data: any) {\r\n    setActiveTab(data.name);\r\n  }\r\n\r\n  function renderTab() {\r\n    switch (activeTab) {\r\n      case 'production':\r\n        return <ProductionTab />\r\n      case 'inputs':\r\n        return <InputsTab />\r\n      case 'recipes':\r\n        return <RecipesTab />\r\n      default:\r\n        return null;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container fluid>\r\n      <Menu pointing secondary attached=\"top\" fluid widths={3}>\r\n        <Menu.Item\r\n          name='production'\r\n          active={activeTab === 'production'}\r\n          onClick={handleSetTab}\r\n        >\r\n          Production\r\n        </Menu.Item>\r\n        <Menu.Item\r\n          name='inputs'\r\n          active={activeTab === 'inputs'}\r\n          onClick={handleSetTab}\r\n        >\r\n          Inputs\r\n        </Menu.Item>\r\n        <Menu.Item\r\n          name='recipes'\r\n          active={activeTab === 'recipes'}\r\n          onClick={handleSetTab}\r\n        >\r\n          Recipes\r\n        </Menu.Item>\r\n      </Menu>\r\n      <div style={{ padding: '20px 0px' }}>\r\n        {renderTab()}\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default PlannerOptions;\r\n","import React, { useMemo } from 'react';\r\nimport { nanoid } from 'nanoid';\r\nimport Cytoscape, { Stylesheet } from 'cytoscape';\r\nimport klay from 'cytoscape-klay';\r\nimport GraphVisualizer from 'react-cytoscapejs';\r\nimport { ProductionGraph, GraphNode, GraphEdge, NODE_TYPE } from '../../../../utilities/production-solver';\r\nimport { items, recipes, buildings } from '../../../../data';\r\n\r\nCytoscape.use(klay);\r\n\r\nconst layout = {\r\n  name: 'klay',\r\n  padding: 40,\r\n  klay: {\r\n    direction: 'RIGHT',\r\n    edgeRouting: 'ORTHOGONAL',\r\n    nodePlacement: 'LINEAR_SEGMENTS',\r\n    edgeSpacingFactor: 0.2,\r\n    inLayerSpacingFactor: 0.7,\r\n    spacing: 70,\r\n    thoroughness: 10,\r\n  },\r\n};\r\n\r\nconst stylesheet: Stylesheet[] = [\r\n  {\r\n    selector: 'core',\r\n    style: {\r\n      'active-bg-color': '#000',\r\n      'active-bg-opacity': 0,\r\n      'active-bg-size': 0,\r\n      'selection-box-color': '#000',\r\n      'selection-box-border-color': '#000',\r\n      'selection-box-border-width': 0,\r\n      'selection-box-opacity': 0,\r\n      'outside-texture-bg-color': '#000',\r\n      'outside-texture-bg-opacity': 0,\r\n    },\r\n  },\r\n  {\r\n    selector: 'node',\r\n    style: {\r\n      'label': 'data(label)',\r\n      'text-valign': 'center',\r\n      'text-halign': 'center',\r\n      'height': '30px',\r\n      'width': '140px',\r\n      'text-max-width': '160px',\r\n      'padding-top': '20px',\r\n      'overlay-padding': 0,\r\n      'overlay-opacity': 0,\r\n      'text-wrap': 'wrap',\r\n      'font-size': '14px',\r\n    },\r\n  },\r\n  {\r\n    selector: 'edge',\r\n    style: {\r\n      'label': 'data(label)',\r\n      'width': 1,\r\n      'curve-style': 'bezier',\r\n      'control-point-step-size': 100,\r\n      'target-arrow-shape': 'triangle-backcurve',\r\n      'arrow-scale': 1.2,\r\n      'overlay-padding': 0,\r\n      'overlay-opacity': 0,\r\n      'text-wrap': 'wrap',\r\n      'font-size': '13px',\r\n    },\r\n  },\r\n  {\r\n    selector: 'edge.loop',\r\n    style: {\r\n      'loop-direction': '180deg',\r\n      'loop-sweep': '-40deg',\r\n      'edge-distances': 'node-position',\r\n      'source-endpoint': '-15% 50%',\r\n      'target-endpoint': '15% 50%',\r\n    },\r\n  },\r\n  {\r\n    selector: 'node.item-shape',\r\n    style: {\r\n      'shape': 'ellipse',\r\n    },\r\n  },\r\n  {\r\n    selector: 'node.recipe-shape',\r\n    style: {\r\n      'shape': 'round-rectangle',\r\n    },\r\n  },\r\n  {\r\n    selector: 'node.final-product',\r\n    style: {\r\n      'background-color': '#61e873',\r\n    },\r\n  },\r\n  {\r\n    selector: 'node.side-product',\r\n    style: {\r\n      'background-color': '#f371e2',\r\n    },\r\n  },\r\n  {\r\n    selector: 'node.input',\r\n    style: {\r\n      'background-color': '#e86161',\r\n    },\r\n  },\r\n  {\r\n    selector: 'node.hand-gathered',\r\n    style: {\r\n      'background-color': '#9061e8',\r\n    },\r\n  },\r\n  {\r\n    selector: 'node.resource',\r\n    style: {\r\n      'background-color': '#e8a761',\r\n    },\r\n  },\r\n  {\r\n    selector: 'node.recipe',\r\n    style: {\r\n      'background-color': '#61c2e8',\r\n    },\r\n  },\r\n  {\r\n    selector: 'node.nuclear',\r\n    style: {\r\n      'background-color': '#f0ed4c',\r\n    },\r\n  },\r\n];\r\n\r\nconst NODE_COLOR_CLASS = {\r\n  [NODE_TYPE.FINAL_PRODUCT]: 'final-product',\r\n  [NODE_TYPE.SIDE_PRODUCT]: 'side-product',\r\n  [NODE_TYPE.INPUT_ITEM]: 'input',\r\n  [NODE_TYPE.HAND_GATHERED_RESOURCE]: 'hand-gathered',\r\n  [NODE_TYPE.RESOURCE]: 'resource',\r\n  [NODE_TYPE.RECIPE]: 'recipe',\r\n};\r\n\r\nfunction truncateFloat(n: number) {\r\n  return n.toFixed(4).replace(/\\.?0+$/, '');\r\n}\r\n\r\nfunction getNodeLabel(node: GraphNode) {\r\n  let label = '';\r\n  let amountText = '';\r\n  if (node.type === NODE_TYPE.RECIPE) {\r\n    const recipe = recipes[node.key];\r\n    label = recipe.name;\r\n    amountText = `${truncateFloat(node.multiplier)}x ${buildings[recipe.producedIn].name}`;\r\n  } else {\r\n    const item = items[node.key];\r\n    label = item.name;\r\n    amountText = `${truncateFloat(node.multiplier)} / min`;\r\n  }\r\n  return `${label}\\n${amountText}`;\r\n}\r\n\r\nfunction getNodeClasses(node: GraphNode) {\r\n  const classes = [];\r\n  if (node.type === NODE_TYPE.RECIPE) {\r\n    classes.push('recipe-shape');\r\n    const recipe = recipes[node.key];\r\n    if (recipe.producedIn === 'Build_GeneratorNuclear_C') {\r\n      classes.push('nuclear');\r\n    } else {\r\n      classes.push(NODE_COLOR_CLASS[node.type]);\r\n    }\r\n  } else {\r\n    classes.push('item-shape');\r\n    classes.push(NODE_COLOR_CLASS[node.type]);\r\n  }\r\n  return classes;\r\n}\r\n\r\nfunction getEdgeLabel(edge: GraphEdge) {\r\n  const item = items[edge.key];\r\n  const label = item.name;\r\n  const amountText = `${truncateFloat(edge.productionRate)} / min`;\r\n  return `${label}\\n${amountText}`;\r\n}\r\n\r\ninterface Props {\r\n  activeGraph: ProductionGraph | null,\r\n  errorMessage: string,\r\n}\r\n\r\nconst ProductionGraphTab = (props: Props) => {\r\n  const { activeGraph, errorMessage } = props;\r\n\r\n  const graphProps = useMemo<any>(() => {\r\n    if (activeGraph == null) {\r\n      return null;\r\n    }\r\n\r\n    const key = nanoid();\r\n    const elements: any[] = [];\r\n\r\n    Object.entries(activeGraph.nodes).forEach(([key, node]) => {\r\n      elements.push({\r\n        group: 'nodes',\r\n        data: {\r\n          id: node.id,\r\n          label: getNodeLabel(node),\r\n        },\r\n        classes: getNodeClasses(node),\r\n      });\r\n    });\r\n    activeGraph.edges.forEach((edge) => {\r\n      elements.push({\r\n        group: 'edges',\r\n        data: {\r\n          source: edge.from,\r\n          target: edge.to,\r\n          label: getEdgeLabel(edge),\r\n        },\r\n        classes: edge.from === edge.to ? ['loop'] : undefined,\r\n      });\r\n    });\r\n    \r\n    return { key, elements };\r\n  }, [activeGraph]);\r\n\r\n  return (\r\n    <div style={{ height: '900px', display: 'flex', flexDirection:'column', alignItems: 'center', justifyContent: 'center', border: '1px solid black' }}>\r\n      {\r\n        graphProps != null\r\n        ? (\r\n            <GraphVisualizer\r\n              key={graphProps.key}\r\n              elements={graphProps.elements}\r\n              layout={layout}\r\n              stylesheet={stylesheet}\r\n              boxSelectionEnabled={false}\r\n              autounselectify={true}\r\n              wheelSensitivity={0.1}\r\n              maxZoom={3.0}\r\n              minZoom={0.1}\r\n              style={{ height: '100%', width: '100%', overflow: 'hidden' }}\r\n            />\r\n        )\r\n        : (\r\n          <>\r\n            <div>\r\n              No graph available\r\n            </div>\r\n            {errorMessage\r\n              ? (\r\n                <div>\r\n                  {`\\nERROR: ${errorMessage}`}\r\n                </div>\r\n              )\r\n              : null}\r\n          </>\r\n        )\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProductionGraphTab;\r\n","import React from 'react';\r\nimport { Container, Header, Icon, List } from 'semantic-ui-react';\r\nimport { buildings, items } from '../../../../data';\r\nimport { Report } from '../../../../utilities/production-solver';\r\n\r\nfunction formatFloat(n: number) {\r\n  return n.toLocaleString(undefined, { maximumFractionDigits: 3 });\r\n}\r\n\r\ninterface Props {\r\n  report: Report | null,\r\n}\r\n\r\nconst ReportTab = (props: Props) => {\r\n  const { report } = props;\r\n\r\n  // TODO: Use stylesheets ya dingus\r\n  function renderReport() {\r\n    return (\r\n      <>\r\n        <Header size='huge'>Statistics</Header>\r\n        <List celled size='large' style={{ marginBottom: '30px' }}>\r\n          <List.Item style={{ paddingTop: '5px', paddingBottom: '5px', marginBottom: '10px' }}>\r\n            <List.Content>\r\n              <List.Header style={{ marginBottom: '5px' }}>Points Produced</List.Header>\r\n              {formatFloat(report!.pointsProduced)}\r\n            </List.Content>\r\n          </List.Item>\r\n          <List.Item style={{ paddingTop: '5px', paddingBottom: '5px', marginBottom: '10px' }}>\r\n            <List.Content>\r\n              <List.Header style={{ marginBottom: '5px' }}>Estimated Power {report!.powerUsageEstimate < 0 ? 'Production' : 'Usage'}</List.Header>\r\n              {formatFloat(Math.abs(report!.powerUsageEstimate))} MW\r\n            </List.Content>\r\n          </List.Item>\r\n          <List.Item style={{ paddingTop: '5px', paddingBottom: '5px', marginBottom: '10px' }}>\r\n            <List.Content>\r\n              <List.Header style={{ marginBottom: '5px' }}>Resource Usage Score</List.Header>\r\n              {formatFloat(report!.resourceEfficiencyScore)}\r\n            </List.Content>\r\n          </List.Item>\r\n          <List.Item style={{ paddingTop: '5px', paddingBottom: '5px', marginBottom: '10px' }}>\r\n            <List.Content>\r\n              <List.Header style={{ marginBottom: '5px' }}>Total Build Area</List.Header>\r\n              {formatFloat(report!.totalBuildArea)} m²\r\n            </List.Content>\r\n          </List.Item>\r\n          <List.Item style={{ paddingTop: '5px', paddingBottom: '15px' }}>\r\n            <List.Content>\r\n              <List.Header style={{ marginBottom: '5px' }}>Estimated Minimal Foundations</List.Header>\r\n              {formatFloat(report!.estimatedFoundations)} foundations ({formatFloat(report!.estimatedFoundations * 8)} Concrete)\r\n            </List.Content>\r\n          </List.Item>\r\n        </List>\r\n\r\n        <Header size='huge'>Buildings</Header>\r\n        <List celled>\r\n          {renderBuildingsUsed()}\r\n          <List.Item style={{ paddingBottom: '10px' }}>\r\n            <List.Content>\r\n              <Header size='medium'>Total</Header>\r\n              <List.List>\r\n                {\r\n                  Object.entries(report!.totalMaterialCost)\r\n                    .sort((a, b) => {\r\n                      if (a[1] > b[1]) return -1;\r\n                      if (a[1] < b[1]) return 1;\r\n                      return 0;\r\n                    })\r\n                    .map(([itemKey, count]) => (\r\n                      <List.Item key={itemKey}>\r\n                        <Icon name='triangle right' />\r\n                        <List.Content>\r\n                          <b style={{ marginRight: '3px' }}>{items[itemKey].name}</b> x{formatFloat(count)}\r\n                        </List.Content>\r\n                      </List.Item>\r\n                    ))\r\n                }\r\n              </List.List>\r\n            </List.Content>\r\n          </List.Item>\r\n        </List>\r\n      </>\r\n    );\r\n  }\r\n\r\n  function renderBuildingsUsed() {\r\n    return Object.entries(report!.buildingsUsed).map(([buildingKey, usageInfo]) => (\r\n      <List.Item key={buildingKey} style={{ paddingBottom: '10px' }}>\r\n        <List.Content>\r\n          <Header size='medium'>{buildings[buildingKey].name} <span style={{ fontSize: '14px', marginLeft: '3px' }}>x{usageInfo.count}</span></Header>\r\n          <List.List>\r\n            {\r\n              Object.entries(usageInfo.materialCost)\r\n                .sort((a, b) => {\r\n                  if (a[1] > b[1]) return -1;\r\n                  if (a[1] < b[1]) return 1;\r\n                  return 0;\r\n                })\r\n                .map(([itemKey, count]) => (\r\n                  <List.Item key={itemKey}>\r\n                    <Icon name='triangle right' />\r\n                    <List.Content>\r\n                      <b style={{ marginRight: '3px' }}>{items[itemKey].name}</b> x{formatFloat(count)}\r\n                    </List.Content>\r\n                  </List.Item>\r\n                ))\r\n            }\r\n          </List.List>\r\n        </List.Content>\r\n      </List.Item>\r\n    ))\r\n  }\r\n  \r\n  return (\r\n    <div style={{ marginTop: '10px' }}>\r\n      {\r\n      !report\r\n        ? (\r\n          <Header>\r\n            No data available\r\n          </Header>\r\n        )\r\n        : renderReport()\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReportTab;\r\n","import React, { useCallback, useEffect, useState } from 'react';\r\nimport { Container, Menu, Button, Checkbox } from 'semantic-ui-react';\r\nimport ProductionGraphTab from './ProductionGraphTab';\r\nimport ReportTab from './ReportTab';\r\nimport { ProductionSolver, SolverResults } from '../../../utilities/production-solver';\r\nimport { useProductionContext } from '../../../contexts/production';\r\nimport { usePrevious } from '../../../hooks/usePrevious';\r\n\r\nconst PlannerResults = () => {\r\n  const [activeTab, setActiveTab] = useState('production-graph');\r\n  const [autoCalc, setAutoCalc] = useState(true);\r\n  const [loaded, setLoaded] = useState(false);\r\n  const [solverResults, setSolverResults] = useState<SolverResults | null>(null);\r\n  const ctx = useProductionContext();\r\n  const prevState = usePrevious(ctx.state);\r\n\r\n  const handleCalculateFactory = useCallback(async () => {\r\n    try {\r\n      const solver = new ProductionSolver(ctx.state);\r\n      const results = await solver.exec();\r\n      setSolverResults((prevState) => {\r\n        if (!prevState || prevState.timestamp < results.timestamp) {\r\n          return results;\r\n        }\r\n        return prevState;\r\n      });\r\n    } catch (e: any) {\r\n      setSolverResults({\r\n        productionGraph: null,\r\n        report: null,\r\n        timestamp: performance.now(),\r\n        error: e.message,\r\n      });\r\n    }\r\n  }, [ctx.state]);\r\n\r\n  function handleSetTab(e: any, data: any) {\r\n    setActiveTab(data.name);\r\n  }\r\n\r\n  function renderTab() {\r\n    switch (activeTab) {\r\n      case 'production-graph':\r\n        return <ProductionGraphTab activeGraph={solverResults?.productionGraph || null} errorMessage={solverResults?.error || ''} />\r\n      case 'report':\r\n        return <ReportTab report={solverResults?.report || null} />\r\n      default:\r\n        return null;\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!loaded) {\r\n      handleCalculateFactory();\r\n      setLoaded(true);\r\n    } else if (autoCalc && prevState !== ctx.state) {\r\n      handleCalculateFactory();\r\n    }\r\n  }, [autoCalc, ctx.state, handleCalculateFactory, loaded, prevState]);\r\n\r\n  return (\r\n    <Container fluid>\r\n      <Menu pointing secondary attached=\"top\">\r\n        <Menu.Item\r\n          name='production-graph'\r\n          active={activeTab === 'production-graph'}\r\n          onClick={handleSetTab}\r\n        >\r\n          Production Graph\r\n        </Menu.Item>\r\n        <Menu.Item\r\n          name='report'\r\n          active={activeTab === 'report'}\r\n          onClick={handleSetTab}\r\n        >\r\n          Report\r\n        </Menu.Item>\r\n      </Menu>\r\n      <div style={{ padding: '20px 0px' }}>\r\n        <Button primary onClick={handleCalculateFactory} disabled={autoCalc} style={{ marginBottom: '10px', marginRight: '15px' }}>\r\n          Calculate\r\n        </Button>\r\n        <Checkbox\r\n          label='Auto-calculate (turn this off if changing options is slow)'\r\n          toggle\r\n          checked={autoCalc}\r\n          onChange={(e, { checked }) => { setAutoCalc(!!checked); }}\r\n        />\r\n        {renderTab()}\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default PlannerResults;\r\n","import React from 'react';\r\nimport seedrandom from 'seedrandom';\r\nimport { Container, Header, Grid } from 'semantic-ui-react';\r\nimport PlannerOptions from './PlannerOptions';\r\nimport PlannerResults from './PlannerResults';\r\nimport { ProductionProvider } from '../../contexts/production';\r\n\r\nconst ONE_HOUR = 1000 * 60 * 60;\r\nconst seed = Math.floor(new Date().getTime() / ONE_HOUR);\r\nconst rng = seedrandom(String(seed));\r\n\r\nconst TIPS = [\r\n  'Pet the lizard doggo!',\r\n  'Get back to work!',\r\n  'Update 5 now available!',\r\n  'Arachnophobia mode enabled.',\r\n  'FICSIT does not waste.',\r\n  'Linear algebra!',\r\n  'Do not pet the spiders.',\r\n  'BEAMS.',\r\n  'Just 5 more minutes...',\r\n  'Thanks, Jace. Helps a lot!',\r\n];\r\n\r\nconst TIP_INDEX = Math.floor(rng() * TIPS.length);\r\nconst TIP = `FICSIT Tip #${TIP_INDEX}: ${TIPS[TIP_INDEX]}`\r\n\r\nconst ProductionPlanner = () => {\r\n  return (\r\n    <>\r\n      <Header as='h1'>Production Planner</Header>\r\n      <p>\r\n        {TIP}\r\n      </p>\r\n      <Container fluid>\r\n        <ProductionProvider>\r\n          <Factory />\r\n        </ProductionProvider>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProductionPlanner;\r\n\r\nconst Factory = () => {\r\n  return (\r\n    <>\r\n      <Grid columns={2}>\r\n        <Grid.Column width={5}>\r\n          <PlannerOptions />\r\n        </Grid.Column>\r\n        <Grid.Column width={11}>\r\n          <PlannerResults />\r\n        </Grid.Column>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Container, Header, Menu } from 'semantic-ui-react';\r\nimport ProductionPlanner from '../ProductionPlanner';\r\n\r\nconst Main = () => {\r\n  return (\r\n    <Container fluid>\r\n      <Menu fixed='top' size=\"massive\">\r\n        <Container fluid>\r\n          <Menu.Item as='a' header >\r\n            Yet Another Factory Planner\r\n          </Menu.Item>\r\n          <Menu.Item>\r\n            <Header style={{ color: 'red', fontWeight: 'bold' }}>This site is in ALPHA and is subject to breaking changes without warning!!</Header>\r\n          </Menu.Item>\r\n        </Container>\r\n      </Menu>\r\n      <Container fluid style={{ padding: '0px 50px', paddingTop: '70px' }}>\r\n        <ProductionPlanner />\r\n      </Container>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import React from 'react';\nimport Main from './containers/Main';\n\nfunction App() {\n  return (\n    <Main />\n  );\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'semantic-ui-css/semantic.css';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}